
Lathe_attiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001454  00001508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000142c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0000942c  0000142c  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000021  00803e04  00803e04  0000150c  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004291  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001eca  00000000  00000000  00005909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010ff  00000000  00000000  000077d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a8  00000000  00000000  000088d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ba2  00000000  00000000  00008b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e93  00000000  00000000  0000a71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  0000b5b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
       2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
       4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
       6:	8c c1       	rjmp	.+792    	; 0x320 <__vector_3>
       8:	c6 c1       	rjmp	.+908    	; 0x396 <__vector_4>
       a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
       c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
       e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
      10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
      12:	43 c1       	rjmp	.+646    	; 0x29a <__vector_9>
      14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
      16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
      18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
      1a:	66 c1       	rjmp	.+716    	; 0x2e8 <__vector_13>
      1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
      1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
      20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
      22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
      24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
      26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
      28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
      2a:	2a c0       	rjmp	.+84     	; 0x80 <__bad_interrupt>
      2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
      2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
      30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
      32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <__ctors_start>:
      34:	59 06       	cpc	r5, r25

00000036 <__ctors_end>:
      36:	11 24       	eor	r1, r1
      38:	1f be       	out	0x3f, r1	; 63
      3a:	cf ef       	ldi	r28, 0xFF	; 255
      3c:	cd bf       	out	0x3d, r28	; 61
      3e:	df e3       	ldi	r29, 0x3F	; 63
      40:	de bf       	out	0x3e, r29	; 62

00000042 <__do_copy_data>:
      42:	1e e3       	ldi	r17, 0x3E	; 62
      44:	a0 e0       	ldi	r26, 0x00	; 0
      46:	be e3       	ldi	r27, 0x3E	; 62
      48:	e4 e5       	ldi	r30, 0x54	; 84
      4a:	f4 e1       	ldi	r31, 0x14	; 20
      4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
      4e:	05 90       	lpm	r0, Z+
      50:	0d 92       	st	X+, r0
      52:	a4 30       	cpi	r26, 0x04	; 4
      54:	b1 07       	cpc	r27, r17
      56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
      58:	2e e3       	ldi	r18, 0x3E	; 62
      5a:	a4 e0       	ldi	r26, 0x04	; 4
      5c:	be e3       	ldi	r27, 0x3E	; 62
      5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
      60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
      62:	a5 32       	cpi	r26, 0x25	; 37
      64:	b2 07       	cpc	r27, r18
      66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>

00000068 <__do_global_ctors>:
      68:	10 e0       	ldi	r17, 0x00	; 0
      6a:	cb e1       	ldi	r28, 0x1B	; 27
      6c:	d0 e0       	ldi	r29, 0x00	; 0
      6e:	03 c0       	rjmp	.+6      	; 0x76 <__do_global_ctors+0xe>
      70:	21 97       	sbiw	r28, 0x01	; 1
      72:	fe 01       	movw	r30, r28
      74:	d3 d9       	rcall	.-3162   	; 0xfffff41c <__eeprom_end+0xff7ef41c>
      76:	ca 31       	cpi	r28, 0x1A	; 26
      78:	d1 07       	cpc	r29, r17
      7a:	d1 f7       	brne	.-12     	; 0x70 <__do_global_ctors+0x8>
      7c:	6d d2       	rcall	.+1242   	; 0x558 <main>
      7e:	d4 c9       	rjmp	.-3160   	; 0xfffff428 <__eeprom_end+0xff7ef428>

00000080 <__bad_interrupt>:
      80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <_ZN11bcd_encoder4initEv>:
#include "BCD_encoder.h"

void bcd_encoder::init()
{
	
	bcd_clock_port.DIRSET = bcd_clock_pin; 
      82:	e0 e2       	ldi	r30, 0x20	; 32
      84:	f4 e0       	ldi	r31, 0x04	; 4
      86:	81 e0       	ldi	r24, 0x01	; 1
      88:	81 83       	std	Z+1, r24	; 0x01
	bcd_clock_port.OUTCLR = bcd_clock_pin; //clk low
      8a:	86 83       	std	Z+6, r24	; 0x06
	
	bcd_load_port.DIRSET = bcd_load_pin;
      8c:	88 e0       	ldi	r24, 0x08	; 8
      8e:	81 83       	std	Z+1, r24	; 0x01
	bcd_load_port.OUTSET = bcd_load_pin; //trigger high
      90:	85 83       	std	Z+5, r24	; 0x05
      92:	08 95       	ret

00000094 <_ZN11bcd_encoder8read_bcdEv>:
	
}


uint16_t bcd_encoder::read_bcd()
{
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	00 d0       	rcall	.+0      	; 0x9a <_ZN11bcd_encoder8read_bcdEv+0x6>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t data = 0;
      9e:	19 82       	std	Y+1, r1	; 0x01
      a0:	1a 82       	std	Y+2, r1	; 0x02
	
	//load data
	bcd_load_port.OUTCLR = bcd_load_pin;
      a2:	e0 e2       	ldi	r30, 0x20	; 32
      a4:	f4 e0       	ldi	r31, 0x04	; 4
      a6:	88 e0       	ldi	r24, 0x08	; 8
      a8:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      aa:	9a e1       	ldi	r25, 0x1A	; 26
      ac:	9a 95       	dec	r25
      ae:	f1 f7       	brne	.-4      	; 0xac <_ZN11bcd_encoder8read_bcdEv+0x18>
      b0:	00 c0       	rjmp	.+0      	; 0xb2 <_ZN11bcd_encoder8read_bcdEv+0x1e>
	_delay_us(5);
	//latch input to start shift out
	bcd_load_port.OUTSET = bcd_load_pin;
      b2:	85 83       	std	Z+5, r24	; 0x05
      b4:	8a e1       	ldi	r24, 0x1A	; 26
      b6:	8a 95       	dec	r24
      b8:	f1 f7       	brne	.-4      	; 0xb6 <_ZN11bcd_encoder8read_bcdEv+0x22>
      ba:	00 c0       	rjmp	.+0      	; 0xbc <_ZN11bcd_encoder8read_bcdEv+0x28>
	_delay_us(5);
	
	//clock out data
	for (uint8_t i = 0; i < bcd_bits; i++)
      bc:	20 e0       	ldi	r18, 0x00	; 0
      be:	20 31       	cpi	r18, 0x10	; 16
      c0:	00 f5       	brcc	.+64     	; 0x102 <_ZN11bcd_encoder8read_bcdEv+0x6e>
	{
		
		data = data | (((bcd_data_port.IN & bcd_data_pin) >> (bcd_data_pin-1)) << i );
      c2:	e0 e2       	ldi	r30, 0x20	; 32
      c4:	f4 e0       	ldi	r31, 0x04	; 4
      c6:	80 85       	ldd	r24, Z+8	; 0x08
      c8:	82 70       	andi	r24, 0x02	; 2
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	95 95       	asr	r25
      ce:	87 95       	ror	r24
      d0:	02 2e       	mov	r0, r18
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <_ZN11bcd_encoder8read_bcdEv+0x44>
      d4:	88 0f       	add	r24, r24
      d6:	99 1f       	adc	r25, r25
      d8:	0a 94       	dec	r0
      da:	e2 f7       	brpl	.-8      	; 0xd4 <_ZN11bcd_encoder8read_bcdEv+0x40>
      dc:	49 81       	ldd	r20, Y+1	; 0x01
      de:	5a 81       	ldd	r21, Y+2	; 0x02
      e0:	84 2b       	or	r24, r20
      e2:	95 2b       	or	r25, r21
      e4:	89 83       	std	Y+1, r24	; 0x01
      e6:	9a 83       	std	Y+2, r25	; 0x02
		
		//clk high - shift data
		bcd_clock_port.OUTSET = bcd_clock_pin;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	9a e1       	ldi	r25, 0x1A	; 26
      ee:	9a 95       	dec	r25
      f0:	f1 f7       	brne	.-4      	; 0xee <_ZN11bcd_encoder8read_bcdEv+0x5a>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN11bcd_encoder8read_bcdEv+0x60>
		_delay_us(5);
		//clk low
		bcd_clock_port.OUTCLR = bcd_clock_pin;
      f4:	86 83       	std	Z+6, r24	; 0x06
      f6:	8a e1       	ldi	r24, 0x1A	; 26
      f8:	8a 95       	dec	r24
      fa:	f1 f7       	brne	.-4      	; 0xf8 <_ZN11bcd_encoder8read_bcdEv+0x64>
      fc:	00 c0       	rjmp	.+0      	; 0xfe <_ZN11bcd_encoder8read_bcdEv+0x6a>
	//latch input to start shift out
	bcd_load_port.OUTSET = bcd_load_pin;
	_delay_us(5);
	
	//clock out data
	for (uint8_t i = 0; i < bcd_bits; i++)
      fe:	2f 5f       	subi	r18, 0xFF	; 255
     100:	de cf       	rjmp	.-68     	; 0xbe <_ZN11bcd_encoder8read_bcdEv+0x2a>
		bcd_clock_port.OUTCLR = bcd_clock_pin;
		_delay_us(5);
		
	}
	
	return data;
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	9a 81       	ldd	r25, Y+2	; 0x02
}
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <_ZN11bcd_encoder10bcd_to_intEv>:

uint16_t bcd_encoder::bcd_to_int()
{
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
	uint16_t temp = read_bcd();
     118:	bd df       	rcall	.-134    	; 0x94 <_ZN11bcd_encoder8read_bcdEv>
	
	uint16_t ones = ((temp & 0b0000000000001000) >> 3) | ((temp & 0b0000000000000100) >> 1) | ((temp & 0b0000000000000010) << 1) | ((temp & 0b0000000000000001) << 3);
     11a:	83 fb       	bst	r24, 3
     11c:	00 27       	eor	r16, r16
     11e:	00 f9       	bld	r16, 0
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	bc 01       	movw	r22, r24
     124:	64 70       	andi	r22, 0x04	; 4
     126:	77 27       	eor	r23, r23
     128:	76 95       	lsr	r23
     12a:	67 95       	ror	r22
     12c:	60 2b       	or	r22, r16
     12e:	71 2b       	or	r23, r17
     130:	ac 01       	movw	r20, r24
     132:	42 70       	andi	r20, 0x02	; 2
     134:	55 27       	eor	r21, r21
     136:	44 0f       	add	r20, r20
     138:	55 1f       	adc	r21, r21
     13a:	9b 01       	movw	r18, r22
     13c:	24 2b       	or	r18, r20
     13e:	35 2b       	or	r19, r21
     140:	bc 01       	movw	r22, r24
     142:	61 70       	andi	r22, 0x01	; 1
     144:	77 27       	eor	r23, r23
     146:	66 0f       	add	r22, r22
     148:	77 1f       	adc	r23, r23
     14a:	66 0f       	add	r22, r22
     14c:	77 1f       	adc	r23, r23
     14e:	66 0f       	add	r22, r22
     150:	77 1f       	adc	r23, r23
     152:	62 2b       	or	r22, r18
     154:	73 2b       	or	r23, r19
	uint16_t tens = ((temp & 0b0000000010000000) >> 7) | ((temp & 0b0000000001000000) >> 5) | ((temp & 0b0000000000100000) >> 3) | ((temp & 0b0000000000010000) >> 1);
     156:	87 fb       	bst	r24, 7
     158:	22 27       	eor	r18, r18
     15a:	20 f9       	bld	r18, 0
     15c:	c2 2f       	mov	r28, r18
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	d2 2f       	mov	r29, r18
     162:	ac 01       	movw	r20, r24
     164:	40 74       	andi	r20, 0x40	; 64
     166:	55 27       	eor	r21, r21
     168:	56 95       	lsr	r21
     16a:	47 95       	ror	r20
     16c:	52 95       	swap	r21
     16e:	42 95       	swap	r20
     170:	4f 70       	andi	r20, 0x0F	; 15
     172:	45 27       	eor	r20, r21
     174:	5f 70       	andi	r21, 0x0F	; 15
     176:	45 27       	eor	r20, r21
     178:	4c 2b       	or	r20, r28
     17a:	5d 2b       	or	r21, r29
     17c:	fc 01       	movw	r30, r24
     17e:	e0 72       	andi	r30, 0x20	; 32
     180:	ff 27       	eor	r31, r31
     182:	f6 95       	lsr	r31
     184:	e7 95       	ror	r30
     186:	f6 95       	lsr	r31
     188:	e7 95       	ror	r30
     18a:	f6 95       	lsr	r31
     18c:	e7 95       	ror	r30
     18e:	9a 01       	movw	r18, r20
     190:	2e 2b       	or	r18, r30
     192:	3f 2b       	or	r19, r31
     194:	ac 01       	movw	r20, r24
     196:	40 71       	andi	r20, 0x10	; 16
     198:	55 27       	eor	r21, r21
     19a:	56 95       	lsr	r21
     19c:	47 95       	ror	r20
     19e:	42 2b       	or	r20, r18
     1a0:	53 2b       	or	r21, r19
	uint16_t hundereds = ((temp & 0b0000100000000000) >> 11) | ((temp & 0b0000010000000000) >> 9) | ((temp & 0b0000001000000000) >> 7) | ((temp & 0b0000000100000000) >> 5);
     1a2:	fc 01       	movw	r30, r24
     1a4:	ee 27       	eor	r30, r30
     1a6:	f8 70       	andi	r31, 0x08	; 8
     1a8:	ef 2f       	mov	r30, r31
     1aa:	ff 27       	eor	r31, r31
     1ac:	e6 95       	lsr	r30
     1ae:	e6 95       	lsr	r30
     1b0:	e6 95       	lsr	r30
     1b2:	9c 01       	movw	r18, r24
     1b4:	22 27       	eor	r18, r18
     1b6:	34 70       	andi	r19, 0x04	; 4
     1b8:	23 2f       	mov	r18, r19
     1ba:	33 27       	eor	r19, r19
     1bc:	26 95       	lsr	r18
     1be:	e2 2b       	or	r30, r18
     1c0:	f3 2b       	or	r31, r19
     1c2:	dc 01       	movw	r26, r24
     1c4:	aa 27       	eor	r26, r26
     1c6:	b2 70       	andi	r27, 0x02	; 2
     1c8:	aa 0f       	add	r26, r26
     1ca:	ab 2f       	mov	r26, r27
     1cc:	aa 1f       	adc	r26, r26
     1ce:	bb 0b       	sbc	r27, r27
     1d0:	b1 95       	neg	r27
     1d2:	9f 01       	movw	r18, r30
     1d4:	2a 2b       	or	r18, r26
     1d6:	3b 2b       	or	r19, r27
     1d8:	fc 01       	movw	r30, r24
     1da:	ee 27       	eor	r30, r30
     1dc:	f1 70       	andi	r31, 0x01	; 1
     1de:	f6 95       	lsr	r31
     1e0:	e7 95       	ror	r30
     1e2:	f2 95       	swap	r31
     1e4:	e2 95       	swap	r30
     1e6:	ef 70       	andi	r30, 0x0F	; 15
     1e8:	ef 27       	eor	r30, r31
     1ea:	ff 70       	andi	r31, 0x0F	; 15
     1ec:	ef 27       	eor	r30, r31
     1ee:	e2 2b       	or	r30, r18
     1f0:	f3 2b       	or	r31, r19
	uint16_t thousands = ((temp & 0b1000000000000000) >> 15) | ((temp & 0b0100000000000000) >> 13) | ((temp & 0b0010000000000000) >> 11) | ((temp & 0b0001000000000000) >> 9);
     1f2:	dc 01       	movw	r26, r24
     1f4:	aa 27       	eor	r26, r26
     1f6:	bb 0f       	add	r27, r27
     1f8:	aa 1f       	adc	r26, r26
     1fa:	bb 27       	eor	r27, r27
     1fc:	9c 01       	movw	r18, r24
     1fe:	22 27       	eor	r18, r18
     200:	30 74       	andi	r19, 0x40	; 64
     202:	23 2f       	mov	r18, r19
     204:	33 27       	eor	r19, r19
     206:	22 95       	swap	r18
     208:	26 95       	lsr	r18
     20a:	27 70       	andi	r18, 0x07	; 7
     20c:	2a 2b       	or	r18, r26
     20e:	3b 2b       	or	r19, r27
     210:	dc 01       	movw	r26, r24
     212:	aa 27       	eor	r26, r26
     214:	b0 72       	andi	r27, 0x20	; 32
     216:	ab 2f       	mov	r26, r27
     218:	bb 27       	eor	r27, r27
     21a:	a6 95       	lsr	r26
     21c:	a6 95       	lsr	r26
     21e:	a6 95       	lsr	r26
     220:	2a 2b       	or	r18, r26
     222:	3b 2b       	or	r19, r27
     224:	88 27       	eor	r24, r24
     226:	90 71       	andi	r25, 0x10	; 16
     228:	89 2f       	mov	r24, r25
     22a:	99 27       	eor	r25, r25
     22c:	86 95       	lsr	r24
     22e:	28 2b       	or	r18, r24
     230:	39 2b       	or	r19, r25
	
	temp = ones + (tens * 10) + (hundereds * 100) + (thousands * 1000);
     232:	ca 01       	movw	r24, r20
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	44 0f       	add	r20, r20
     23e:	55 1f       	adc	r21, r21
     240:	44 0f       	add	r20, r20
     242:	55 1f       	adc	r21, r21
     244:	48 0f       	add	r20, r24
     246:	59 1f       	adc	r21, r25
     248:	a4 e6       	ldi	r26, 0x64	; 100
     24a:	ae 9f       	mul	r26, r30
     24c:	c0 01       	movw	r24, r0
     24e:	af 9f       	mul	r26, r31
     250:	90 0d       	add	r25, r0
     252:	11 24       	eor	r1, r1
     254:	48 0f       	add	r20, r24
     256:	59 1f       	adc	r21, r25
     258:	64 0f       	add	r22, r20
     25a:	75 1f       	adc	r23, r21
     25c:	48 ee       	ldi	r20, 0xE8	; 232
     25e:	53 e0       	ldi	r21, 0x03	; 3
     260:	24 9f       	mul	r18, r20
     262:	c0 01       	movw	r24, r0
     264:	25 9f       	mul	r18, r21
     266:	90 0d       	add	r25, r0
     268:	34 9f       	mul	r19, r20
     26a:	90 0d       	add	r25, r0
     26c:	11 24       	eor	r1, r1
	
	return temp;
     26e:	86 0f       	add	r24, r22
     270:	97 1f       	adc	r25, r23
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	08 95       	ret

0000027c <_Z41__static_initialization_and_destruction_0ii>:
		while (spindle_ramp_counter != 0)
		{
			//hold here until interrupt loop finished
		}
	}
}
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	61 f4       	brne	.+24     	; 0x298 <_Z41__static_initialization_and_destruction_0ii+0x1c>
     280:	6f 3f       	cpi	r22, 0xFF	; 255
     282:	7f 4f       	sbci	r23, 0xFF	; 255
     284:	49 f4       	brne	.+18     	; 0x298 <_Z41__static_initialization_and_destruction_0ii+0x1c>
#include <stdint.h>
#include <stdlib.h>
#include <util/delay.h> //F_CPU="20000000" or 20MHz clock


class TM1637 
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	ec e2       	ldi	r30, 0x2C	; 44
     28a:	f4 e9       	ldi	r31, 0x94	; 148
     28c:	a5 e0       	ldi	r26, 0x05	; 5
     28e:	be e3       	ldi	r27, 0x3E	; 62
     290:	01 90       	ld	r0, Z+
     292:	0d 92       	st	X+, r0
     294:	8a 95       	dec	r24
     296:	e1 f7       	brne	.-8      	; 0x290 <_Z41__static_initialization_and_destruction_0ii+0x14>
     298:	08 95       	ret

0000029a <__vector_9>:
bcd_encoder bcd_input; //init BCD input encoder


//interrupt for TCA0 split high underflow - spindle pin
ISR (TCA0_HUNF_vect)
{
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	8f 93       	push	r24
     2a6:	9f 93       	push	r25
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
	//TCA0.SPLIT.INTFLAGS  //clear interrupt flag
	if (spindle_ramp_counter == 0)
     2ac:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     2b0:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	31 f4       	brne	.+12     	; 0x2c4 <__vector_9+0x2a>
	{
		TCA0.SPLIT.INTCTRL &= ~(TCA_SPLIT_HUNF_bm); //disable interrupt flag)
     2b8:	e0 e0       	ldi	r30, 0x00	; 0
     2ba:	fa e0       	ldi	r31, 0x0A	; 10
     2bc:	82 85       	ldd	r24, Z+10	; 0x0a
     2be:	8d 7f       	andi	r24, 0xFD	; 253
     2c0:	82 87       	std	Z+10, r24	; 0x0a
     2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <__vector_9+0x3c>
	}
	else
	{
		spindle_ramp_counter--;
     2c4:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     2c8:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_ramp_counter>
     2d2:	90 93 1e 3e 	sts	0x3E1E, r25	; 0x803e1e <spindle_ramp_counter+0x1>
	}
	
}
     2d6:	ff 91       	pop	r31
     2d8:	ef 91       	pop	r30
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <__vector_13>:

//interrupt for TCB0 - toggle pin
ISR (TCB0_INT_vect)
{
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	8f 93       	push	r24
	//disable interrupts whilst clock updates
	cli();
     2f4:	f8 94       	cli
	TCB0.INTFLAGS = TCB_CAPT_bm;  //Clear the interrupt flag 
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
	step_feed_port.OUTTGL = step_feed_mask;  //Toggle step GPIO 
     2fc:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x700447>
	
	//decrement ramp up counter
	if (feed_ramp_counter > 0)
     300:	80 91 1c 3e 	lds	r24, 0x3E1C	; 0x803e1c <feed_ramp_counter>
     304:	88 23       	and	r24, r24
     306:	29 f0       	breq	.+10     	; 0x312 <__vector_13+0x2a>
	{
		feed_ramp_counter--;
     308:	80 91 1c 3e 	lds	r24, 0x3E1C	; 0x803e1c <feed_ramp_counter>
     30c:	81 50       	subi	r24, 0x01	; 1
     30e:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <feed_ramp_counter>
	}
	//enable interrupts once clock updated
	sei();
     312:	78 94       	sei
}
     314:	8f 91       	pop	r24
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <__vector_3>:

//setup interrupt for changes on enable pins
ISR (PORTA_PORT_vect)
{
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	11 24       	eor	r1, r1
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	ef 93       	push	r30
     330:	ff 93       	push	r31
	//disable interrupts whilst clock updates
	cli();
     332:	f8 94       	cli
	spindle_enable_switch_port.INTFLAGS = PORT_INT_gm; //read pins and update flags (clear interrupt)
     334:	e0 e0       	ldi	r30, 0x00	; 0
     336:	f4 e0       	ldi	r31, 0x04	; 4
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	81 87       	std	Z+9, r24	; 0x09
	dir_spindle = ((spindle_direction_switch_port.IN & spindle_direction_switch_mask) >> spindle_direction_switch_pin_position);
     33c:	80 85       	ldd	r24, Z+8	; 0x08
     33e:	88 1f       	adc	r24, r24
     340:	88 27       	eor	r24, r24
     342:	88 1f       	adc	r24, r24
     344:	80 93 22 3e 	sts	0x3E22, r24	; 0x803e22 <dir_spindle>
	run_spindle = ((spindle_enable_switch_port.IN & spindle_enable_switch_mask) >> spindle_enable_switch_pin_position) | dir_spindle;			
     348:	80 85       	ldd	r24, Z+8	; 0x08
     34a:	80 74       	andi	r24, 0x40	; 64
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	08 2e       	mov	r0, r24
     350:	89 2f       	mov	r24, r25
     352:	00 0c       	add	r0, r0
     354:	88 1f       	adc	r24, r24
     356:	99 0b       	sbc	r25, r25
     358:	00 0c       	add	r0, r0
     35a:	88 1f       	adc	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	90 91 22 3e 	lds	r25, 0x3E22	; 0x803e22 <dir_spindle>
     362:	89 2b       	or	r24, r25
     364:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <run_spindle>
	run_feed = ((feed_direction_switch_port.IN & feed_direction_switch_mask) >> feed_direction_switch_pin_position);
     368:	80 85       	ldd	r24, Z+8	; 0x08
     36a:	80 71       	andi	r24, 0x10	; 16
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	95 95       	asr	r25
     374:	87 95       	ror	r24
     376:	95 95       	asr	r25
     378:	87 95       	ror	r24
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <run_feed>
	//enable interrupts once clock updated
	sei();
     382:	78 94       	sei
}
     384:	ff 91       	pop	r31
     386:	ef 91       	pop	r30
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <__vector_4>:

//setup interrupt for changes on enable pins
ISR (PORTB_PORT_vect)
{
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
	//disable interrupts whilst clock updates
	cli();
     3a8:	f8 94       	cli
	feed_enable_switch_port.INTFLAGS = PORT_INT_gm; //read pins and update flags (clear interrupt)
     3aa:	e0 e2       	ldi	r30, 0x20	; 32
     3ac:	f4 e0       	ldi	r31, 0x04	; 4
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	81 87       	std	Z+9, r24	; 0x09
	run_feed = ((feed_enable_switch_port.IN & feed_enable_switch_mask) >> feed_enable_switch_pin_position);
     3b2:	80 85       	ldd	r24, Z+8	; 0x08
     3b4:	84 70       	andi	r24, 0x04	; 4
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	95 95       	asr	r25
     3ba:	87 95       	ror	r24
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <run_feed>
	//enable interrupts once clock updated
	sei();
     3c4:	78 94       	sei
}	
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <_Z8init_ADCv>:
//Setup ADC
void init_ADC()
{
	//TINY - setup ADC
	//VREF - setup voltage reference to 4.3V
	VREF.CTRLA = VREF_ADC0REFSEL_4V34_gc;
     3d8:	e0 ea       	ldi	r30, 0xA0	; 160
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 e3       	ldi	r24, 0x30	; 48
     3de:	80 83       	st	Z, r24
	//VREF - enable ADC ref
	VREF.CTRLB |= VREF_ADC0REFEN_bm;
     3e0:	81 81       	ldd	r24, Z+1	; 0x01
     3e2:	82 60       	ori	r24, 0x02	; 2
     3e4:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select resolution 8bit
	ADC0.CTRLA = ADC_RESSEL_8BIT_gc;
     3e6:	e0 e0       	ldi	r30, 0x00	; 0
     3e8:	f6 e0       	ldi	r31, 0x06	; 6
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	80 83       	st	Z, r24
	//ADC - number of convertions accumulated per measurement
	ADC0.CTRLB = ADC_SAMPNUM_ACC8_gc;
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select reference
	ADC0.CTRLC = ADC_REFSEL_INTREF_gc;
     3f2:	12 82       	std	Z+2, r1	; 0x02
	//ADC - sampling rate pre-scaler ~1.25MHz
	ADC0.CTRLC = ADC_PRESC_DIV16_gc;
     3f4:	82 83       	std	Z+2, r24	; 0x02
	//ADC - initial input PA3 / AIN3
	ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;
     3f6:	86 83       	std	Z+6, r24	; 0x06
	//ADC - enable start event (start measuring on enable)
	ADC0.EVCTRL |= ADC_STARTEI_bm;
     3f8:	81 85       	ldd	r24, Z+9	; 0x09
     3fa:	81 60       	ori	r24, 0x01	; 1
     3fc:	81 87       	std	Z+9, r24	; 0x09
	//ADC - enable ADC (ready for measurement trigger)
	ADC0.CTRLA |= ADC_ENABLE_bm;
     3fe:	80 81       	ld	r24, Z
     400:	81 60       	ori	r24, 0x01	; 1
     402:	80 83       	st	Z, r24
     404:	08 95       	ret

00000406 <_Z11init_timersv>:
//setup - Counter A & B
void init_timers()
{
	//TCA0 - setup 8bit
	//enable split mode on TCA0 to allow signal to get to pin C3
	TCA0.SINGLE.CTRLD = TCA_SINGLE_SPLITM_bm;
     406:	e0 e0       	ldi	r30, 0x00	; 0
     408:	fa e0       	ldi	r31, 0x0A	; 10
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	93 83       	std	Z+3, r25	; 0x03
	TCA0.SPLIT.HPER = 255; //longest wait for given clock
     40e:	8f ef       	ldi	r24, 0xFF	; 255
     410:	87 a3       	std	Z+39, r24	; 0x27
	TCA0.SPLIT.HCMP0 = 128;
     412:	80 e8       	ldi	r24, 0x80	; 128
     414:	81 a7       	std	Z+41, r24	; 0x29
	TCA0.SPLIT.HCNT = 0; 
     416:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	81 83       	std	Z+1, r24	; 0x01
	
	//scale main clock - default
	spindle_clock_divider = 5;
     41c:	85 e0       	ldi	r24, 0x05	; 5
     41e:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <spindle_clock_divider>
	TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     422:	a0 91 19 3e 	lds	r26, 0x3E19	; 0x803e19 <spindle_clock_divider>
     426:	20 81       	ld	r18, Z
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	a4 5c       	subi	r26, 0xC4	; 196
     42c:	bb 46       	sbci	r27, 0x6B	; 107
     42e:	8c 91       	ld	r24, X
     430:	82 2b       	or	r24, r18
     432:	80 83       	st	Z, r24
	
	//TCB0 - setup 16bit
	TCB0.CCMP = 0; //set pulse length - high 
     434:	e0 e4       	ldi	r30, 0x40	; 64
     436:	fa e0       	ldi	r31, 0x0A	; 10
     438:	14 86       	std	Z+12, r1	; 0x0c
     43a:	15 86       	std	Z+13, r1	; 0x0d

	//set 8bit PWM mode - this connects it to its pin PA5 (or alternate)
	TCB0.CTRLA = 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
				| 0 << TCB_SYNCUPD_bp /* Synchronize Update: enabled */
				| TCB_CLKSEL_CLKDIV1_gc  /* use MAIN as clock source */
				| 0 << TCB_ENABLE_bp;   /* Enable: disabled */
     43c:	10 82       	st	Z, r1

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
				| 0 << TCB_CCMPINIT_bp /* Pin Initial State: enabled, used for input operations */
				| 0 << TCB_CCMPEN_bp   /* Pin Output Enable: enabled */
				| TCB_CNTMODE_INT_gc; /* Periodic Interrupt */
     43e:	11 82       	std	Z+1, r1	; 0x01
	
	TCB0.INTCTRL = TCB_CAPT_bm; //enable interrupt for clocking pin
     440:	95 83       	std	Z+5, r25	; 0x05
     442:	08 95       	ret

00000444 <_Z7get_adch>:

//read ADC value
uint16_t get_adc(uint8_t sel_pin)
{
	//wait for current measurement to finish
	while((ADC0.COMMAND & ADC_STCONV_bm) == 1){}
     444:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     448:	90 fd       	sbrc	r25, 0
     44a:	fc cf       	rjmp	.-8      	; 0x444 <_Z7get_adch>
	//select input PA2 / AIN2
	ADC0.MUXPOS = sel_pin;
     44c:	e0 e0       	ldi	r30, 0x00	; 0
     44e:	f6 e0       	ldi	r31, 0x06	; 6
     450:	86 83       	std	Z+6, r24	; 0x06
	//trigger reading
	ADC0.COMMAND |= ADC_STCONV_bm;
     452:	80 85       	ldd	r24, Z+8	; 0x08
     454:	81 60       	ori	r24, 0x01	; 1
     456:	80 87       	std	Z+8, r24	; 0x08
	//wait while reading taken
	while((ADC0.COMMAND & ADC_STCONV_bm) == 1){}
     458:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     45c:	80 fd       	sbrc	r24, 0
     45e:	fc cf       	rjmp	.-8      	; 0x458 <_Z7get_adch+0x14>
	//process result
	uint8_t result = uint8_t(ADC0.RES/8); //divide by number of samples accumulated
     460:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     464:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     468:	96 95       	lsr	r25
     46a:	87 95       	ror	r24
     46c:	96 95       	lsr	r25
     46e:	87 95       	ror	r24
     470:	96 95       	lsr	r25
     472:	87 95       	ror	r24
	return result;
}
     474:	99 27       	eor	r25, r25
     476:	08 95       	ret

00000478 <_Z7rpm_outv>:

//update LED rpm from ADC
uint16_t rpm_out()
{
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	cf 93       	push	r28
	
	uint16_t out_number = uint16_t(((float)cpu_speed / ((float)spindle_clock_divider_array[spindle_clock_divider]*float(analogue_value)*(float)spindle_steps)));
     482:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	ec 5b       	subi	r30, 0xBC	; 188
     48e:	fb 46       	sbci	r31, 0x6B	; 107
     490:	60 81       	ld	r22, Z
     492:	71 81       	ldd	r23, Z+1	; 0x01
     494:	c0 91 24 3e 	lds	r28, 0x3E24	; 0x803e24 <analogue_value>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	8f d6       	rcall	.+3358   	; 0x11bc <__floatunsisf>
     49e:	6b 01       	movw	r12, r22
     4a0:	7c 01       	movw	r14, r24
     4a2:	6c 2f       	mov	r22, r28
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	88 d6       	rcall	.+3344   	; 0x11bc <__floatunsisf>
     4ac:	9b 01       	movw	r18, r22
     4ae:	ac 01       	movw	r20, r24
     4b0:	c7 01       	movw	r24, r14
     4b2:	b6 01       	movw	r22, r12
     4b4:	16 d7       	rcall	.+3628   	; 0x12e2 <__mulsf3>
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	48 ec       	ldi	r20, 0xC8	; 200
     4bc:	54 e4       	ldi	r21, 0x44	; 68
     4be:	11 d7       	rcall	.+3618   	; 0x12e2 <__mulsf3>
     4c0:	9b 01       	movw	r18, r22
     4c2:	ac 01       	movw	r20, r24
     4c4:	60 e2       	ldi	r22, 0x20	; 32
     4c6:	7c eb       	ldi	r23, 0xBC	; 188
     4c8:	8e e3       	ldi	r24, 0x3E	; 62
     4ca:	9d e4       	ldi	r25, 0x4D	; 77
     4cc:	cf d5       	rcall	.+2974   	; 0x106c <__divsf3>
     4ce:	47 d6       	rcall	.+3214   	; 0x115e <__fixunssfsi>
	
	return out_number;
	
}
     4d0:	cb 01       	movw	r24, r22
     4d2:	cf 91       	pop	r28
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	cf 90       	pop	r12
     4dc:	08 95       	ret

000004de <_Z15ramp_spindle_upv>:


void ramp_spindle_up()
{
	//ramp the frequency
	for (uint8_t n = 255; n >= analogue_value; n--)
     4de:	2f ef       	ldi	r18, 0xFF	; 255
     4e0:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     4e4:	28 17       	cp	r18, r24
     4e6:	c8 f0       	brcs	.+50     	; 0x51a <_Z15ramp_spindle_upv+0x3c>
	{
		TCA0.SPLIT.HPER = n;
     4e8:	e0 e0       	ldi	r30, 0x00	; 0
     4ea:	fa e0       	ldi	r31, 0x0A	; 10
     4ec:	27 a3       	std	Z+39, r18	; 0x27
		TCA0.SPLIT.HCMP0 = n/2; //HPER divide by 2 ~50% duty cycle
     4ee:	82 2f       	mov	r24, r18
     4f0:	86 95       	lsr	r24
     4f2:	81 a7       	std	Z+41, r24	; 0x29
		
		spindle_ramp_counter = ramp_loops; //reset the loop counter
     4f4:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
     4f8:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__data_start+0x1>
     4fc:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_ramp_counter>
     500:	90 93 1e 3e 	sts	0x3E1E, r25	; 0x803e1e <spindle_ramp_counter+0x1>
		
		TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm; //enable interrupt flag
     504:	82 85       	ldd	r24, Z+10	; 0x0a
     506:	82 60       	ori	r24, 0x02	; 2
     508:	82 87       	std	Z+10, r24	; 0x0a
		
		while (spindle_ramp_counter != 0)
     50a:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     50e:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     512:	89 2b       	or	r24, r25
     514:	d1 f7       	brne	.-12     	; 0x50a <_Z15ramp_spindle_upv+0x2c>


void ramp_spindle_up()
{
	//ramp the frequency
	for (uint8_t n = 255; n >= analogue_value; n--)
     516:	21 50       	subi	r18, 0x01	; 1
     518:	e3 cf       	rjmp	.-58     	; 0x4e0 <_Z15ramp_spindle_upv+0x2>
     51a:	08 95       	ret

0000051c <_Z17ramp_spindle_downv>:


void ramp_spindle_down()
{
	//ramp the frequency
	for (uint8_t n = analogue_value; n <= 64; n++)
     51c:	20 91 24 3e 	lds	r18, 0x3E24	; 0x803e24 <analogue_value>
     520:	21 34       	cpi	r18, 0x41	; 65
     522:	c8 f4       	brcc	.+50     	; 0x556 <_Z17ramp_spindle_downv+0x3a>
	{
		TCA0.SPLIT.HPER = n;
     524:	e0 e0       	ldi	r30, 0x00	; 0
     526:	fa e0       	ldi	r31, 0x0A	; 10
     528:	27 a3       	std	Z+39, r18	; 0x27
		TCA0.SPLIT.HCMP0 = n/2; //HPER divide by 2 ~50% duty cycle
     52a:	82 2f       	mov	r24, r18
     52c:	86 95       	lsr	r24
     52e:	81 a7       	std	Z+41, r24	; 0x29
		
		spindle_ramp_counter = ramp_loops; //reset the loop counter
     530:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
     534:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__data_start+0x1>
     538:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_ramp_counter>
     53c:	90 93 1e 3e 	sts	0x3E1E, r25	; 0x803e1e <spindle_ramp_counter+0x1>
		
		TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm; //enable interrupt flag
     540:	82 85       	ldd	r24, Z+10	; 0x0a
     542:	82 60       	ori	r24, 0x02	; 2
     544:	82 87       	std	Z+10, r24	; 0x0a
		
		while (spindle_ramp_counter != 0)
     546:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     54a:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     54e:	89 2b       	or	r24, r25
     550:	d1 f7       	brne	.-12     	; 0x546 <_Z17ramp_spindle_downv+0x2a>


void ramp_spindle_down()
{
	//ramp the frequency
	for (uint8_t n = analogue_value; n <= 64; n++)
     552:	2f 5f       	subi	r18, 0xFF	; 255
     554:	e5 cf       	rjmp	.-54     	; 0x520 <_Z17ramp_spindle_downv+0x4>
     556:	08 95       	ret

00000558 <main>:

///////////////////////////////////////////////////////////////////////////////
///////////////////////// START of MAIN ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
int main(void)
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	26 97       	sbiw	r28, 0x06	; 6
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
	//set input, pull-ups on pins, interrupt from pins, etc
	spindle_enable_switch_control =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm; 
     566:	e0 e0       	ldi	r30, 0x00	; 0
     568:	f4 e0       	ldi	r31, 0x04	; 4
     56a:	89 e8       	ldi	r24, 0x89	; 137
     56c:	86 8b       	std	Z+22, r24	; 0x16
	spindle_direction_switch_control =	PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     56e:	87 8b       	std	Z+23, r24	; 0x17
	feed_enable_switch_control =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     570:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <__TEXT_REGION_LENGTH__+0x700432>
	feed_direction_switch_control =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     574:	84 8b       	std	Z+20, r24	; 0x14

	//set outputs
	step_spindle_port.DIRSET = step_spindle_mask;
     576:	e0 e4       	ldi	r30, 0x40	; 64
     578:	f4 e0       	ldi	r31, 0x04	; 4
     57a:	88 e0       	ldi	r24, 0x08	; 8
     57c:	81 83       	std	Z+1, r24	; 0x01
	step_spindle_port.OUTCLR = step_spindle_mask;
     57e:	86 83       	std	Z+6, r24	; 0x06
	PORTMUX.CTRLC = PORTMUX_TCA03_ALTERNATE_gc; //TCA03 alt pin
     580:	a0 e0       	ldi	r26, 0x00	; 0
     582:	b2 e0       	ldi	r27, 0x02	; 2
     584:	12 96       	adiw	r26, 0x02	; 2
     586:	8c 93       	st	X, r24
     588:	12 97       	sbiw	r26, 0x02	; 2
	
	step_feed_port.DIRSET = step_feed_mask;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	81 83       	std	Z+1, r24	; 0x01
	step_feed_port.OUTCLR = step_feed_mask;
     58e:	86 83       	std	Z+6, r24	; 0x06
	PORTMUX.CTRLD = PORTMUX_TCB0_ALTERNATE_gc; //TCB0 alt pin
     590:	13 96       	adiw	r26, 0x03	; 3
     592:	8c 93       	st	X, r24
	
	
	spindle_enable_control = PORT_INVEN_bm;
     594:	80 e8       	ldi	r24, 0x80	; 128
     596:	81 8b       	std	Z+17, r24	; 0x11
	spindle_enable_port.DIRSET = spindle_enable_mask;
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	91 83       	std	Z+1, r25	; 0x01
	spindle_enable_port.OUTCLR = spindle_enable_mask;
     59c:	96 83       	std	Z+6, r25	; 0x06
	
	feed_enable_control = PORT_INVEN_bm;
     59e:	82 8b       	std	Z+18, r24	; 0x12
	feed_enable_port.DIRSET = feed_enable_mask;
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	81 83       	std	Z+1, r24	; 0x01
	feed_enable_port.OUTCLR = feed_enable_mask;
     5a4:	86 83       	std	Z+6, r24	; 0x06
	
	
	//initialise 
	init_ADC();
     5a6:	18 df       	rcall	.-464    	; 0x3d8 <_Z8init_ADCv>
	led.init();
     5a8:	85 e0       	ldi	r24, 0x05	; 5
     5aa:	9e e3       	ldi	r25, 0x3E	; 62
     5ac:	07 d4       	rcall	.+2062   	; 0xdbc <_ZN6TM16374initEv>
	bcd_input.init();
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	9e e3       	ldi	r25, 0x3E	; 62
     5b2:	67 dd       	rcall	.-1330   	; 0x82 <_ZN11bcd_encoder4initEv>
	
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
     5b4:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	b9 f5       	brne	.+110    	; 0x62a <main+0xd2>
	{
		while ( (spindle_enable_switch_port.IN & spindle_enable_switch_mask) >= 1 
     5bc:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
		|| (spindle_direction_switch_port.IN & spindle_direction_switch_mask) >= 1
		|| (feed_enable_switch_port.IN & feed_enable_switch_mask) >= 1
		|| (feed_direction_switch_port.IN & feed_direction_switch_mask) >= 1 )
     5c0:	86 fd       	sbrc	r24, 6
     5c2:	0e c0       	rjmp	.+28     	; 0x5e0 <main+0x88>
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
	{
		while ( (spindle_enable_switch_port.IN & spindle_enable_switch_mask) >= 1 
		|| (spindle_direction_switch_port.IN & spindle_direction_switch_mask) >= 1
     5c4:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     5c8:	88 23       	and	r24, r24
     5ca:	64 f0       	brlt	.+24     	; 0x5e4 <main+0x8c>
		|| (feed_enable_switch_port.IN & feed_enable_switch_mask) >= 1
     5cc:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x700428>
     5d0:	82 fd       	sbrc	r24, 2
     5d2:	0a c0       	rjmp	.+20     	; 0x5e8 <main+0x90>
		|| (feed_direction_switch_port.IN & feed_direction_switch_mask) >= 1 )
     5d4:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     5d8:	84 ff       	sbrs	r24, 4
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <main+0x94>
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	07 c0       	rjmp	.+14     	; 0x5ee <main+0x96>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <main+0x96>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <main+0x96>
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <main+0x96>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
	{
		while ( (spindle_enable_switch_port.IN & spindle_enable_switch_mask) >= 1 
     5ee:	81 11       	cpse	r24, r1
     5f0:	e5 cf       	rjmp	.-54     	; 0x5bc <main+0x64>
		
		{
				
		}
		
		interlock = 0;
     5f2:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <interlock>
		
		//position lock the spindle
		spindle_enable_port.OUTSET = spindle_enable_mask;
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x700445>
		
		for (uint8_t i = 0; i <= 6; i++)
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	87 30       	cpi	r24, 0x07	; 7
     600:	70 f4       	brcc	.+28     	; 0x61e <main+0xc6>
		{
			step_spindle_port.OUTTGL = step_spindle_mask;
     602:	98 e0       	ldi	r25, 0x08	; 8
     604:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <__TEXT_REGION_LENGTH__+0x700447>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     608:	2f ef       	ldi	r18, 0xFF	; 255
     60a:	30 e7       	ldi	r19, 0x70	; 112
     60c:	42 e0       	ldi	r20, 0x02	; 2
     60e:	21 50       	subi	r18, 0x01	; 1
     610:	30 40       	sbci	r19, 0x00	; 0
     612:	40 40       	sbci	r20, 0x00	; 0
     614:	e1 f7       	brne	.-8      	; 0x60e <main+0xb6>
     616:	00 c0       	rjmp	.+0      	; 0x618 <main+0xc0>
     618:	00 00       	nop
		interlock = 0;
		
		//position lock the spindle
		spindle_enable_port.OUTSET = spindle_enable_mask;
		
		for (uint8_t i = 0; i <= 6; i++)
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	f0 cf       	rjmp	.-32     	; 0x5fe <main+0xa6>
		{
			step_spindle_port.OUTTGL = step_spindle_mask;
			_delay_ms(50);
		}
		
		step_spindle_port.OUTCLR = step_spindle_mask;
     61e:	e0 e4       	ldi	r30, 0x40	; 64
     620:	f4 e0       	ldi	r31, 0x04	; 4
     622:	88 e0       	ldi	r24, 0x08	; 8
     624:	86 83       	std	Z+6, r24	; 0x06
		spindle_enable_port.OUTCLR = spindle_enable_mask;
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	86 83       	std	Z+6, r24	; 0x06
	}
	
	
	//can start timers after all safe
	init_timers();
     62a:	ed de       	rcall	.-550    	; 0x406 <_Z11init_timersv>
	
	//enable interrupts
	sei();
     62c:	78 94       	sei
		
		//////////////////////////////////////////////////////////////////////////
		//main loop
		
		//while waiting for startup
		while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     62e:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     632:	81 11       	cpse	r24, r1
     634:	0a c0       	rjmp	.+20     	; 0x64a <main+0xf2>
     636:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     63a:	81 11       	cpse	r24, r1
     63c:	08 c0       	rjmp	.+16     	; 0x64e <main+0xf6>
     63e:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     642:	88 23       	and	r24, r24
     644:	31 f0       	breq	.+12     	; 0x652 <main+0xfa>
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	05 c0       	rjmp	.+10     	; 0x654 <main+0xfc>
     64a:	00 e0       	ldi	r16, 0x00	; 0
     64c:	03 c0       	rjmp	.+6      	; 0x654 <main+0xfc>
     64e:	00 e0       	ldi	r16, 0x00	; 0
     650:	01 c0       	rjmp	.+2      	; 0x654 <main+0xfc>
     652:	01 e0       	ldi	r16, 0x01	; 1
     654:	00 23       	and	r16, r16
     656:	09 f4       	brne	.+2      	; 0x65a <main+0x102>
     658:	44 c1       	rjmp	.+648    	; 0x8e2 <main+0x38a>
		{
			//disable timers
			TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;
     65a:	e0 e0       	ldi	r30, 0x00	; 0
     65c:	fa e0       	ldi	r31, 0x0A	; 10
     65e:	80 81       	ld	r24, Z
     660:	8e 7f       	andi	r24, 0xFE	; 254
     662:	80 83       	st	Z, r24
			TCB0.CTRLA &= ~TCB_ENABLE_bm;
     664:	80 e4       	ldi	r24, 0x40	; 64
     666:	9a e0       	ldi	r25, 0x0A	; 10
     668:	dc 01       	movw	r26, r24
     66a:	2c 91       	ld	r18, X
     66c:	2e 7f       	andi	r18, 0xFE	; 254
     66e:	2c 93       	st	X, r18
			
			//scale main clock - default
			spindle_clock_divider = 5; //div_64
     670:	25 e0       	ldi	r18, 0x05	; 5
     672:	20 93 19 3e 	sts	0x3E19, r18	; 0x803e19 <spindle_clock_divider>
			TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     676:	a0 91 19 3e 	lds	r26, 0x3E19	; 0x803e19 <spindle_clock_divider>
     67a:	30 81       	ld	r19, Z
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	a4 5c       	subi	r26, 0xC4	; 196
     680:	bb 46       	sbci	r27, 0x6B	; 107
     682:	2c 91       	ld	r18, X
     684:	23 2b       	or	r18, r19
     686:	20 83       	st	Z, r18
			TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm; //enable timer interrupt
     688:	20 e1       	ldi	r18, 0x10	; 16
     68a:	21 83       	std	Z+1, r18	; 0x01
			//setup safe - lowest frequency
			TCA0.SPLIT.HPER = 255;
     68c:	2f ef       	ldi	r18, 0xFF	; 255
     68e:	27 a3       	std	Z+39, r18	; 0x27
			TCA0.SPLIT.HCMP0 = 128;
     690:	30 e8       	ldi	r19, 0x80	; 128
     692:	31 a7       	std	Z+41, r19	; 0x29
			
			//set feed rate
			TCB0.CCMP = feed_default_rate; //set pulse length
     694:	40 e2       	ldi	r20, 0x20	; 32
     696:	53 e0       	ldi	r21, 0x03	; 3
     698:	fc 01       	movw	r30, r24
     69a:	44 87       	std	Z+12, r20	; 0x0c
     69c:	55 87       	std	Z+13, r21	; 0x0d
			
			//set the ramp counters to max
			spindle_ramp_counter = -1;
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	9f ef       	ldi	r25, 0xFF	; 255
     6a2:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_ramp_counter>
     6a6:	90 93 1e 3e 	sts	0x3E1E, r25	; 0x803e1e <spindle_ramp_counter+0x1>
			feed_ramp_counter = -1;
     6aa:	20 93 1c 3e 	sts	0x3E1C, r18	; 0x803e1c <feed_ramp_counter>
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     6ae:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     6b2:	81 11       	cpse	r24, r1
     6b4:	0a c0       	rjmp	.+20     	; 0x6ca <main+0x172>
     6b6:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     6ba:	81 11       	cpse	r24, r1
     6bc:	08 c0       	rjmp	.+16     	; 0x6ce <main+0x176>
     6be:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     6c2:	88 23       	and	r24, r24
     6c4:	31 f0       	breq	.+12     	; 0x6d2 <main+0x17a>
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <main+0x17c>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <main+0x17c>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <main+0x17c>
     6d2:	80 2f       	mov	r24, r16
     6d4:	88 23       	and	r24, r24
     6d6:	09 f4       	brne	.+2      	; 0x6da <main+0x182>
     6d8:	aa cf       	rjmp	.-172    	; 0x62e <main+0xd6>
			{
				feed_rate = bcd_input.bcd_to_int(); //read BCD counter
     6da:	84 e0       	ldi	r24, 0x04	; 4
     6dc:	9e e3       	ldi	r25, 0x3E	; 62
     6de:	18 dd       	rcall	.-1488   	; 0x110 <_ZN11bcd_encoder10bcd_to_intEv>
     6e0:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <feed_rate>
     6e4:	90 93 1b 3e 	sts	0x3E1B, r25	; 0x803e1b <feed_rate+0x1>
				analogue_value = (255 - get_adc(3)); //read potentiometer
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	ac de       	rcall	.-680    	; 0x444 <_Z7get_adch>
     6ec:	80 95       	com	r24
     6ee:	80 93 24 3e 	sts	0x3E24, r24	; 0x803e24 <analogue_value>
				
				//set analogue value based on divider
				analogue_value = (analogue_value / adc_block_size) + 1;
     6f2:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     6f6:	9b ea       	ldi	r25, 0xAB	; 171
     6f8:	89 9f       	mul	r24, r25
     6fa:	81 2d       	mov	r24, r1
     6fc:	11 24       	eor	r1, r1
     6fe:	86 95       	lsr	r24
     700:	86 95       	lsr	r24
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	80 93 24 3e 	sts	0x3E24, r24	; 0x803e24 <analogue_value>
				
				//calculate ideal RPM from analogue value
				if ((uint16_t)analogue_value < (((uint16_t)max_rpm - 100) / 100))
     708:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     70c:	8b 30       	cpi	r24, 0x0B	; 11
     70e:	98 f4       	brcc	.+38     	; 0x736 <main+0x1de>
				{
					spindle_speed = (uint16_t)((uint16_t)max_rpm - ((uint16_t)analogue_value * 100));
     710:	20 91 24 3e 	lds	r18, 0x3E24	; 0x803e24 <analogue_value>
     714:	80 eb       	ldi	r24, 0xB0	; 176
     716:	94 e0       	ldi	r25, 0x04	; 4
     718:	f4 e6       	ldi	r31, 0x64	; 100
     71a:	2f 9f       	mul	r18, r31
     71c:	80 19       	sub	r24, r0
     71e:	91 09       	sbc	r25, r1
     720:	11 24       	eor	r1, r1
     722:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <spindle_speed>
     726:	90 93 20 3e 	sts	0x3E20, r25	; 0x803e20 <spindle_speed+0x1>
			
			//set the ramp counters to max
			spindle_ramp_counter = -1;
			feed_ramp_counter = -1;
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	ee 24       	eor	r14, r14
     72e:	ea 94       	dec	r14
     730:	fe 2c       	mov	r15, r14
     732:	d1 2c       	mov	r13, r1
     734:	12 c0       	rjmp	.+36     	; 0x75a <main+0x202>
				{
					spindle_speed = (uint16_t)((uint16_t)max_rpm - ((uint16_t)analogue_value * 100));
				} 
				else
				{
					spindle_speed =  (uint16_t)(100 - ((uint16_t)analogue_value - ((((uint16_t)max_rpm - 100) / 100) + 1)) * sub_100_steps);
     736:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	9c 01       	movw	r18, r24
     73e:	22 0f       	add	r18, r18
     740:	33 1f       	adc	r19, r19
     742:	82 0f       	add	r24, r18
     744:	93 1f       	adc	r25, r19
     746:	28 e8       	ldi	r18, 0x88	; 136
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	a9 01       	movw	r20, r18
     74c:	48 1b       	sub	r20, r24
     74e:	59 0b       	sbc	r21, r25
     750:	40 93 1f 3e 	sts	0x3E1F, r20	; 0x803e1f <spindle_speed>
     754:	50 93 20 3e 	sts	0x3E20, r21	; 0x803e20 <spindle_speed+0x1>
     758:	e8 cf       	rjmp	.-48     	; 0x72a <main+0x1d2>
				//calculate closest value clock settings to achieve requested / ideal rpm
				uint8_t temp_integer = 0;
				uint16_t temp_value = -1; //max value
						
				//calculate for each clock divider and keep the one that's closest to the desired rpm
				for (uint8_t n = 0; n < bins; n++)
     75a:	18 30       	cpi	r17, 0x08	; 8
     75c:	08 f0       	brcs	.+2      	; 0x760 <main+0x208>
     75e:	5b c0       	rjmp	.+182    	; 0x816 <main+0x2be>
				{
					//for each clock divider calculate the integer that gives rpm closest to requested
					uint8_t temp_div_integer = (uint8_t)((float)cpu_speed / ((float)spindle_clock_divider_array[n] * (float)spindle_speed * (float)spindle_steps));
     760:	e1 2f       	mov	r30, r17
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	ec 5b       	subi	r30, 0xBC	; 188
     76a:	fb 46       	sbci	r31, 0x6B	; 107
     76c:	60 81       	ld	r22, Z
     76e:	71 81       	ldd	r23, Z+1	; 0x01
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	23 d5       	rcall	.+2630   	; 0x11bc <__floatunsisf>
     776:	4b 01       	movw	r8, r22
     778:	5c 01       	movw	r10, r24
     77a:	60 91 1f 3e 	lds	r22, 0x3E1F	; 0x803e1f <spindle_speed>
     77e:	70 91 20 3e 	lds	r23, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	1a d5       	rcall	.+2612   	; 0x11bc <__floatunsisf>
     788:	a5 01       	movw	r20, r10
     78a:	94 01       	movw	r18, r8
     78c:	aa d5       	rcall	.+2900   	; 0x12e2 <__mulsf3>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	48 ec       	ldi	r20, 0xC8	; 200
     794:	54 e4       	ldi	r21, 0x44	; 68
     796:	a5 d5       	rcall	.+2890   	; 0x12e2 <__mulsf3>
     798:	9b 01       	movw	r18, r22
     79a:	ac 01       	movw	r20, r24
     79c:	60 e2       	ldi	r22, 0x20	; 32
     79e:	7c eb       	ldi	r23, 0xBC	; 188
     7a0:	8e e3       	ldi	r24, 0x3E	; 62
     7a2:	9d e4       	ldi	r25, 0x4D	; 77
     7a4:	63 d4       	rcall	.+2246   	; 0x106c <__divsf3>
     7a6:	db d4       	rcall	.+2486   	; 0x115e <__fixunssfsi>
     7a8:	c6 2e       	mov	r12, r22
					//calculate the rpm values to allow calculation of the closest value
					int16_t temp_div_rpm = (int16_t)(((float)cpu_speed / ((float)spindle_clock_divider_array[n]*float(temp_div_integer)*(float)spindle_steps)));
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	05 d5       	rcall	.+2570   	; 0x11bc <__floatunsisf>
     7b2:	a5 01       	movw	r20, r10
     7b4:	94 01       	movw	r18, r8
     7b6:	95 d5       	rcall	.+2858   	; 0x12e2 <__mulsf3>
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	48 ec       	ldi	r20, 0xC8	; 200
     7be:	54 e4       	ldi	r21, 0x44	; 68
     7c0:	90 d5       	rcall	.+2848   	; 0x12e2 <__mulsf3>
     7c2:	9b 01       	movw	r18, r22
     7c4:	ac 01       	movw	r20, r24
     7c6:	60 e2       	ldi	r22, 0x20	; 32
     7c8:	7c eb       	ldi	r23, 0xBC	; 188
     7ca:	8e e3       	ldi	r24, 0x3E	; 62
     7cc:	9d e4       	ldi	r25, 0x4D	; 77
     7ce:	4e d4       	rcall	.+2204   	; 0x106c <__divsf3>
     7d0:	bf d4       	rcall	.+2430   	; 0x1150 <__fixsfsi>
					//compare values to current best value
					if ((uint16_t)abs((int16_t)spindle_speed - temp_div_rpm) < temp_value)
     7d2:	20 91 1f 3e 	lds	r18, 0x3E1F	; 0x803e1f <spindle_speed>
     7d6:	30 91 20 3e 	lds	r19, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     7da:	a9 01       	movw	r20, r18
     7dc:	46 1b       	sub	r20, r22
     7de:	57 0b       	sbc	r21, r23
     7e0:	9a 01       	movw	r18, r20
     7e2:	22 f4       	brpl	.+8      	; 0x7ec <main+0x294>
     7e4:	22 27       	eor	r18, r18
     7e6:	33 27       	eor	r19, r19
     7e8:	24 1b       	sub	r18, r20
     7ea:	35 0b       	sbc	r19, r21
     7ec:	2e 15       	cp	r18, r14
     7ee:	3f 05       	cpc	r19, r15
     7f0:	80 f4       	brcc	.+32     	; 0x812 <main+0x2ba>
					{
						temp_value = abs(spindle_speed - temp_div_rpm);
     7f2:	20 91 1f 3e 	lds	r18, 0x3E1F	; 0x803e1f <spindle_speed>
     7f6:	30 91 20 3e 	lds	r19, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     7fa:	c9 01       	movw	r24, r18
     7fc:	86 1b       	sub	r24, r22
     7fe:	97 0b       	sbc	r25, r23
     800:	7c 01       	movw	r14, r24
     802:	22 f4       	brpl	.+8      	; 0x80c <main+0x2b4>
     804:	ee 24       	eor	r14, r14
     806:	ff 24       	eor	r15, r15
     808:	e8 1a       	sub	r14, r24
     80a:	f9 0a       	sbc	r15, r25
						temp_integer = temp_div_integer;
						spindle_clock_divider = n;
     80c:	10 93 19 3e 	sts	0x3E19, r17	; 0x803e19 <spindle_clock_divider>
					int16_t temp_div_rpm = (int16_t)(((float)cpu_speed / ((float)spindle_clock_divider_array[n]*float(temp_div_integer)*(float)spindle_steps)));
					//compare values to current best value
					if ((uint16_t)abs((int16_t)spindle_speed - temp_div_rpm) < temp_value)
					{
						temp_value = abs(spindle_speed - temp_div_rpm);
						temp_integer = temp_div_integer;
     810:	dc 2c       	mov	r13, r12
				//calculate closest value clock settings to achieve requested / ideal rpm
				uint8_t temp_integer = 0;
				uint16_t temp_value = -1; //max value
						
				//calculate for each clock divider and keep the one that's closest to the desired rpm
				for (uint8_t n = 0; n < bins; n++)
     812:	1f 5f       	subi	r17, 0xFF	; 255
     814:	a2 cf       	rjmp	.-188    	; 0x75a <main+0x202>
						spindle_clock_divider = n;
					}
				}
				
				//update analogue value to nearest value for the selected clock divider
				analogue_value = temp_integer;
     816:	d0 92 24 3e 	sts	0x3E24, r13	; 0x803e24 <analogue_value>
				
				//update the clock divider.
				cli();
     81a:	f8 94       	cli
				TCA0.SPLIT.CTRLA = 0;
     81c:	a0 e0       	ldi	r26, 0x00	; 0
     81e:	ba e0       	ldi	r27, 0x0A	; 10
     820:	1c 92       	st	X, r1
				TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     822:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     826:	9c 91       	ld	r25, X
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	e4 5c       	subi	r30, 0xC4	; 196
     82c:	fb 46       	sbci	r31, 0x6B	; 107
     82e:	80 81       	ld	r24, Z
     830:	89 2b       	or	r24, r25
     832:	8c 93       	st	X, r24
				sei();
     834:	78 94       	sei
				
				//calculate the number of loops to get the required ramp duration
				float total_cycles = 0;
				
				for (uint8_t i = 255; i >= analogue_value; i--)
     836:	1f ef       	ldi	r17, 0xFF	; 255
				TCA0.SPLIT.CTRLA = 0;
				TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
				sei();
				
				//calculate the number of loops to get the required ramp duration
				float total_cycles = 0;
     838:	c1 2c       	mov	r12, r1
     83a:	d1 2c       	mov	r13, r1
     83c:	76 01       	movw	r14, r12
				
				for (uint8_t i = 255; i >= analogue_value; i--)
     83e:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     842:	18 17       	cp	r17, r24
     844:	70 f0       	brcs	.+28     	; 0x862 <main+0x30a>
				{
					total_cycles = total_cycles + i;
     846:	61 2f       	mov	r22, r17
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	b8 d4       	rcall	.+2416   	; 0x11c0 <__floatsisf>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	c7 01       	movw	r24, r14
     856:	b6 01       	movw	r22, r12
     858:	9d d3       	rcall	.+1850   	; 0xf94 <__addsf3>
     85a:	6b 01       	movw	r12, r22
     85c:	7c 01       	movw	r14, r24
				sei();
				
				//calculate the number of loops to get the required ramp duration
				float total_cycles = 0;
				
				for (uint8_t i = 255; i >= analogue_value; i--)
     85e:	11 50       	subi	r17, 0x01	; 1
     860:	ee cf       	rjmp	.-36     	; 0x83e <main+0x2e6>
				}
				
				//calculate the number loops per increment
				float ramp_time = 30;
				
				if (spindle_speed >= 500)
     862:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     866:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     86a:	84 3f       	cpi	r24, 0xF4	; 244
     86c:	91 40       	sbci	r25, 0x01	; 1
     86e:	48 f0       	brcs	.+18     	; 0x882 <main+0x32a>
				{
					ramp_time = ramp_duration_high;
     870:	0f 2e       	mov	r0, r31
     872:	81 2c       	mov	r8, r1
     874:	91 2c       	mov	r9, r1
     876:	f0 ef       	ldi	r31, 0xF0	; 240
     878:	af 2e       	mov	r10, r31
     87a:	f1 e4       	ldi	r31, 0x41	; 65
     87c:	bf 2e       	mov	r11, r31
     87e:	f0 2d       	mov	r31, r0
     880:	05 c0       	rjmp	.+10     	; 0x88c <main+0x334>
				}
				else
				{
					ramp_time = ramp_duration_low;
     882:	81 2c       	mov	r8, r1
     884:	91 2c       	mov	r9, r1
     886:	54 01       	movw	r10, r8
     888:	68 94       	set
     88a:	b6 f8       	bld	r11, 6
				}
				
				ramp_loops = (uint16_t)(ramp_time * ((float)cpu_speed / ((float)spindle_clock_divider_array[spindle_clock_divider] * total_cycles * 10)));
     88c:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	ec 5b       	subi	r30, 0xBC	; 188
     898:	fb 46       	sbci	r31, 0x6B	; 107
     89a:	60 81       	ld	r22, Z
     89c:	71 81       	ldd	r23, Z+1	; 0x01
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	8c d4       	rcall	.+2328   	; 0x11bc <__floatunsisf>
     8a4:	a7 01       	movw	r20, r14
     8a6:	96 01       	movw	r18, r12
     8a8:	1c d5       	rcall	.+2616   	; 0x12e2 <__mulsf3>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e2       	ldi	r20, 0x20	; 32
     8b0:	51 e4       	ldi	r21, 0x41	; 65
     8b2:	17 d5       	rcall	.+2606   	; 0x12e2 <__mulsf3>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	60 e2       	ldi	r22, 0x20	; 32
     8ba:	7c eb       	ldi	r23, 0xBC	; 188
     8bc:	8e e3       	ldi	r24, 0x3E	; 62
     8be:	9d e4       	ldi	r25, 0x4D	; 77
     8c0:	d5 d3       	rcall	.+1962   	; 0x106c <__divsf3>
     8c2:	9b 01       	movw	r18, r22
     8c4:	ac 01       	movw	r20, r24
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	0b d5       	rcall	.+2582   	; 0x12e2 <__mulsf3>
     8cc:	48 d4       	rcall	.+2192   	; 0x115e <__fixunssfsi>
     8ce:	60 93 00 3e 	sts	0x3E00, r22	; 0x803e00 <__data_start>
     8d2:	70 93 01 3e 	sts	0x3E01, r23	; 0x803e01 <__data_start+0x1>
				
				led.send_number(rpm_out()); //sends the rpm
     8d6:	d0 dd       	rcall	.-1120   	; 0x478 <_Z7rpm_outv>
     8d8:	bc 01       	movw	r22, r24
     8da:	85 e0       	ldi	r24, 0x05	; 5
     8dc:	9e e3       	ldi	r25, 0x3E	; 62
     8de:	a3 d2       	rcall	.+1350   	; 0xe26 <_ZN6TM163711send_numberEj>
			
			//set the ramp counters to max
			spindle_ramp_counter = -1;
			feed_ramp_counter = -1;
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     8e0:	e6 ce       	rjmp	.-564    	; 0x6ae <main+0x156>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//spindle only
		while ( (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 0) || (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 1 && spindle_speed <= 20) )
     8e2:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     8e6:	81 11       	cpse	r24, r1
     8e8:	0c c0       	rjmp	.+24     	; 0x902 <main+0x3aa>
     8ea:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	41 f4       	brne	.+16     	; 0x902 <main+0x3aa>
     8f2:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     8f6:	81 11       	cpse	r24, r1
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <main+0x3aa>
     8fa:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <dir_spindle>
     8fe:	88 23       	and	r24, r24
     900:	c1 f0       	breq	.+48     	; 0x932 <main+0x3da>
     902:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     906:	81 11       	cpse	r24, r1
     908:	16 c0       	rjmp	.+44     	; 0x936 <main+0x3de>
     90a:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	a1 f4       	brne	.+40     	; 0x93a <main+0x3e2>
     912:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     916:	81 11       	cpse	r24, r1
     918:	12 c0       	rjmp	.+36     	; 0x93e <main+0x3e6>
     91a:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <dir_spindle>
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	81 f4       	brne	.+32     	; 0x942 <main+0x3ea>
     922:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     926:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     92a:	45 97       	sbiw	r24, 0x15	; 21
     92c:	60 f0       	brcs	.+24     	; 0x946 <main+0x3ee>
     92e:	10 2f       	mov	r17, r16
     930:	0b c0       	rjmp	.+22     	; 0x948 <main+0x3f0>
     932:	11 e0       	ldi	r17, 0x01	; 1
     934:	09 c0       	rjmp	.+18     	; 0x948 <main+0x3f0>
     936:	10 2f       	mov	r17, r16
     938:	07 c0       	rjmp	.+14     	; 0x948 <main+0x3f0>
     93a:	10 2f       	mov	r17, r16
     93c:	05 c0       	rjmp	.+10     	; 0x948 <main+0x3f0>
     93e:	10 2f       	mov	r17, r16
     940:	03 c0       	rjmp	.+6      	; 0x948 <main+0x3f0>
     942:	10 2f       	mov	r17, r16
     944:	01 c0       	rjmp	.+2      	; 0x948 <main+0x3f0>
     946:	11 e0       	ldi	r17, 0x01	; 1
     948:	11 23       	and	r17, r17
     94a:	c9 f1       	breq	.+114    	; 0x9be <main+0x466>
		{
			uint8_t old_dir_spindle = dir_spindle;
     94c:	f0 90 22 3e 	lds	r15, 0x3E22	; 0x803e22 <dir_spindle>
			
			//check for previous running
			if (spindle_ramp_counter != 0)
     950:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     954:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     958:	89 2b       	or	r24, r25
     95a:	79 f0       	breq	.+30     	; 0x97a <main+0x422>
			{				
				//enable timers
				TCA0.SPLIT.CTRLA |= TCB_ENABLE_bm;
     95c:	e0 e0       	ldi	r30, 0x00	; 0
     95e:	fa e0       	ldi	r31, 0x0A	; 10
     960:	80 81       	ld	r24, Z
     962:	81 60       	ori	r24, 0x01	; 1
     964:	80 83       	st	Z, r24
				
				//enable spindle motor
				spindle_enable_port.OUTSET = spindle_enable_mask;
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x700445>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     96c:	8f e8       	ldi	r24, 0x8F	; 143
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <main+0x418>
     974:	00 c0       	rjmp	.+0      	; 0x976 <main+0x41e>
     976:	00 00       	nop
				_delay_us(min_spindle_driver_pulse_delay); //delay to allow init of driver
				
				//ramp up
				ramp_spindle_up();	
     978:	b2 dd       	rcall	.-1180   	; 0x4de <_Z15ramp_spindle_upv>
			}
					
			while (interlock == 0 && run_spindle == 1 && run_feed == 0)
     97a:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     97e:	81 11       	cpse	r24, r1
     980:	0a c0       	rjmp	.+20     	; 0x996 <main+0x43e>
     982:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	41 f4       	brne	.+16     	; 0x99a <main+0x442>
     98a:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     98e:	88 23       	and	r24, r24
     990:	31 f0       	breq	.+12     	; 0x99e <main+0x446>
     992:	80 2f       	mov	r24, r16
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <main+0x448>
     996:	80 2f       	mov	r24, r16
     998:	03 c0       	rjmp	.+6      	; 0x9a0 <main+0x448>
     99a:	80 2f       	mov	r24, r16
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <main+0x448>
     99e:	81 2f       	mov	r24, r17
     9a0:	81 11       	cpse	r24, r1
     9a2:	eb cf       	rjmp	.-42     	; 0x97a <main+0x422>
			{
				//hold here until interrupt
			}
			
			//if spindle off after interrupt, then ramp down the spindle
			if (run_spindle == 0 && old_dir_spindle == 0)
     9a4:	90 91 23 3e 	lds	r25, 0x3E23	; 0x803e23 <run_spindle>
     9a8:	91 11       	cpse	r25, r1
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <main+0x45a>
     9ac:	f1 10       	cpse	r15, r1
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <main+0x45a>
     9b0:	81 2f       	mov	r24, r17
     9b2:	81 11       	cpse	r24, r1
			{
				//ramp speed down
				ramp_spindle_down();
     9b4:	b3 dd       	rcall	.-1178   	; 0x51c <_Z17ramp_spindle_downv>
				
			}
			
			//disable spindle
			spindle_enable_port.OUTCLR = spindle_enable_mask;
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//spindle only
		while ( (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 0) || (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 1 && spindle_speed <= 20) )
     9bc:	92 cf       	rjmp	.-220    	; 0x8e2 <main+0x38a>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//feed only
		while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     9be:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     9c2:	81 11       	cpse	r24, r1
     9c4:	0a c0       	rjmp	.+20     	; 0x9da <main+0x482>
     9c6:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     9ca:	81 11       	cpse	r24, r1
     9cc:	08 c0       	rjmp	.+16     	; 0x9de <main+0x486>
     9ce:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <main+0x48a>
     9d6:	01 2f       	mov	r16, r17
     9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <main+0x48c>
     9da:	01 2f       	mov	r16, r17
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <main+0x48c>
     9de:	01 2f       	mov	r16, r17
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <main+0x48c>
     9e2:	01 e0       	ldi	r16, 0x01	; 1
     9e4:	00 23       	and	r16, r16
     9e6:	39 f1       	breq	.+78     	; 0xa36 <main+0x4de>
		{
			//enable timers
			TCB0.CTRLA |= TCB_ENABLE_bm;
     9e8:	e0 e4       	ldi	r30, 0x40	; 64
     9ea:	fa e0       	ldi	r31, 0x0A	; 10
     9ec:	80 81       	ld	r24, Z
     9ee:	81 60       	ori	r24, 0x01	; 1
     9f0:	80 83       	st	Z, r24
			
			//enable feed motor
			feed_enable_port.OUTSET = feed_enable_mask;
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x700445>
     9f8:	af e8       	ldi	r26, 0x8F	; 143
     9fa:	b1 e0       	ldi	r27, 0x01	; 1
     9fc:	11 97       	sbiw	r26, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <main+0x4a4>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <main+0x4aa>
     a02:	00 00       	nop
			_delay_us(min_spindle_driver_pulse_delay); //delay for allow driver startup
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     a04:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     a08:	81 11       	cpse	r24, r1
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <main+0x4c8>
     a0c:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     a10:	81 11       	cpse	r24, r1
     a12:	08 c0       	rjmp	.+16     	; 0xa24 <main+0x4cc>
     a14:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	31 f0       	breq	.+12     	; 0xa28 <main+0x4d0>
     a1c:	81 2f       	mov	r24, r17
     a1e:	05 c0       	rjmp	.+10     	; 0xa2a <main+0x4d2>
     a20:	81 2f       	mov	r24, r17
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <main+0x4d2>
     a24:	81 2f       	mov	r24, r17
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <main+0x4d2>
     a28:	80 2f       	mov	r24, r16
     a2a:	81 11       	cpse	r24, r1
     a2c:	eb cf       	rjmp	.-42     	; 0xa04 <main+0x4ac>
			{
				//hold here until interrupt
			}
			
			//disable feed motor
			feed_enable_port.OUTCLR = feed_enable_mask;
     a2e:	84 e0       	ldi	r24, 0x04	; 4
     a30:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//feed only
		while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     a34:	c4 cf       	rjmp	.-120    	; 0x9be <main+0x466>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//standard spindle with feed - feed rate number is arbitrary value
		//spindle must be started / running before entering this mode
		while (interlock == 0 && run_spindle == 1 && spindle_ramp_counter == 0 && run_feed == 1 && spindle_speed > 20)
     a36:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     a3a:	81 11       	cpse	r24, r1
     a3c:	16 c0       	rjmp	.+44     	; 0xa6a <main+0x512>
     a3e:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	a1 f4       	brne	.+40     	; 0xa6e <main+0x516>
     a46:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     a4a:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     a4e:	89 2b       	or	r24, r25
     a50:	81 f4       	brne	.+32     	; 0xa72 <main+0x51a>
     a52:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     a56:	81 30       	cpi	r24, 0x01	; 1
     a58:	71 f4       	brne	.+28     	; 0xa76 <main+0x51e>
     a5a:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     a5e:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     a62:	45 97       	sbiw	r24, 0x15	; 21
     a64:	50 f4       	brcc	.+20     	; 0xa7a <main+0x522>
     a66:	10 2f       	mov	r17, r16
     a68:	09 c0       	rjmp	.+18     	; 0xa7c <main+0x524>
     a6a:	10 2f       	mov	r17, r16
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <main+0x524>
     a6e:	10 2f       	mov	r17, r16
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <main+0x524>
     a72:	10 2f       	mov	r17, r16
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <main+0x524>
     a76:	10 2f       	mov	r17, r16
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <main+0x524>
     a7a:	11 e0       	ldi	r17, 0x01	; 1
     a7c:	11 23       	and	r17, r17
     a7e:	09 f4       	brne	.+2      	; 0xa82 <main+0x52a>
     a80:	48 c0       	rjmp	.+144    	; 0xb12 <main+0x5ba>
		{
			//enable feed timer
			TCB0.CTRLA |= TCB_ENABLE_bm; //enable clock	
     a82:	e0 e4       	ldi	r30, 0x40	; 64
     a84:	fa e0       	ldi	r31, 0x0A	; 10
     a86:	80 81       	ld	r24, Z
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	80 83       	st	Z, r24
			
			//enable feed motor
			feed_enable_port.OUTSET = feed_enable_mask;
     a8c:	84 e0       	ldi	r24, 0x04	; 4
     a8e:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__TEXT_REGION_LENGTH__+0x700445>
     a92:	ef e8       	ldi	r30, 0x8F	; 143
     a94:	f1 e0       	ldi	r31, 0x01	; 1
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <main+0x53e>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <main+0x544>
     a9c:	00 00       	nop
			_delay_us(min_spindle_driver_pulse_delay); //delay for allow driver startup
	
			
			while (interlock == 0 && run_spindle == 1 && spindle_ramp_counter == 0 && run_feed == 1 && spindle_speed > 20)
     a9e:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     aa2:	81 11       	cpse	r24, r1
     aa4:	16 c0       	rjmp	.+44     	; 0xad2 <main+0x57a>
     aa6:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	a1 f4       	brne	.+40     	; 0xad6 <main+0x57e>
     aae:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     ab2:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     ab6:	89 2b       	or	r24, r25
     ab8:	81 f4       	brne	.+32     	; 0xada <main+0x582>
     aba:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	71 f4       	brne	.+28     	; 0xade <main+0x586>
     ac2:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     ac6:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     aca:	45 97       	sbiw	r24, 0x15	; 21
     acc:	50 f4       	brcc	.+20     	; 0xae2 <main+0x58a>
     ace:	80 2f       	mov	r24, r16
     ad0:	09 c0       	rjmp	.+18     	; 0xae4 <main+0x58c>
     ad2:	80 2f       	mov	r24, r16
     ad4:	07 c0       	rjmp	.+14     	; 0xae4 <main+0x58c>
     ad6:	80 2f       	mov	r24, r16
     ad8:	05 c0       	rjmp	.+10     	; 0xae4 <main+0x58c>
     ada:	80 2f       	mov	r24, r16
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <main+0x58c>
     ade:	80 2f       	mov	r24, r16
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <main+0x58c>
     ae2:	81 2f       	mov	r24, r17
     ae4:	81 11       	cpse	r24, r1
     ae6:	db cf       	rjmp	.-74     	; 0xa9e <main+0x546>
			{
				//hold here until interrupt
			}
			
			//disable feed motor
			feed_enable_port.OUTCLR = feed_enable_mask;
     ae8:	84 e0       	ldi	r24, 0x04	; 4
     aea:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
			
			//if spindle off after interrupt, then ramp down the spindle
			if (run_spindle == 0)
     aee:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     af2:	81 11       	cpse	r24, r1
     af4:	a0 cf       	rjmp	.-192    	; 0xa36 <main+0x4de>
			{
				ramp_spindle_down();
     af6:	12 dd       	rcall	.-1500   	; 0x51c <_Z17ramp_spindle_downv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     af8:	ff ef       	ldi	r31, 0xFF	; 255
     afa:	21 ee       	ldi	r18, 0xE1	; 225
     afc:	34 e0       	ldi	r19, 0x04	; 4
     afe:	f1 50       	subi	r31, 0x01	; 1
     b00:	20 40       	sbci	r18, 0x00	; 0
     b02:	30 40       	sbci	r19, 0x00	; 0
     b04:	e1 f7       	brne	.-8      	; 0xafe <main+0x5a6>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <main+0x5b0>
     b08:	00 00       	nop
				
				_delay_ms(100); //delay to allow init of driver
				
				//disable spindle
				spindle_enable_port.OUTCLR = spindle_enable_mask;
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     b10:	92 cf       	rjmp	.-220    	; 0xa36 <main+0x4de>
			}
		}
		
		//////////////////////////////////////////////////////////////////////////
		//interlocked spindle with feed / slow spindle
		while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     b12:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     b16:	81 11       	cpse	r24, r1
     b18:	10 c0       	rjmp	.+32     	; 0xb3a <main+0x5e2>
     b1a:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	71 f4       	brne	.+28     	; 0xb3e <main+0x5e6>
     b22:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	61 f4       	brne	.+24     	; 0xb42 <main+0x5ea>
     b2a:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     b2e:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     b32:	45 97       	sbiw	r24, 0x15	; 21
     b34:	40 f0       	brcs	.+16     	; 0xb46 <main+0x5ee>
     b36:	01 2f       	mov	r16, r17
     b38:	07 c0       	rjmp	.+14     	; 0xb48 <main+0x5f0>
     b3a:	01 2f       	mov	r16, r17
     b3c:	05 c0       	rjmp	.+10     	; 0xb48 <main+0x5f0>
     b3e:	01 2f       	mov	r16, r17
     b40:	03 c0       	rjmp	.+6      	; 0xb48 <main+0x5f0>
     b42:	01 2f       	mov	r16, r17
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <main+0x5f0>
     b46:	01 e0       	ldi	r16, 0x01	; 1
     b48:	00 23       	and	r16, r16
     b4a:	09 f4       	brne	.+2      	; 0xb4e <main+0x5f6>
     b4c:	70 cd       	rjmp	.-1312   	; 0x62e <main+0xd6>
		{
			//disable timers
			TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;
     b4e:	e0 e0       	ldi	r30, 0x00	; 0
     b50:	fa e0       	ldi	r31, 0x0A	; 10
     b52:	80 81       	ld	r24, Z
     b54:	8e 7f       	andi	r24, 0xFE	; 254
     b56:	80 83       	st	Z, r24
			TCB0.CTRLA &= ~TCB_ENABLE_bm;	
     b58:	a0 e4       	ldi	r26, 0x40	; 64
     b5a:	ba e0       	ldi	r27, 0x0A	; 10
     b5c:	8c 91       	ld	r24, X
     b5e:	8e 7f       	andi	r24, 0xFE	; 254
     b60:	8c 93       	st	X, r24
			TCA0.SPLIT.CTRLB = 0; //disable timer interrupt		
     b62:	11 82       	std	Z+1, r1	; 0x01
			
			//calculate stepping ratio
			//convert feed_rate to the number of steps the spindle makes per step the feed makes
			float spindle_steps_per_feed_step = (float)spindle_steps / ((float)feed_rate / feed_mm_per_step / 1000);
     b64:	60 91 1a 3e 	lds	r22, 0x3E1A	; 0x803e1a <feed_rate>
     b68:	70 91 1b 3e 	lds	r23, 0x3E1B	; 0x803e1b <feed_rate+0x1>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	25 d3       	rcall	.+1610   	; 0x11bc <__floatunsisf>
     b72:	24 ed       	ldi	r18, 0xD4	; 212
     b74:	3f e7       	ldi	r19, 0x7F	; 127
     b76:	46 e5       	ldi	r20, 0x56	; 86
     b78:	59 e3       	ldi	r21, 0x39	; 57
     b7a:	78 d2       	rcall	.+1264   	; 0x106c <__divsf3>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a e7       	ldi	r20, 0x7A	; 122
     b82:	54 e4       	ldi	r21, 0x44	; 68
     b84:	73 d2       	rcall	.+1254   	; 0x106c <__divsf3>
     b86:	9b 01       	movw	r18, r22
     b88:	ac 01       	movw	r20, r24
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	88 ec       	ldi	r24, 0xC8	; 200
     b90:	94 e4       	ldi	r25, 0x44	; 68
     b92:	6c d2       	rcall	.+1240   	; 0x106c <__divsf3>
     b94:	6b 01       	movw	r12, r22
     b96:	7c 01       	movw	r14, r24
			
			volatile float current_decimal = spindle_steps_per_feed_step;
     b98:	69 83       	std	Y+1, r22	; 0x01
     b9a:	7a 83       	std	Y+2, r23	; 0x02
     b9c:	8b 83       	std	Y+3, r24	; 0x03
     b9e:	9c 83       	std	Y+4, r25	; 0x04
			volatile uint16_t current_spindle_steps = (uint16_t)spindle_steps_per_feed_step; 
     ba0:	de d2       	rcall	.+1468   	; 0x115e <__fixunssfsi>
     ba2:	6d 83       	std	Y+5, r22	; 0x05
     ba4:	7e 83       	std	Y+6, r23	; 0x06
			
			//enable spindle & feed motor
			spindle_enable_port.OUTSET = spindle_enable_mask;
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f4 e0       	ldi	r31, 0x04	; 4
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	85 83       	std	Z+5, r24	; 0x05
			feed_enable_port.OUTSET = feed_enable_mask;
     bae:	84 e0       	ldi	r24, 0x04	; 4
     bb0:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb2:	8f e8       	ldi	r24, 0x8F	; 143
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <main+0x65e>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <main+0x664>
     bbc:	00 00       	nop
			_delay_us(min_spindle_driver_pulse_delay); //delay for allow driver startup
			
			while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     bbe:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <interlock>
     bc2:	81 11       	cpse	r24, r1
     bc4:	10 c0       	rjmp	.+32     	; 0xbe6 <main+0x68e>
     bc6:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	71 f4       	brne	.+28     	; 0xbea <main+0x692>
     bce:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	61 f4       	brne	.+24     	; 0xbee <main+0x696>
     bd6:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     bda:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     bde:	45 97       	sbiw	r24, 0x15	; 21
     be0:	40 f0       	brcs	.+16     	; 0xbf2 <main+0x69a>
     be2:	81 2f       	mov	r24, r17
     be4:	07 c0       	rjmp	.+14     	; 0xbf4 <main+0x69c>
     be6:	81 2f       	mov	r24, r17
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <main+0x69c>
     bea:	81 2f       	mov	r24, r17
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <main+0x69c>
     bee:	81 2f       	mov	r24, r17
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <main+0x69c>
     bf2:	80 2f       	mov	r24, r16
     bf4:	88 23       	and	r24, r24
     bf6:	09 f4       	brne	.+2      	; 0xbfa <main+0x6a2>
     bf8:	55 c0       	rjmp	.+170    	; 0xca4 <main+0x74c>
			{
				//hold in here until interrupt
				//evaluate next step
				if ((current_decimal + spindle_steps_per_feed_step) > 1)
     bfa:	29 81       	ldd	r18, Y+1	; 0x01
     bfc:	3a 81       	ldd	r19, Y+2	; 0x02
     bfe:	4b 81       	ldd	r20, Y+3	; 0x03
     c00:	5c 81       	ldd	r21, Y+4	; 0x04
     c02:	c7 01       	movw	r24, r14
     c04:	b6 01       	movw	r22, r12
     c06:	c6 d1       	rcall	.+908    	; 0xf94 <__addsf3>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e8       	ldi	r20, 0x80	; 128
     c0e:	5f e3       	ldi	r21, 0x3F	; 63
     c10:	63 d3       	rcall	.+1734   	; 0x12d8 <__gesf2>
     c12:	18 16       	cp	r1, r24
     c14:	c4 f4       	brge	.+48     	; 0xc46 <main+0x6ee>
				{
					current_decimal = current_decimal + spindle_steps_per_feed_step - current_spindle_steps;
     c16:	29 81       	ldd	r18, Y+1	; 0x01
     c18:	3a 81       	ldd	r19, Y+2	; 0x02
     c1a:	4b 81       	ldd	r20, Y+3	; 0x03
     c1c:	5c 81       	ldd	r21, Y+4	; 0x04
     c1e:	c7 01       	movw	r24, r14
     c20:	b6 01       	movw	r22, r12
     c22:	b8 d1       	rcall	.+880    	; 0xf94 <__addsf3>
     c24:	4b 01       	movw	r8, r22
     c26:	5c 01       	movw	r10, r24
     c28:	6d 81       	ldd	r22, Y+5	; 0x05
     c2a:	7e 81       	ldd	r23, Y+6	; 0x06
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	c5 d2       	rcall	.+1418   	; 0x11bc <__floatunsisf>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	c5 01       	movw	r24, r10
     c38:	b4 01       	movw	r22, r8
     c3a:	ab d1       	rcall	.+854    	; 0xf92 <__subsf3>
     c3c:	69 83       	std	Y+1, r22	; 0x01
     c3e:	7a 83       	std	Y+2, r23	; 0x02
     c40:	8b 83       	std	Y+3, r24	; 0x03
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <main+0x704>
				} 
				else
				{
					current_decimal = current_decimal + spindle_steps_per_feed_step;
     c46:	29 81       	ldd	r18, Y+1	; 0x01
     c48:	3a 81       	ldd	r19, Y+2	; 0x02
     c4a:	4b 81       	ldd	r20, Y+3	; 0x03
     c4c:	5c 81       	ldd	r21, Y+4	; 0x04
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	a0 d1       	rcall	.+832    	; 0xf94 <__addsf3>
     c54:	69 83       	std	Y+1, r22	; 0x01
     c56:	7a 83       	std	Y+2, r23	; 0x02
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	9c 83       	std	Y+4, r25	; 0x04
				}
				
				//extract only the whole digits for spindle steps
				current_spindle_steps = (uint16_t)current_decimal;
     c5c:	69 81       	ldd	r22, Y+1	; 0x01
     c5e:	7a 81       	ldd	r23, Y+2	; 0x02
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	7c d2       	rcall	.+1272   	; 0x115e <__fixunssfsi>
     c66:	6d 83       	std	Y+5, r22	; 0x05
     c68:	7e 83       	std	Y+6, r23	; 0x06
				
				//loop to required number of spindle steps per feed step - this can be zero
				for (uint16_t i = current_spindle_steps; i > 0; i--)
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	79 f0       	breq	.+30     	; 0xc90 <main+0x738>
				{
					step_spindle_port.OUTTGL = step_spindle_mask;  //Toggle step GPIO 
     c72:	28 e0       	ldi	r18, 0x08	; 8
     c74:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <__TEXT_REGION_LENGTH__+0x700447>
     c78:	a7 ec       	ldi	r26, 0xC7	; 199
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <main+0x724>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <main+0x72a>
     c82:	00 00       	nop
					_delay_us(min_spindle_driver_pulse_delay/2); //delay
					
					if (run_spindle == 0)
     c84:	20 91 23 3e 	lds	r18, 0x3E23	; 0x803e23 <run_spindle>
     c88:	22 23       	and	r18, r18
     c8a:	11 f0       	breq	.+4      	; 0xc90 <main+0x738>
				
				//extract only the whole digits for spindle steps
				current_spindle_steps = (uint16_t)current_decimal;
				
				//loop to required number of spindle steps per feed step - this can be zero
				for (uint16_t i = current_spindle_steps; i > 0; i--)
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	ef cf       	rjmp	.-34     	; 0xc6e <main+0x716>
					{
						break;
					}
				}
				
				step_feed_port.OUTTGL = step_feed_mask;  //Toggle step GPIO 
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <__TEXT_REGION_LENGTH__+0x700447>
     c96:	e7 ec       	ldi	r30, 0xC7	; 199
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <main+0x742>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <main+0x748>
     ca0:	00 00       	nop
     ca2:	8d cf       	rjmp	.-230    	; 0xbbe <main+0x666>
				_delay_us(min_spindle_driver_pulse_delay/2); //delay
			}
			
			//disable spindle & feed
			spindle_enable_port.OUTCLR = spindle_enable_mask;
     ca4:	e0 e4       	ldi	r30, 0x40	; 64
     ca6:	f4 e0       	ldi	r31, 0x04	; 4
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	86 83       	std	Z+6, r24	; 0x06
			feed_enable_port.OUTCLR = feed_enable_mask;
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	86 83       	std	Z+6, r24	; 0x06
			}
		}
		
		//////////////////////////////////////////////////////////////////////////
		//interlocked spindle with feed / slow spindle
		while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     cb0:	30 cf       	rjmp	.-416    	; 0xb12 <main+0x5ba>

00000cb2 <_GLOBAL__sub_I_analogue_value>:
		while (spindle_ramp_counter != 0)
		{
			//hold here until interrupt loop finished
		}
	}
}
     cb2:	6f ef       	ldi	r22, 0xFF	; 255
     cb4:	7f ef       	ldi	r23, 0xFF	; 255
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	e0 da       	rcall	.-2624   	; 0x27c <_Z41__static_initialization_and_destruction_0ii>
     cbc:	08 95       	ret

00000cbe <_ZN6TM16375startEv>:
}

void TM1637::start()
{
	//set clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     cbe:	e0 e0       	ldi	r30, 0x00	; 0
     cc0:	f4 e0       	ldi	r31, 0x04	; 4
     cc2:	84 e0       	ldi	r24, 0x04	; 4
     cc4:	85 83       	std	Z+5, r24	; 0x05
	//set data high
	tm1637_data_port.OUTSET = tm1637_data_pin;
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	95 83       	std	Z+5, r25	; 0x05
     cca:	25 e3       	ldi	r18, 0x35	; 53
     ccc:	2a 95       	dec	r18
     cce:	f1 f7       	brne	.-4      	; 0xccc <_ZN6TM16375startEv+0xe>
     cd0:	00 00       	nop
	//wait 5us
	_delay_us(10);
	
	//set data low
	tm1637_data_port.OUTCLR = tm1637_data_pin;
     cd2:	96 83       	std	Z+6, r25	; 0x06
	//sel clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     cd4:	86 83       	std	Z+6, r24	; 0x06
     cd6:	85 e3       	ldi	r24, 0x35	; 53
     cd8:	8a 95       	dec	r24
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <_ZN6TM16375startEv+0x1a>
     cdc:	00 00       	nop
     cde:	08 95       	ret

00000ce0 <_ZN6TM16374stopEv>:


void TM1637::stop()
{
	//clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     ce0:	e0 e0       	ldi	r30, 0x00	; 0
     ce2:	f4 e0       	ldi	r31, 0x04	; 4
     ce4:	94 e0       	ldi	r25, 0x04	; 4
     ce6:	96 83       	std	Z+6, r25	; 0x06
	//data low
	tm1637_data_port.OUTCLR = tm1637_data_pin;
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	86 83       	std	Z+6, r24	; 0x06
     cec:	25 e3       	ldi	r18, 0x35	; 53
     cee:	2a 95       	dec	r18
     cf0:	f1 f7       	brne	.-4      	; 0xcee <_ZN6TM16374stopEv+0xe>
     cf2:	00 00       	nop
	//wait 5us
	_delay_us(10);
	
	//clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     cf4:	95 83       	std	Z+5, r25	; 0x05
	//data high
	tm1637_data_port.OUTSET = tm1637_data_pin;
     cf6:	85 83       	std	Z+5, r24	; 0x05
     cf8:	85 e3       	ldi	r24, 0x35	; 53
     cfa:	8a 95       	dec	r24
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <_ZN6TM16374stopEv+0x1a>
     cfe:	00 00       	nop
     d00:	08 95       	ret

00000d02 <_ZN6TM16378data_outEh>:

uint8_t TM1637::data_out(uint8_t value)
{
	//going to ignore receiving the ACK bit
	
	for (uint8_t i = 0; i < 8; i++)
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	28 30       	cpi	r18, 0x08	; 8
     d06:	78 f5       	brcc	.+94     	; 0xd66 <_ZN6TM16378data_outEh+0x64>
	{
		//clk low
		tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     d0e:	85 e3       	ldi	r24, 0x35	; 53
     d10:	8a 95       	dec	r24
     d12:	f1 f7       	brne	.-4      	; 0xd10 <_ZN6TM16378data_outEh+0xe>
     d14:	00 00       	nop
		_delay_us(10);
		//set data to match bit value
		if ( ((value & (1<<i)) >> i) == 1)
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <_ZN6TM16378data_outEh+0x20>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <_ZN6TM16378data_outEh+0x1c>
     d26:	46 2f       	mov	r20, r22
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	84 23       	and	r24, r20
     d2c:	95 23       	and	r25, r21
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <_ZN6TM16378data_outEh+0x34>
     d32:	95 95       	asr	r25
     d34:	87 95       	ror	r24
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <_ZN6TM16378data_outEh+0x30>
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	21 f4       	brne	.+8      	; 0xd46 <_ZN6TM16378data_outEh+0x44>
		{
			tm1637_data_port.OUTSET = tm1637_data_pin;
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <_ZN6TM16378data_outEh+0x4a>
		} 
		else
		{	
			tm1637_data_port.OUTCLR = tm1637_data_pin;
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     d4c:	95 e3       	ldi	r25, 0x35	; 53
     d4e:	9a 95       	dec	r25
     d50:	f1 f7       	brne	.-4      	; 0xd4e <_ZN6TM16378data_outEh+0x4c>
     d52:	00 00       	nop
		}
		_delay_us(10);
		//clk high
		tm1637_clk_port.OUTSET = tm1637_clk_pin;
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d5a:	e5 e3       	ldi	r30, 0x35	; 53
     d5c:	ea 95       	dec	r30
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <_ZN6TM16378data_outEh+0x5a>
     d60:	00 00       	nop

uint8_t TM1637::data_out(uint8_t value)
{
	//going to ignore receiving the ACK bit
	
	for (uint8_t i = 0; i < 8; i++)
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	cf cf       	rjmp	.-98     	; 0xd04 <_ZN6TM16378data_outEh+0x2>
		tm1637_clk_port.OUTSET = tm1637_clk_pin;
		_delay_us(10);
	}
	
	//clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     d66:	e0 e0       	ldi	r30, 0x00	; 0
     d68:	f4 e0       	ldi	r31, 0x04	; 4
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	86 83       	std	Z+6, r24	; 0x06
     d6e:	95 e3       	ldi	r25, 0x35	; 53
     d70:	9a 95       	dec	r25
     d72:	f1 f7       	brne	.-4      	; 0xd70 <_ZN6TM16378data_outEh+0x6e>
     d74:	00 00       	nop
	_delay_us(10);
	
	//data input
	tm1637_data_port.DIRCLR = tm1637_data_pin;
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	92 83       	std	Z+2, r25	; 0x02
	
	//clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     d7a:	85 83       	std	Z+5, r24	; 0x05
     d7c:	85 e3       	ldi	r24, 0x35	; 53
     d7e:	8a 95       	dec	r24
     d80:	f1 f7       	brne	.-4      	; 0xd7e <_ZN6TM16378data_outEh+0x7c>
     d82:	00 00       	nop
	_delay_us(10);
	
	//wait for ACK
	uint8_t ack = (~tm1637_data_port.IN & tm1637_data_pin) == 0;
     d84:	80 85       	ldd	r24, Z+8	; 0x08
     d86:	86 95       	lsr	r24
     d88:	81 70       	andi	r24, 0x01	; 1
	
	//data output
	tm1637_data_port.DIRSET = tm1637_data_pin;
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	ef e8       	ldi	r30, 0x8F	; 143
     d8e:	f1 e0       	ldi	r31, 0x01	; 1
     d90:	31 97       	sbiw	r30, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <_ZN6TM16378data_outEh+0x8e>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <_ZN6TM16378data_outEh+0x94>
     d96:	00 00       	nop
	
	_delay_us(100);
	
	return ack;
}
     d98:	08 95       	ret

00000d9a <_ZN6TM163717tm1637_brightnessEh>:


void TM1637::tm1637_brightness(uint8_t level)
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	8c 01       	movw	r16, r24
     da2:	c6 2f       	mov	r28, r22
	TM1637::start();
     da4:	8c df       	rcall	.-232    	; 0xcbe <_ZN6TM16375startEv>
	
	TM1637::data_out(0b10001000 | (0b00000111 & level));
     da6:	6c 2f       	mov	r22, r28
     da8:	67 70       	andi	r22, 0x07	; 7
     daa:	68 68       	ori	r22, 0x88	; 136
     dac:	c8 01       	movw	r24, r16
     dae:	a9 df       	rcall	.-174    	; 0xd02 <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     db0:	c8 01       	movw	r24, r16
     db2:	96 df       	rcall	.-212    	; 0xce0 <_ZN6TM16374stopEv>
}
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <_ZN6TM16374initEv>:

void TM1637::init()
{
	//TINY - setup port A (1 = output)
	// 7 6 5 4 3 2 1 0
	tm1637_data_port.DIRSET = tm1637_data_pin;
     dbc:	e0 e0       	ldi	r30, 0x00	; 0
     dbe:	f4 e0       	ldi	r31, 0x04	; 4
     dc0:	22 e0       	ldi	r18, 0x02	; 2
     dc2:	21 83       	std	Z+1, r18	; 0x01
	tm1637_clk_port.DIRSET = tm1637_clk_pin;
     dc4:	34 e0       	ldi	r19, 0x04	; 4
     dc6:	31 83       	std	Z+1, r19	; 0x01
	
	//set pins high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     dc8:	35 83       	std	Z+5, r19	; 0x05
	tm1637_data_port.OUTSET = tm1637_data_pin;
     dca:	25 83       	std	Z+5, r18	; 0x05
	
	TM1637::tm1637_brightness(6);
     dcc:	66 e0       	ldi	r22, 0x06	; 6
     dce:	e5 df       	rcall	.-54     	; 0xd9a <_ZN6TM163717tm1637_brightnessEh>
     dd0:	08 95       	ret

00000dd2 <_ZN6TM163710send_charsEhhhh>:
	TM1637::stop();
}


void TM1637::send_chars(uint8_t a_digit, uint8_t b_digit, uint8_t c_digit, uint8_t d_digit)
{
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	ec 01       	movw	r28, r24
     de0:	e6 2e       	mov	r14, r22
     de2:	f4 2e       	mov	r15, r20
     de4:	12 2f       	mov	r17, r18
	TM1637::start();
     de6:	6b df       	rcall	.-298    	; 0xcbe <_ZN6TM16375startEv>
	
	TM1637::data_out(0b01000000);
     de8:	60 e4       	ldi	r22, 0x40	; 64
     dea:	ce 01       	movw	r24, r28
     dec:	8a df       	rcall	.-236    	; 0xd02 <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     dee:	ce 01       	movw	r24, r28
     df0:	77 df       	rcall	.-274    	; 0xce0 <_ZN6TM16374stopEv>
	
	
	TM1637::start();
     df2:	ce 01       	movw	r24, r28
     df4:	64 df       	rcall	.-312    	; 0xcbe <_ZN6TM16375startEv>
	
	TM1637::data_out(0b11000000);
     df6:	60 ec       	ldi	r22, 0xC0	; 192
     df8:	ce 01       	movw	r24, r28
     dfa:	83 df       	rcall	.-250    	; 0xd02 <_ZN6TM16378data_outEh>
	
	TM1637::data_out(a_digit);
     dfc:	6e 2d       	mov	r22, r14
     dfe:	ce 01       	movw	r24, r28
     e00:	80 df       	rcall	.-256    	; 0xd02 <_ZN6TM16378data_outEh>
	TM1637::data_out(b_digit);
     e02:	6f 2d       	mov	r22, r15
     e04:	ce 01       	movw	r24, r28
     e06:	7d df       	rcall	.-262    	; 0xd02 <_ZN6TM16378data_outEh>
	TM1637::data_out(c_digit);
     e08:	61 2f       	mov	r22, r17
     e0a:	ce 01       	movw	r24, r28
     e0c:	7a df       	rcall	.-268    	; 0xd02 <_ZN6TM16378data_outEh>
	TM1637::data_out(d_digit);
     e0e:	60 2f       	mov	r22, r16
     e10:	ce 01       	movw	r24, r28
     e12:	77 df       	rcall	.-274    	; 0xd02 <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     e14:	ce 01       	movw	r24, r28
     e16:	64 df       	rcall	.-312    	; 0xce0 <_ZN6TM16374stopEv>
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	08 95       	ret

00000e26 <_ZN6TM163711send_numberEj>:


void TM1637::send_number(uint16_t four_digit_number)
{
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	fc 01       	movw	r30, r24
     e2c:	ab 01       	movw	r20, r22
	if (four_digit_number > 999)
     e2e:	68 3e       	cpi	r22, 0xE8	; 232
     e30:	23 e0       	ldi	r18, 0x03	; 3
     e32:	72 07       	cpc	r23, r18
     e34:	58 f1       	brcs	.+86     	; 0xe8c <_ZN6TM163711send_numberEj+0x66>
	{
		a = uint8_t(four_digit_number / 1000 % 10);
     e36:	9b 01       	movw	r18, r22
     e38:	36 95       	lsr	r19
     e3a:	27 95       	ror	r18
     e3c:	36 95       	lsr	r19
     e3e:	27 95       	ror	r18
     e40:	36 95       	lsr	r19
     e42:	27 95       	ror	r18
     e44:	a5 ec       	ldi	r26, 0xC5	; 197
     e46:	b0 e2       	ldi	r27, 0x20	; 32
     e48:	dd d2       	rcall	.+1466   	; 0x1404 <__umulhisi3>
     e4a:	8c 01       	movw	r16, r24
     e4c:	12 95       	swap	r17
     e4e:	02 95       	swap	r16
     e50:	0f 70       	andi	r16, 0x0F	; 15
     e52:	01 27       	eor	r16, r17
     e54:	1f 70       	andi	r17, 0x0F	; 15
     e56:	01 27       	eor	r16, r17
     e58:	98 01       	movw	r18, r16
     e5a:	ad ec       	ldi	r26, 0xCD	; 205
     e5c:	bc ec       	ldi	r27, 0xCC	; 204
     e5e:	d2 d2       	rcall	.+1444   	; 0x1404 <__umulhisi3>
     e60:	96 95       	lsr	r25
     e62:	87 95       	ror	r24
     e64:	96 95       	lsr	r25
     e66:	87 95       	ror	r24
     e68:	96 95       	lsr	r25
     e6a:	87 95       	ror	r24
     e6c:	9c 01       	movw	r18, r24
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	82 0f       	add	r24, r18
     e80:	93 1f       	adc	r25, r19
     e82:	98 01       	movw	r18, r16
     e84:	28 1b       	sub	r18, r24
     e86:	39 0b       	sbc	r19, r25
     e88:	20 8b       	std	Z+16, r18	; 0x10
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <_ZN6TM163711send_numberEj+0x68>
	} 
	else
	{
		a = 0;
     e8c:	10 8a       	std	Z+16, r1	; 0x10
	}
	
	if (four_digit_number > 99)
     e8e:	44 36       	cpi	r20, 0x64	; 100
     e90:	51 05       	cpc	r21, r1
     e92:	28 f1       	brcs	.+74     	; 0xede <_ZN6TM163711send_numberEj+0xb8>
	{
		b = uint8_t(four_digit_number / 100 % 10);
     e94:	9a 01       	movw	r18, r20
     e96:	36 95       	lsr	r19
     e98:	27 95       	ror	r18
     e9a:	36 95       	lsr	r19
     e9c:	27 95       	ror	r18
     e9e:	ab e7       	ldi	r26, 0x7B	; 123
     ea0:	b4 e1       	ldi	r27, 0x14	; 20
     ea2:	b0 d2       	rcall	.+1376   	; 0x1404 <__umulhisi3>
     ea4:	8c 01       	movw	r16, r24
     ea6:	16 95       	lsr	r17
     ea8:	07 95       	ror	r16
     eaa:	98 01       	movw	r18, r16
     eac:	ad ec       	ldi	r26, 0xCD	; 205
     eae:	bc ec       	ldi	r27, 0xCC	; 204
     eb0:	a9 d2       	rcall	.+1362   	; 0x1404 <__umulhisi3>
     eb2:	96 95       	lsr	r25
     eb4:	87 95       	ror	r24
     eb6:	96 95       	lsr	r25
     eb8:	87 95       	ror	r24
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	9c 01       	movw	r18, r24
     ec0:	22 0f       	add	r18, r18
     ec2:	33 1f       	adc	r19, r19
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	82 0f       	add	r24, r18
     ed2:	93 1f       	adc	r25, r19
     ed4:	98 01       	movw	r18, r16
     ed6:	28 1b       	sub	r18, r24
     ed8:	39 0b       	sbc	r19, r25
     eda:	21 8b       	std	Z+17, r18	; 0x11
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <_ZN6TM163711send_numberEj+0xba>
	} 
	else
	{
		b = 0;
     ede:	11 8a       	std	Z+17, r1	; 0x11
	}
	
	if (four_digit_number > 9)
     ee0:	4a 30       	cpi	r20, 0x0A	; 10
     ee2:	51 05       	cpc	r21, r1
     ee4:	18 f1       	brcs	.+70     	; 0xf2c <_ZN6TM163711send_numberEj+0x106>
	{
		c = uint8_t(four_digit_number / 10 % 10);
     ee6:	9a 01       	movw	r18, r20
     ee8:	ad ec       	ldi	r26, 0xCD	; 205
     eea:	bc ec       	ldi	r27, 0xCC	; 204
     eec:	8b d2       	rcall	.+1302   	; 0x1404 <__umulhisi3>
     eee:	8c 01       	movw	r16, r24
     ef0:	16 95       	lsr	r17
     ef2:	07 95       	ror	r16
     ef4:	16 95       	lsr	r17
     ef6:	07 95       	ror	r16
     ef8:	16 95       	lsr	r17
     efa:	07 95       	ror	r16
     efc:	98 01       	movw	r18, r16
     efe:	82 d2       	rcall	.+1284   	; 0x1404 <__umulhisi3>
     f00:	96 95       	lsr	r25
     f02:	87 95       	ror	r24
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	9c 01       	movw	r18, r24
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	82 0f       	add	r24, r18
     f20:	93 1f       	adc	r25, r19
     f22:	98 01       	movw	r18, r16
     f24:	28 1b       	sub	r18, r24
     f26:	39 0b       	sbc	r19, r25
     f28:	22 8b       	std	Z+18, r18	; 0x12
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <_ZN6TM163711send_numberEj+0x108>
	} 
	else
	{
		c = 0;
     f2c:	12 8a       	std	Z+18, r1	; 0x12
	}
	
	if (four_digit_number >= 0)
	{
		d = uint8_t(four_digit_number % 10);
     f2e:	9a 01       	movw	r18, r20
     f30:	ad ec       	ldi	r26, 0xCD	; 205
     f32:	bc ec       	ldi	r27, 0xCC	; 204
     f34:	67 d2       	rcall	.+1230   	; 0x1404 <__umulhisi3>
     f36:	96 95       	lsr	r25
     f38:	87 95       	ror	r24
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	96 95       	lsr	r25
     f40:	87 95       	ror	r24
     f42:	9c 01       	movw	r18, r24
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	82 0f       	add	r24, r18
     f56:	93 1f       	adc	r25, r19
     f58:	9a 01       	movw	r18, r20
     f5a:	28 1b       	sub	r18, r24
     f5c:	39 0b       	sbc	r19, r25
     f5e:	23 8b       	std	Z+19, r18	; 0x13
	{
		d = 0;
	}
		
		
	TM1637::send_chars(digitToSegment[a], digitToSegment[b], digitToSegment[c], digitToSegment[d]);
     f60:	83 89       	ldd	r24, Z+19	; 0x13
     f62:	df 01       	movw	r26, r30
     f64:	a8 0f       	add	r26, r24
     f66:	b1 1d       	adc	r27, r1
     f68:	0c 91       	ld	r16, X
     f6a:	82 89       	ldd	r24, Z+18	; 0x12
     f6c:	df 01       	movw	r26, r30
     f6e:	a8 0f       	add	r26, r24
     f70:	b1 1d       	adc	r27, r1
     f72:	2c 91       	ld	r18, X
     f74:	81 89       	ldd	r24, Z+17	; 0x11
     f76:	df 01       	movw	r26, r30
     f78:	a8 0f       	add	r26, r24
     f7a:	b1 1d       	adc	r27, r1
     f7c:	4c 91       	ld	r20, X
     f7e:	80 89       	ldd	r24, Z+16	; 0x10
     f80:	df 01       	movw	r26, r30
     f82:	a8 0f       	add	r26, r24
     f84:	b1 1d       	adc	r27, r1
     f86:	6c 91       	ld	r22, X
     f88:	cf 01       	movw	r24, r30
     f8a:	23 df       	rcall	.-442    	; 0xdd2 <_ZN6TM163710send_charsEhhhh>
		
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <__subsf3>:
     f92:	50 58       	subi	r21, 0x80	; 128

00000f94 <__addsf3>:
     f94:	bb 27       	eor	r27, r27
     f96:	aa 27       	eor	r26, r26
     f98:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__addsf3x>
     f9c:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__fp_round>
     fa0:	0e 94 24 09 	call	0x1248	; 0x1248 <__fp_pscA>
     fa4:	38 f0       	brcs	.+14     	; 0xfb4 <__addsf3+0x20>
     fa6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_pscB>
     faa:	20 f0       	brcs	.+8      	; 0xfb4 <__addsf3+0x20>
     fac:	39 f4       	brne	.+14     	; 0xfbc <__addsf3+0x28>
     fae:	9f 3f       	cpi	r25, 0xFF	; 255
     fb0:	19 f4       	brne	.+6      	; 0xfb8 <__addsf3+0x24>
     fb2:	26 f4       	brtc	.+8      	; 0xfbc <__addsf3+0x28>
     fb4:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_nan>
     fb8:	0e f4       	brtc	.+2      	; 0xfbc <__addsf3+0x28>
     fba:	e0 95       	com	r30
     fbc:	e7 fb       	bst	r30, 7
     fbe:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_inf>

00000fc2 <__addsf3x>:
     fc2:	e9 2f       	mov	r30, r25
     fc4:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_split3>
     fc8:	58 f3       	brcs	.-42     	; 0xfa0 <__addsf3+0xc>
     fca:	ba 17       	cp	r27, r26
     fcc:	62 07       	cpc	r22, r18
     fce:	73 07       	cpc	r23, r19
     fd0:	84 07       	cpc	r24, r20
     fd2:	95 07       	cpc	r25, r21
     fd4:	20 f0       	brcs	.+8      	; 0xfde <__addsf3x+0x1c>
     fd6:	79 f4       	brne	.+30     	; 0xff6 <__addsf3x+0x34>
     fd8:	a6 f5       	brtc	.+104    	; 0x1042 <__addsf3x+0x80>
     fda:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__fp_zero>
     fde:	0e f4       	brtc	.+2      	; 0xfe2 <__addsf3x+0x20>
     fe0:	e0 95       	com	r30
     fe2:	0b 2e       	mov	r0, r27
     fe4:	ba 2f       	mov	r27, r26
     fe6:	a0 2d       	mov	r26, r0
     fe8:	0b 01       	movw	r0, r22
     fea:	b9 01       	movw	r22, r18
     fec:	90 01       	movw	r18, r0
     fee:	0c 01       	movw	r0, r24
     ff0:	ca 01       	movw	r24, r20
     ff2:	a0 01       	movw	r20, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	ff 27       	eor	r31, r31
     ff8:	59 1b       	sub	r21, r25
     ffa:	99 f0       	breq	.+38     	; 0x1022 <__addsf3x+0x60>
     ffc:	59 3f       	cpi	r21, 0xF9	; 249
     ffe:	50 f4       	brcc	.+20     	; 0x1014 <__addsf3x+0x52>
    1000:	50 3e       	cpi	r21, 0xE0	; 224
    1002:	68 f1       	brcs	.+90     	; 0x105e <__addsf3x+0x9c>
    1004:	1a 16       	cp	r1, r26
    1006:	f0 40       	sbci	r31, 0x00	; 0
    1008:	a2 2f       	mov	r26, r18
    100a:	23 2f       	mov	r18, r19
    100c:	34 2f       	mov	r19, r20
    100e:	44 27       	eor	r20, r20
    1010:	58 5f       	subi	r21, 0xF8	; 248
    1012:	f3 cf       	rjmp	.-26     	; 0xffa <__addsf3x+0x38>
    1014:	46 95       	lsr	r20
    1016:	37 95       	ror	r19
    1018:	27 95       	ror	r18
    101a:	a7 95       	ror	r26
    101c:	f0 40       	sbci	r31, 0x00	; 0
    101e:	53 95       	inc	r21
    1020:	c9 f7       	brne	.-14     	; 0x1014 <__addsf3x+0x52>
    1022:	7e f4       	brtc	.+30     	; 0x1042 <__addsf3x+0x80>
    1024:	1f 16       	cp	r1, r31
    1026:	ba 0b       	sbc	r27, r26
    1028:	62 0b       	sbc	r22, r18
    102a:	73 0b       	sbc	r23, r19
    102c:	84 0b       	sbc	r24, r20
    102e:	ba f0       	brmi	.+46     	; 0x105e <__addsf3x+0x9c>
    1030:	91 50       	subi	r25, 0x01	; 1
    1032:	a1 f0       	breq	.+40     	; 0x105c <__addsf3x+0x9a>
    1034:	ff 0f       	add	r31, r31
    1036:	bb 1f       	adc	r27, r27
    1038:	66 1f       	adc	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	88 1f       	adc	r24, r24
    103e:	c2 f7       	brpl	.-16     	; 0x1030 <__addsf3x+0x6e>
    1040:	0e c0       	rjmp	.+28     	; 0x105e <__addsf3x+0x9c>
    1042:	ba 0f       	add	r27, r26
    1044:	62 1f       	adc	r22, r18
    1046:	73 1f       	adc	r23, r19
    1048:	84 1f       	adc	r24, r20
    104a:	48 f4       	brcc	.+18     	; 0x105e <__addsf3x+0x9c>
    104c:	87 95       	ror	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	b7 95       	ror	r27
    1054:	f7 95       	ror	r31
    1056:	9e 3f       	cpi	r25, 0xFE	; 254
    1058:	08 f0       	brcs	.+2      	; 0x105c <__addsf3x+0x9a>
    105a:	b0 cf       	rjmp	.-160    	; 0xfbc <__addsf3+0x28>
    105c:	93 95       	inc	r25
    105e:	88 0f       	add	r24, r24
    1060:	08 f0       	brcs	.+2      	; 0x1064 <__addsf3x+0xa2>
    1062:	99 27       	eor	r25, r25
    1064:	ee 0f       	add	r30, r30
    1066:	97 95       	ror	r25
    1068:	87 95       	ror	r24
    106a:	08 95       	ret

0000106c <__divsf3>:
    106c:	0e 94 4a 08 	call	0x1094	; 0x1094 <__divsf3x>
    1070:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__fp_round>
    1074:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_pscB>
    1078:	58 f0       	brcs	.+22     	; 0x1090 <__divsf3+0x24>
    107a:	0e 94 24 09 	call	0x1248	; 0x1248 <__fp_pscA>
    107e:	40 f0       	brcs	.+16     	; 0x1090 <__divsf3+0x24>
    1080:	29 f4       	brne	.+10     	; 0x108c <__divsf3+0x20>
    1082:	5f 3f       	cpi	r21, 0xFF	; 255
    1084:	29 f0       	breq	.+10     	; 0x1090 <__divsf3+0x24>
    1086:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_inf>
    108a:	51 11       	cpse	r21, r1
    108c:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_szero>
    1090:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_nan>

00001094 <__divsf3x>:
    1094:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_split3>
    1098:	68 f3       	brcs	.-38     	; 0x1074 <__divsf3+0x8>

0000109a <__divsf3_pse>:
    109a:	99 23       	and	r25, r25
    109c:	b1 f3       	breq	.-20     	; 0x108a <__divsf3+0x1e>
    109e:	55 23       	and	r21, r21
    10a0:	91 f3       	breq	.-28     	; 0x1086 <__divsf3+0x1a>
    10a2:	95 1b       	sub	r25, r21
    10a4:	55 0b       	sbc	r21, r21
    10a6:	bb 27       	eor	r27, r27
    10a8:	aa 27       	eor	r26, r26
    10aa:	62 17       	cp	r22, r18
    10ac:	73 07       	cpc	r23, r19
    10ae:	84 07       	cpc	r24, r20
    10b0:	38 f0       	brcs	.+14     	; 0x10c0 <__divsf3_pse+0x26>
    10b2:	9f 5f       	subi	r25, 0xFF	; 255
    10b4:	5f 4f       	sbci	r21, 0xFF	; 255
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	44 1f       	adc	r20, r20
    10bc:	aa 1f       	adc	r26, r26
    10be:	a9 f3       	breq	.-22     	; 0x10aa <__divsf3_pse+0x10>
    10c0:	35 d0       	rcall	.+106    	; 0x112c <__divsf3_pse+0x92>
    10c2:	0e 2e       	mov	r0, r30
    10c4:	3a f0       	brmi	.+14     	; 0x10d4 <__divsf3_pse+0x3a>
    10c6:	e0 e8       	ldi	r30, 0x80	; 128
    10c8:	32 d0       	rcall	.+100    	; 0x112e <__divsf3_pse+0x94>
    10ca:	91 50       	subi	r25, 0x01	; 1
    10cc:	50 40       	sbci	r21, 0x00	; 0
    10ce:	e6 95       	lsr	r30
    10d0:	00 1c       	adc	r0, r0
    10d2:	ca f7       	brpl	.-14     	; 0x10c6 <__divsf3_pse+0x2c>
    10d4:	2b d0       	rcall	.+86     	; 0x112c <__divsf3_pse+0x92>
    10d6:	fe 2f       	mov	r31, r30
    10d8:	29 d0       	rcall	.+82     	; 0x112c <__divsf3_pse+0x92>
    10da:	66 0f       	add	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	88 1f       	adc	r24, r24
    10e0:	bb 1f       	adc	r27, r27
    10e2:	26 17       	cp	r18, r22
    10e4:	37 07       	cpc	r19, r23
    10e6:	48 07       	cpc	r20, r24
    10e8:	ab 07       	cpc	r26, r27
    10ea:	b0 e8       	ldi	r27, 0x80	; 128
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <__divsf3_pse+0x56>
    10ee:	bb 0b       	sbc	r27, r27
    10f0:	80 2d       	mov	r24, r0
    10f2:	bf 01       	movw	r22, r30
    10f4:	ff 27       	eor	r31, r31
    10f6:	93 58       	subi	r25, 0x83	; 131
    10f8:	5f 4f       	sbci	r21, 0xFF	; 255
    10fa:	3a f0       	brmi	.+14     	; 0x110a <__divsf3_pse+0x70>
    10fc:	9e 3f       	cpi	r25, 0xFE	; 254
    10fe:	51 05       	cpc	r21, r1
    1100:	78 f0       	brcs	.+30     	; 0x1120 <__divsf3_pse+0x86>
    1102:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_inf>
    1106:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_szero>
    110a:	5f 3f       	cpi	r21, 0xFF	; 255
    110c:	e4 f3       	brlt	.-8      	; 0x1106 <__divsf3_pse+0x6c>
    110e:	98 3e       	cpi	r25, 0xE8	; 232
    1110:	d4 f3       	brlt	.-12     	; 0x1106 <__divsf3_pse+0x6c>
    1112:	86 95       	lsr	r24
    1114:	77 95       	ror	r23
    1116:	67 95       	ror	r22
    1118:	b7 95       	ror	r27
    111a:	f7 95       	ror	r31
    111c:	9f 5f       	subi	r25, 0xFF	; 255
    111e:	c9 f7       	brne	.-14     	; 0x1112 <__divsf3_pse+0x78>
    1120:	88 0f       	add	r24, r24
    1122:	91 1d       	adc	r25, r1
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	97 f9       	bld	r25, 7
    112a:	08 95       	ret
    112c:	e1 e0       	ldi	r30, 0x01	; 1
    112e:	66 0f       	add	r22, r22
    1130:	77 1f       	adc	r23, r23
    1132:	88 1f       	adc	r24, r24
    1134:	bb 1f       	adc	r27, r27
    1136:	62 17       	cp	r22, r18
    1138:	73 07       	cpc	r23, r19
    113a:	84 07       	cpc	r24, r20
    113c:	ba 07       	cpc	r27, r26
    113e:	20 f0       	brcs	.+8      	; 0x1148 <__divsf3_pse+0xae>
    1140:	62 1b       	sub	r22, r18
    1142:	73 0b       	sbc	r23, r19
    1144:	84 0b       	sbc	r24, r20
    1146:	ba 0b       	sbc	r27, r26
    1148:	ee 1f       	adc	r30, r30
    114a:	88 f7       	brcc	.-30     	; 0x112e <__divsf3_pse+0x94>
    114c:	e0 95       	com	r30
    114e:	08 95       	ret

00001150 <__fixsfsi>:
    1150:	0e 94 af 08 	call	0x115e	; 0x115e <__fixunssfsi>
    1154:	68 94       	set
    1156:	b1 11       	cpse	r27, r1
    1158:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_szero>
    115c:	08 95       	ret

0000115e <__fixunssfsi>:
    115e:	0e 94 4b 09 	call	0x1296	; 0x1296 <__fp_splitA>
    1162:	88 f0       	brcs	.+34     	; 0x1186 <__fixunssfsi+0x28>
    1164:	9f 57       	subi	r25, 0x7F	; 127
    1166:	98 f0       	brcs	.+38     	; 0x118e <__fixunssfsi+0x30>
    1168:	b9 2f       	mov	r27, r25
    116a:	99 27       	eor	r25, r25
    116c:	b7 51       	subi	r27, 0x17	; 23
    116e:	b0 f0       	brcs	.+44     	; 0x119c <__fixunssfsi+0x3e>
    1170:	e1 f0       	breq	.+56     	; 0x11aa <__fixunssfsi+0x4c>
    1172:	66 0f       	add	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	88 1f       	adc	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	1a f0       	brmi	.+6      	; 0x1182 <__fixunssfsi+0x24>
    117c:	ba 95       	dec	r27
    117e:	c9 f7       	brne	.-14     	; 0x1172 <__fixunssfsi+0x14>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <__fixunssfsi+0x4c>
    1182:	b1 30       	cpi	r27, 0x01	; 1
    1184:	91 f0       	breq	.+36     	; 0x11aa <__fixunssfsi+0x4c>
    1186:	0e 94 65 09 	call	0x12ca	; 0x12ca <__fp_zero>
    118a:	b1 e0       	ldi	r27, 0x01	; 1
    118c:	08 95       	ret
    118e:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__fp_zero>
    1192:	67 2f       	mov	r22, r23
    1194:	78 2f       	mov	r23, r24
    1196:	88 27       	eor	r24, r24
    1198:	b8 5f       	subi	r27, 0xF8	; 248
    119a:	39 f0       	breq	.+14     	; 0x11aa <__fixunssfsi+0x4c>
    119c:	b9 3f       	cpi	r27, 0xF9	; 249
    119e:	cc f3       	brlt	.-14     	; 0x1192 <__fixunssfsi+0x34>
    11a0:	86 95       	lsr	r24
    11a2:	77 95       	ror	r23
    11a4:	67 95       	ror	r22
    11a6:	b3 95       	inc	r27
    11a8:	d9 f7       	brne	.-10     	; 0x11a0 <__fixunssfsi+0x42>
    11aa:	3e f4       	brtc	.+14     	; 0x11ba <__fixunssfsi+0x5c>
    11ac:	90 95       	com	r25
    11ae:	80 95       	com	r24
    11b0:	70 95       	com	r23
    11b2:	61 95       	neg	r22
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	8f 4f       	sbci	r24, 0xFF	; 255
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	08 95       	ret

000011bc <__floatunsisf>:
    11bc:	e8 94       	clt
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <__floatsisf+0x12>

000011c0 <__floatsisf>:
    11c0:	97 fb       	bst	r25, 7
    11c2:	3e f4       	brtc	.+14     	; 0x11d2 <__floatsisf+0x12>
    11c4:	90 95       	com	r25
    11c6:	80 95       	com	r24
    11c8:	70 95       	com	r23
    11ca:	61 95       	neg	r22
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	8f 4f       	sbci	r24, 0xFF	; 255
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	99 23       	and	r25, r25
    11d4:	a9 f0       	breq	.+42     	; 0x1200 <__floatsisf+0x40>
    11d6:	f9 2f       	mov	r31, r25
    11d8:	96 e9       	ldi	r25, 0x96	; 150
    11da:	bb 27       	eor	r27, r27
    11dc:	93 95       	inc	r25
    11de:	f6 95       	lsr	r31
    11e0:	87 95       	ror	r24
    11e2:	77 95       	ror	r23
    11e4:	67 95       	ror	r22
    11e6:	b7 95       	ror	r27
    11e8:	f1 11       	cpse	r31, r1
    11ea:	f8 cf       	rjmp	.-16     	; 0x11dc <__floatsisf+0x1c>
    11ec:	fa f4       	brpl	.+62     	; 0x122c <__floatsisf+0x6c>
    11ee:	bb 0f       	add	r27, r27
    11f0:	11 f4       	brne	.+4      	; 0x11f6 <__floatsisf+0x36>
    11f2:	60 ff       	sbrs	r22, 0
    11f4:	1b c0       	rjmp	.+54     	; 0x122c <__floatsisf+0x6c>
    11f6:	6f 5f       	subi	r22, 0xFF	; 255
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	8f 4f       	sbci	r24, 0xFF	; 255
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	16 c0       	rjmp	.+44     	; 0x122c <__floatsisf+0x6c>
    1200:	88 23       	and	r24, r24
    1202:	11 f0       	breq	.+4      	; 0x1208 <__floatsisf+0x48>
    1204:	96 e9       	ldi	r25, 0x96	; 150
    1206:	11 c0       	rjmp	.+34     	; 0x122a <__floatsisf+0x6a>
    1208:	77 23       	and	r23, r23
    120a:	21 f0       	breq	.+8      	; 0x1214 <__floatsisf+0x54>
    120c:	9e e8       	ldi	r25, 0x8E	; 142
    120e:	87 2f       	mov	r24, r23
    1210:	76 2f       	mov	r23, r22
    1212:	05 c0       	rjmp	.+10     	; 0x121e <__floatsisf+0x5e>
    1214:	66 23       	and	r22, r22
    1216:	71 f0       	breq	.+28     	; 0x1234 <__floatsisf+0x74>
    1218:	96 e8       	ldi	r25, 0x86	; 134
    121a:	86 2f       	mov	r24, r22
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	2a f0       	brmi	.+10     	; 0x122c <__floatsisf+0x6c>
    1222:	9a 95       	dec	r25
    1224:	66 0f       	add	r22, r22
    1226:	77 1f       	adc	r23, r23
    1228:	88 1f       	adc	r24, r24
    122a:	da f7       	brpl	.-10     	; 0x1222 <__floatsisf+0x62>
    122c:	88 0f       	add	r24, r24
    122e:	96 95       	lsr	r25
    1230:	87 95       	ror	r24
    1232:	97 f9       	bld	r25, 7
    1234:	08 95       	ret

00001236 <__fp_inf>:
    1236:	97 f9       	bld	r25, 7
    1238:	9f 67       	ori	r25, 0x7F	; 127
    123a:	80 e8       	ldi	r24, 0x80	; 128
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	08 95       	ret

00001242 <__fp_nan>:
    1242:	9f ef       	ldi	r25, 0xFF	; 255
    1244:	80 ec       	ldi	r24, 0xC0	; 192
    1246:	08 95       	ret

00001248 <__fp_pscA>:
    1248:	00 24       	eor	r0, r0
    124a:	0a 94       	dec	r0
    124c:	16 16       	cp	r1, r22
    124e:	17 06       	cpc	r1, r23
    1250:	18 06       	cpc	r1, r24
    1252:	09 06       	cpc	r0, r25
    1254:	08 95       	ret

00001256 <__fp_pscB>:
    1256:	00 24       	eor	r0, r0
    1258:	0a 94       	dec	r0
    125a:	12 16       	cp	r1, r18
    125c:	13 06       	cpc	r1, r19
    125e:	14 06       	cpc	r1, r20
    1260:	05 06       	cpc	r0, r21
    1262:	08 95       	ret

00001264 <__fp_round>:
    1264:	09 2e       	mov	r0, r25
    1266:	03 94       	inc	r0
    1268:	00 0c       	add	r0, r0
    126a:	11 f4       	brne	.+4      	; 0x1270 <__fp_round+0xc>
    126c:	88 23       	and	r24, r24
    126e:	52 f0       	brmi	.+20     	; 0x1284 <__fp_round+0x20>
    1270:	bb 0f       	add	r27, r27
    1272:	40 f4       	brcc	.+16     	; 0x1284 <__fp_round+0x20>
    1274:	bf 2b       	or	r27, r31
    1276:	11 f4       	brne	.+4      	; 0x127c <__fp_round+0x18>
    1278:	60 ff       	sbrs	r22, 0
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <__fp_round+0x20>
    127c:	6f 5f       	subi	r22, 0xFF	; 255
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	08 95       	ret

00001286 <__fp_split3>:
    1286:	57 fd       	sbrc	r21, 7
    1288:	90 58       	subi	r25, 0x80	; 128
    128a:	44 0f       	add	r20, r20
    128c:	55 1f       	adc	r21, r21
    128e:	59 f0       	breq	.+22     	; 0x12a6 <__fp_splitA+0x10>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	71 f0       	breq	.+28     	; 0x12b0 <__fp_splitA+0x1a>
    1294:	47 95       	ror	r20

00001296 <__fp_splitA>:
    1296:	88 0f       	add	r24, r24
    1298:	97 fb       	bst	r25, 7
    129a:	99 1f       	adc	r25, r25
    129c:	61 f0       	breq	.+24     	; 0x12b6 <__fp_splitA+0x20>
    129e:	9f 3f       	cpi	r25, 0xFF	; 255
    12a0:	79 f0       	breq	.+30     	; 0x12c0 <__fp_splitA+0x2a>
    12a2:	87 95       	ror	r24
    12a4:	08 95       	ret
    12a6:	12 16       	cp	r1, r18
    12a8:	13 06       	cpc	r1, r19
    12aa:	14 06       	cpc	r1, r20
    12ac:	55 1f       	adc	r21, r21
    12ae:	f2 cf       	rjmp	.-28     	; 0x1294 <__fp_split3+0xe>
    12b0:	46 95       	lsr	r20
    12b2:	f1 df       	rcall	.-30     	; 0x1296 <__fp_splitA>
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <__fp_splitA+0x30>
    12b6:	16 16       	cp	r1, r22
    12b8:	17 06       	cpc	r1, r23
    12ba:	18 06       	cpc	r1, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	f1 cf       	rjmp	.-30     	; 0x12a2 <__fp_splitA+0xc>
    12c0:	86 95       	lsr	r24
    12c2:	71 05       	cpc	r23, r1
    12c4:	61 05       	cpc	r22, r1
    12c6:	08 94       	sec
    12c8:	08 95       	ret

000012ca <__fp_zero>:
    12ca:	e8 94       	clt

000012cc <__fp_szero>:
    12cc:	bb 27       	eor	r27, r27
    12ce:	66 27       	eor	r22, r22
    12d0:	77 27       	eor	r23, r23
    12d2:	cb 01       	movw	r24, r22
    12d4:	97 f9       	bld	r25, 7
    12d6:	08 95       	ret

000012d8 <__gesf2>:
    12d8:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fp_cmp>
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <__gesf2+0x8>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	08 95       	ret

000012e2 <__mulsf3>:
    12e2:	0e 94 84 09 	call	0x1308	; 0x1308 <__mulsf3x>
    12e6:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__fp_round>
    12ea:	0e 94 24 09 	call	0x1248	; 0x1248 <__fp_pscA>
    12ee:	38 f0       	brcs	.+14     	; 0x12fe <__mulsf3+0x1c>
    12f0:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_pscB>
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <__mulsf3+0x1c>
    12f6:	95 23       	and	r25, r21
    12f8:	11 f0       	breq	.+4      	; 0x12fe <__mulsf3+0x1c>
    12fa:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_inf>
    12fe:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_nan>
    1302:	11 24       	eor	r1, r1
    1304:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_szero>

00001308 <__mulsf3x>:
    1308:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_split3>
    130c:	70 f3       	brcs	.-36     	; 0x12ea <__mulsf3+0x8>

0000130e <__mulsf3_pse>:
    130e:	95 9f       	mul	r25, r21
    1310:	c1 f3       	breq	.-16     	; 0x1302 <__mulsf3+0x20>
    1312:	95 0f       	add	r25, r21
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	55 1f       	adc	r21, r21
    1318:	62 9f       	mul	r22, r18
    131a:	f0 01       	movw	r30, r0
    131c:	72 9f       	mul	r23, r18
    131e:	bb 27       	eor	r27, r27
    1320:	f0 0d       	add	r31, r0
    1322:	b1 1d       	adc	r27, r1
    1324:	63 9f       	mul	r22, r19
    1326:	aa 27       	eor	r26, r26
    1328:	f0 0d       	add	r31, r0
    132a:	b1 1d       	adc	r27, r1
    132c:	aa 1f       	adc	r26, r26
    132e:	64 9f       	mul	r22, r20
    1330:	66 27       	eor	r22, r22
    1332:	b0 0d       	add	r27, r0
    1334:	a1 1d       	adc	r26, r1
    1336:	66 1f       	adc	r22, r22
    1338:	82 9f       	mul	r24, r18
    133a:	22 27       	eor	r18, r18
    133c:	b0 0d       	add	r27, r0
    133e:	a1 1d       	adc	r26, r1
    1340:	62 1f       	adc	r22, r18
    1342:	73 9f       	mul	r23, r19
    1344:	b0 0d       	add	r27, r0
    1346:	a1 1d       	adc	r26, r1
    1348:	62 1f       	adc	r22, r18
    134a:	83 9f       	mul	r24, r19
    134c:	a0 0d       	add	r26, r0
    134e:	61 1d       	adc	r22, r1
    1350:	22 1f       	adc	r18, r18
    1352:	74 9f       	mul	r23, r20
    1354:	33 27       	eor	r19, r19
    1356:	a0 0d       	add	r26, r0
    1358:	61 1d       	adc	r22, r1
    135a:	23 1f       	adc	r18, r19
    135c:	84 9f       	mul	r24, r20
    135e:	60 0d       	add	r22, r0
    1360:	21 1d       	adc	r18, r1
    1362:	82 2f       	mov	r24, r18
    1364:	76 2f       	mov	r23, r22
    1366:	6a 2f       	mov	r22, r26
    1368:	11 24       	eor	r1, r1
    136a:	9f 57       	subi	r25, 0x7F	; 127
    136c:	50 40       	sbci	r21, 0x00	; 0
    136e:	9a f0       	brmi	.+38     	; 0x1396 <__mulsf3_pse+0x88>
    1370:	f1 f0       	breq	.+60     	; 0x13ae <__mulsf3_pse+0xa0>
    1372:	88 23       	and	r24, r24
    1374:	4a f0       	brmi	.+18     	; 0x1388 <__mulsf3_pse+0x7a>
    1376:	ee 0f       	add	r30, r30
    1378:	ff 1f       	adc	r31, r31
    137a:	bb 1f       	adc	r27, r27
    137c:	66 1f       	adc	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	91 50       	subi	r25, 0x01	; 1
    1384:	50 40       	sbci	r21, 0x00	; 0
    1386:	a9 f7       	brne	.-22     	; 0x1372 <__mulsf3_pse+0x64>
    1388:	9e 3f       	cpi	r25, 0xFE	; 254
    138a:	51 05       	cpc	r21, r1
    138c:	80 f0       	brcs	.+32     	; 0x13ae <__mulsf3_pse+0xa0>
    138e:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__fp_inf>
    1392:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__fp_szero>
    1396:	5f 3f       	cpi	r21, 0xFF	; 255
    1398:	e4 f3       	brlt	.-8      	; 0x1392 <__mulsf3_pse+0x84>
    139a:	98 3e       	cpi	r25, 0xE8	; 232
    139c:	d4 f3       	brlt	.-12     	; 0x1392 <__mulsf3_pse+0x84>
    139e:	86 95       	lsr	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b7 95       	ror	r27
    13a6:	f7 95       	ror	r31
    13a8:	e7 95       	ror	r30
    13aa:	9f 5f       	subi	r25, 0xFF	; 255
    13ac:	c1 f7       	brne	.-16     	; 0x139e <__mulsf3_pse+0x90>
    13ae:	fe 2b       	or	r31, r30
    13b0:	88 0f       	add	r24, r24
    13b2:	91 1d       	adc	r25, r1
    13b4:	96 95       	lsr	r25
    13b6:	87 95       	ror	r24
    13b8:	97 f9       	bld	r25, 7
    13ba:	08 95       	ret

000013bc <__fp_cmp>:
    13bc:	99 0f       	add	r25, r25
    13be:	00 08       	sbc	r0, r0
    13c0:	55 0f       	add	r21, r21
    13c2:	aa 0b       	sbc	r26, r26
    13c4:	e0 e8       	ldi	r30, 0x80	; 128
    13c6:	fe ef       	ldi	r31, 0xFE	; 254
    13c8:	16 16       	cp	r1, r22
    13ca:	17 06       	cpc	r1, r23
    13cc:	e8 07       	cpc	r30, r24
    13ce:	f9 07       	cpc	r31, r25
    13d0:	c0 f0       	brcs	.+48     	; 0x1402 <__fp_cmp+0x46>
    13d2:	12 16       	cp	r1, r18
    13d4:	13 06       	cpc	r1, r19
    13d6:	e4 07       	cpc	r30, r20
    13d8:	f5 07       	cpc	r31, r21
    13da:	98 f0       	brcs	.+38     	; 0x1402 <__fp_cmp+0x46>
    13dc:	62 1b       	sub	r22, r18
    13de:	73 0b       	sbc	r23, r19
    13e0:	84 0b       	sbc	r24, r20
    13e2:	95 0b       	sbc	r25, r21
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <__fp_cmp+0x38>
    13e6:	0a 26       	eor	r0, r26
    13e8:	61 f0       	breq	.+24     	; 0x1402 <__fp_cmp+0x46>
    13ea:	23 2b       	or	r18, r19
    13ec:	24 2b       	or	r18, r20
    13ee:	25 2b       	or	r18, r21
    13f0:	21 f4       	brne	.+8      	; 0x13fa <__fp_cmp+0x3e>
    13f2:	08 95       	ret
    13f4:	0a 26       	eor	r0, r26
    13f6:	09 f4       	brne	.+2      	; 0x13fa <__fp_cmp+0x3e>
    13f8:	a1 40       	sbci	r26, 0x01	; 1
    13fa:	a6 95       	lsr	r26
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	81 1d       	adc	r24, r1
    1400:	81 1d       	adc	r24, r1
    1402:	08 95       	ret

00001404 <__umulhisi3>:
    1404:	a2 9f       	mul	r26, r18
    1406:	b0 01       	movw	r22, r0
    1408:	b3 9f       	mul	r27, r19
    140a:	c0 01       	movw	r24, r0
    140c:	a3 9f       	mul	r26, r19
    140e:	01 d0       	rcall	.+2      	; 0x1412 <__umulhisi3+0xe>
    1410:	b2 9f       	mul	r27, r18
    1412:	70 0d       	add	r23, r0
    1414:	81 1d       	adc	r24, r1
    1416:	11 24       	eor	r1, r1
    1418:	91 1d       	adc	r25, r1
    141a:	08 95       	ret

0000141c <__tablejump2__>:
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	05 90       	lpm	r0, Z+
    1422:	f4 91       	lpm	r31, Z
    1424:	e0 2d       	mov	r30, r0
    1426:	09 94       	ijmp

00001428 <_exit>:
    1428:	f8 94       	cli

0000142a <__stop_program>:
    142a:	ff cf       	rjmp	.-2      	; 0x142a <__stop_program>
