
Lathe_attiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00001498  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000147c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0000947c  0000147c  00001530  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000022  00803e04  00803e04  00001550  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e77  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ecd  00000000  00000000  00005543  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001140  00000000  00000000  00007410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002cc  00000000  00000000  00008550  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000019d5  00000000  00000000  0000881c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e8f  00000000  00000000  0000a1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
       2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
       4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
       6:	8a c1       	rjmp	.+788    	; 0x31c <__vector_3>
       8:	c2 c1       	rjmp	.+900    	; 0x38e <__vector_4>
       a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
       c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
       e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
      10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
      12:	43 c1       	rjmp	.+646    	; 0x29a <__vector_9>
      14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
      16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
      18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
      1a:	66 c1       	rjmp	.+716    	; 0x2e8 <__vector_13>
      1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
      1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
      20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
      22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
      24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
      26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
      28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
      2a:	2a c0       	rjmp	.+84     	; 0x80 <__bad_interrupt>
      2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
      2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
      30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
      32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <__ctors_start>:
      34:	81 06       	cpc	r8, r17

00000036 <__ctors_end>:
      36:	11 24       	eor	r1, r1
      38:	1f be       	out	0x3f, r1	; 63
      3a:	cf ef       	ldi	r28, 0xFF	; 255
      3c:	cd bf       	out	0x3d, r28	; 61
      3e:	df e3       	ldi	r29, 0x3F	; 63
      40:	de bf       	out	0x3e, r29	; 62

00000042 <__do_copy_data>:
      42:	1e e3       	ldi	r17, 0x3E	; 62
      44:	a0 e0       	ldi	r26, 0x00	; 0
      46:	be e3       	ldi	r27, 0x3E	; 62
      48:	e8 e9       	ldi	r30, 0x98	; 152
      4a:	f4 e1       	ldi	r31, 0x14	; 20
      4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
      4e:	05 90       	lpm	r0, Z+
      50:	0d 92       	st	X+, r0
      52:	a4 30       	cpi	r26, 0x04	; 4
      54:	b1 07       	cpc	r27, r17
      56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
      58:	2e e3       	ldi	r18, 0x3E	; 62
      5a:	a4 e0       	ldi	r26, 0x04	; 4
      5c:	be e3       	ldi	r27, 0x3E	; 62
      5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
      60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
      62:	a6 32       	cpi	r26, 0x26	; 38
      64:	b2 07       	cpc	r27, r18
      66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>

00000068 <__do_global_ctors>:
      68:	10 e0       	ldi	r17, 0x00	; 0
      6a:	cb e1       	ldi	r28, 0x1B	; 27
      6c:	d0 e0       	ldi	r29, 0x00	; 0
      6e:	03 c0       	rjmp	.+6      	; 0x76 <__do_global_ctors+0xe>
      70:	21 97       	sbiw	r28, 0x01	; 1
      72:	fe 01       	movw	r30, r28
      74:	fb d9       	rcall	.-3082   	; 0xfffff46c <__eeprom_end+0xff7ef46c>
      76:	ca 31       	cpi	r28, 0x1A	; 26
      78:	d1 07       	cpc	r29, r17
      7a:	d1 f7       	brne	.-12     	; 0x70 <__do_global_ctors+0x8>
      7c:	ad d2       	rcall	.+1370   	; 0x5d8 <main>
      7e:	fc c9       	rjmp	.-3080   	; 0xfffff478 <__eeprom_end+0xff7ef478>

00000080 <__bad_interrupt>:
      80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <_ZN11bcd_encoder4initEv>:
#include "BCD_encoder.h"

void bcd_encoder::init()
{
	
	bcd_clock_port.DIRSET = bcd_clock_pin; 
      82:	e0 e2       	ldi	r30, 0x20	; 32
      84:	f4 e0       	ldi	r31, 0x04	; 4
      86:	81 e0       	ldi	r24, 0x01	; 1
      88:	81 83       	std	Z+1, r24	; 0x01
	bcd_clock_port.OUTCLR = bcd_clock_pin; //clk low
      8a:	86 83       	std	Z+6, r24	; 0x06
	
	bcd_load_port.DIRSET = bcd_load_pin;
      8c:	88 e0       	ldi	r24, 0x08	; 8
      8e:	81 83       	std	Z+1, r24	; 0x01
	bcd_load_port.OUTSET = bcd_load_pin; //trigger high
      90:	85 83       	std	Z+5, r24	; 0x05
      92:	08 95       	ret

00000094 <_ZN11bcd_encoder8read_bcdEv>:
	
}


uint16_t bcd_encoder::read_bcd()
{
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	00 d0       	rcall	.+0      	; 0x9a <_ZN11bcd_encoder8read_bcdEv+0x6>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t data = 0;
      9e:	19 82       	std	Y+1, r1	; 0x01
      a0:	1a 82       	std	Y+2, r1	; 0x02
	
	//load data
	bcd_load_port.OUTCLR = bcd_load_pin;
      a2:	e0 e2       	ldi	r30, 0x20	; 32
      a4:	f4 e0       	ldi	r31, 0x04	; 4
      a6:	88 e0       	ldi	r24, 0x08	; 8
      a8:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      aa:	91 e2       	ldi	r25, 0x21	; 33
      ac:	9a 95       	dec	r25
      ae:	f1 f7       	brne	.-4      	; 0xac <_ZN11bcd_encoder8read_bcdEv+0x18>
      b0:	00 00       	nop
	_delay_us(5);
	//latch input to start shift out
	bcd_load_port.OUTSET = bcd_load_pin;
      b2:	85 83       	std	Z+5, r24	; 0x05
      b4:	81 e2       	ldi	r24, 0x21	; 33
      b6:	8a 95       	dec	r24
      b8:	f1 f7       	brne	.-4      	; 0xb6 <_ZN11bcd_encoder8read_bcdEv+0x22>
      ba:	00 00       	nop
	_delay_us(5);
	
	//clock out data
	for (uint8_t i = 0; i < bcd_bits; i++)
      bc:	20 e0       	ldi	r18, 0x00	; 0
      be:	20 31       	cpi	r18, 0x10	; 16
      c0:	00 f5       	brcc	.+64     	; 0x102 <_ZN11bcd_encoder8read_bcdEv+0x6e>
	{
		
		data = data | (((bcd_data_port.IN & bcd_data_pin) >> (bcd_data_pin-1)) << i );
      c2:	e0 e2       	ldi	r30, 0x20	; 32
      c4:	f4 e0       	ldi	r31, 0x04	; 4
      c6:	80 85       	ldd	r24, Z+8	; 0x08
      c8:	82 70       	andi	r24, 0x02	; 2
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	95 95       	asr	r25
      ce:	87 95       	ror	r24
      d0:	02 2e       	mov	r0, r18
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <_ZN11bcd_encoder8read_bcdEv+0x44>
      d4:	88 0f       	add	r24, r24
      d6:	99 1f       	adc	r25, r25
      d8:	0a 94       	dec	r0
      da:	e2 f7       	brpl	.-8      	; 0xd4 <_ZN11bcd_encoder8read_bcdEv+0x40>
      dc:	49 81       	ldd	r20, Y+1	; 0x01
      de:	5a 81       	ldd	r21, Y+2	; 0x02
      e0:	84 2b       	or	r24, r20
      e2:	95 2b       	or	r25, r21
      e4:	89 83       	std	Y+1, r24	; 0x01
      e6:	9a 83       	std	Y+2, r25	; 0x02
		
		//clk high - shift data
		bcd_clock_port.OUTSET = bcd_clock_pin;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	91 e2       	ldi	r25, 0x21	; 33
      ee:	9a 95       	dec	r25
      f0:	f1 f7       	brne	.-4      	; 0xee <_ZN11bcd_encoder8read_bcdEv+0x5a>
      f2:	00 00       	nop
		_delay_us(5);
		//clk low
		bcd_clock_port.OUTCLR = bcd_clock_pin;
      f4:	86 83       	std	Z+6, r24	; 0x06
      f6:	81 e2       	ldi	r24, 0x21	; 33
      f8:	8a 95       	dec	r24
      fa:	f1 f7       	brne	.-4      	; 0xf8 <_ZN11bcd_encoder8read_bcdEv+0x64>
      fc:	00 00       	nop
	//latch input to start shift out
	bcd_load_port.OUTSET = bcd_load_pin;
	_delay_us(5);
	
	//clock out data
	for (uint8_t i = 0; i < bcd_bits; i++)
      fe:	2f 5f       	subi	r18, 0xFF	; 255
     100:	de cf       	rjmp	.-68     	; 0xbe <_ZN11bcd_encoder8read_bcdEv+0x2a>
		bcd_clock_port.OUTCLR = bcd_clock_pin;
		_delay_us(5);
		
	}
	
	return data;
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	9a 81       	ldd	r25, Y+2	; 0x02
}
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <_ZN11bcd_encoder10bcd_to_intEv>:

uint16_t bcd_encoder::bcd_to_int()
{
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
	uint16_t temp = read_bcd();
     118:	bd df       	rcall	.-134    	; 0x94 <_ZN11bcd_encoder8read_bcdEv>
	
	uint16_t ones = ((temp & 0b0000000000001000) >> 3) | ((temp & 0b0000000000000100) >> 1) | ((temp & 0b0000000000000010) << 1) | ((temp & 0b0000000000000001) << 3);
     11a:	83 fb       	bst	r24, 3
     11c:	00 27       	eor	r16, r16
     11e:	00 f9       	bld	r16, 0
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	bc 01       	movw	r22, r24
     124:	64 70       	andi	r22, 0x04	; 4
     126:	77 27       	eor	r23, r23
     128:	76 95       	lsr	r23
     12a:	67 95       	ror	r22
     12c:	60 2b       	or	r22, r16
     12e:	71 2b       	or	r23, r17
     130:	ac 01       	movw	r20, r24
     132:	42 70       	andi	r20, 0x02	; 2
     134:	55 27       	eor	r21, r21
     136:	44 0f       	add	r20, r20
     138:	55 1f       	adc	r21, r21
     13a:	9b 01       	movw	r18, r22
     13c:	24 2b       	or	r18, r20
     13e:	35 2b       	or	r19, r21
     140:	bc 01       	movw	r22, r24
     142:	61 70       	andi	r22, 0x01	; 1
     144:	77 27       	eor	r23, r23
     146:	66 0f       	add	r22, r22
     148:	77 1f       	adc	r23, r23
     14a:	66 0f       	add	r22, r22
     14c:	77 1f       	adc	r23, r23
     14e:	66 0f       	add	r22, r22
     150:	77 1f       	adc	r23, r23
     152:	62 2b       	or	r22, r18
     154:	73 2b       	or	r23, r19
	uint16_t tens = ((temp & 0b0000000010000000) >> 7) | ((temp & 0b0000000001000000) >> 5) | ((temp & 0b0000000000100000) >> 3) | ((temp & 0b0000000000010000) >> 1);
     156:	87 fb       	bst	r24, 7
     158:	22 27       	eor	r18, r18
     15a:	20 f9       	bld	r18, 0
     15c:	c2 2f       	mov	r28, r18
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	d2 2f       	mov	r29, r18
     162:	ac 01       	movw	r20, r24
     164:	40 74       	andi	r20, 0x40	; 64
     166:	55 27       	eor	r21, r21
     168:	56 95       	lsr	r21
     16a:	47 95       	ror	r20
     16c:	52 95       	swap	r21
     16e:	42 95       	swap	r20
     170:	4f 70       	andi	r20, 0x0F	; 15
     172:	45 27       	eor	r20, r21
     174:	5f 70       	andi	r21, 0x0F	; 15
     176:	45 27       	eor	r20, r21
     178:	4c 2b       	or	r20, r28
     17a:	5d 2b       	or	r21, r29
     17c:	fc 01       	movw	r30, r24
     17e:	e0 72       	andi	r30, 0x20	; 32
     180:	ff 27       	eor	r31, r31
     182:	f6 95       	lsr	r31
     184:	e7 95       	ror	r30
     186:	f6 95       	lsr	r31
     188:	e7 95       	ror	r30
     18a:	f6 95       	lsr	r31
     18c:	e7 95       	ror	r30
     18e:	9a 01       	movw	r18, r20
     190:	2e 2b       	or	r18, r30
     192:	3f 2b       	or	r19, r31
     194:	ac 01       	movw	r20, r24
     196:	40 71       	andi	r20, 0x10	; 16
     198:	55 27       	eor	r21, r21
     19a:	56 95       	lsr	r21
     19c:	47 95       	ror	r20
     19e:	42 2b       	or	r20, r18
     1a0:	53 2b       	or	r21, r19
	uint16_t hundereds = ((temp & 0b0000100000000000) >> 11) | ((temp & 0b0000010000000000) >> 9) | ((temp & 0b0000001000000000) >> 7) | ((temp & 0b0000000100000000) >> 5);
     1a2:	fc 01       	movw	r30, r24
     1a4:	ee 27       	eor	r30, r30
     1a6:	f8 70       	andi	r31, 0x08	; 8
     1a8:	ef 2f       	mov	r30, r31
     1aa:	ff 27       	eor	r31, r31
     1ac:	e6 95       	lsr	r30
     1ae:	e6 95       	lsr	r30
     1b0:	e6 95       	lsr	r30
     1b2:	9c 01       	movw	r18, r24
     1b4:	22 27       	eor	r18, r18
     1b6:	34 70       	andi	r19, 0x04	; 4
     1b8:	23 2f       	mov	r18, r19
     1ba:	33 27       	eor	r19, r19
     1bc:	26 95       	lsr	r18
     1be:	e2 2b       	or	r30, r18
     1c0:	f3 2b       	or	r31, r19
     1c2:	dc 01       	movw	r26, r24
     1c4:	aa 27       	eor	r26, r26
     1c6:	b2 70       	andi	r27, 0x02	; 2
     1c8:	aa 0f       	add	r26, r26
     1ca:	ab 2f       	mov	r26, r27
     1cc:	aa 1f       	adc	r26, r26
     1ce:	bb 0b       	sbc	r27, r27
     1d0:	b1 95       	neg	r27
     1d2:	9f 01       	movw	r18, r30
     1d4:	2a 2b       	or	r18, r26
     1d6:	3b 2b       	or	r19, r27
     1d8:	fc 01       	movw	r30, r24
     1da:	ee 27       	eor	r30, r30
     1dc:	f1 70       	andi	r31, 0x01	; 1
     1de:	f6 95       	lsr	r31
     1e0:	e7 95       	ror	r30
     1e2:	f2 95       	swap	r31
     1e4:	e2 95       	swap	r30
     1e6:	ef 70       	andi	r30, 0x0F	; 15
     1e8:	ef 27       	eor	r30, r31
     1ea:	ff 70       	andi	r31, 0x0F	; 15
     1ec:	ef 27       	eor	r30, r31
     1ee:	e2 2b       	or	r30, r18
     1f0:	f3 2b       	or	r31, r19
	uint16_t thousands = ((temp & 0b1000000000000000) >> 15) | ((temp & 0b0100000000000000) >> 13) | ((temp & 0b0010000000000000) >> 11) | ((temp & 0b0001000000000000) >> 9);
     1f2:	dc 01       	movw	r26, r24
     1f4:	aa 27       	eor	r26, r26
     1f6:	bb 0f       	add	r27, r27
     1f8:	aa 1f       	adc	r26, r26
     1fa:	bb 27       	eor	r27, r27
     1fc:	9c 01       	movw	r18, r24
     1fe:	22 27       	eor	r18, r18
     200:	30 74       	andi	r19, 0x40	; 64
     202:	23 2f       	mov	r18, r19
     204:	33 27       	eor	r19, r19
     206:	22 95       	swap	r18
     208:	26 95       	lsr	r18
     20a:	27 70       	andi	r18, 0x07	; 7
     20c:	2a 2b       	or	r18, r26
     20e:	3b 2b       	or	r19, r27
     210:	dc 01       	movw	r26, r24
     212:	aa 27       	eor	r26, r26
     214:	b0 72       	andi	r27, 0x20	; 32
     216:	ab 2f       	mov	r26, r27
     218:	bb 27       	eor	r27, r27
     21a:	a6 95       	lsr	r26
     21c:	a6 95       	lsr	r26
     21e:	a6 95       	lsr	r26
     220:	2a 2b       	or	r18, r26
     222:	3b 2b       	or	r19, r27
     224:	88 27       	eor	r24, r24
     226:	90 71       	andi	r25, 0x10	; 16
     228:	89 2f       	mov	r24, r25
     22a:	99 27       	eor	r25, r25
     22c:	86 95       	lsr	r24
     22e:	28 2b       	or	r18, r24
     230:	39 2b       	or	r19, r25
	
	temp = ones + (tens * 10) + (hundereds * 100) + (thousands * 1000);
     232:	ca 01       	movw	r24, r20
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	44 0f       	add	r20, r20
     23e:	55 1f       	adc	r21, r21
     240:	44 0f       	add	r20, r20
     242:	55 1f       	adc	r21, r21
     244:	48 0f       	add	r20, r24
     246:	59 1f       	adc	r21, r25
     248:	a4 e6       	ldi	r26, 0x64	; 100
     24a:	ae 9f       	mul	r26, r30
     24c:	c0 01       	movw	r24, r0
     24e:	af 9f       	mul	r26, r31
     250:	90 0d       	add	r25, r0
     252:	11 24       	eor	r1, r1
     254:	48 0f       	add	r20, r24
     256:	59 1f       	adc	r21, r25
     258:	64 0f       	add	r22, r20
     25a:	75 1f       	adc	r23, r21
     25c:	48 ee       	ldi	r20, 0xE8	; 232
     25e:	53 e0       	ldi	r21, 0x03	; 3
     260:	24 9f       	mul	r18, r20
     262:	c0 01       	movw	r24, r0
     264:	25 9f       	mul	r18, r21
     266:	90 0d       	add	r25, r0
     268:	34 9f       	mul	r19, r20
     26a:	90 0d       	add	r25, r0
     26c:	11 24       	eor	r1, r1
	
	return temp;
     26e:	86 0f       	add	r24, r22
     270:	97 1f       	adc	r25, r23
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	08 95       	ret

0000027c <_Z41__static_initialization_and_destruction_0ii>:
	
	//disable the spindle
	STEP_SPINDLE_PORT.OUTCLR = STEP_SPINDLE_MASK;
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_MASK;
	spindle_running = 0;
}
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	61 f4       	brne	.+24     	; 0x298 <_Z41__static_initialization_and_destruction_0ii+0x1c>
     280:	6f 3f       	cpi	r22, 0xFF	; 255
     282:	7f 4f       	sbci	r23, 0xFF	; 255
     284:	49 f4       	brne	.+18     	; 0x298 <_Z41__static_initialization_and_destruction_0ii+0x1c>
#include <stdint.h>
#include <stdlib.h>
#include <util/delay.h> //F_CPU="20000000" or 20MHz clock


class TM1637 
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	ec e7       	ldi	r30, 0x7C	; 124
     28a:	f4 e9       	ldi	r31, 0x94	; 148
     28c:	a5 e0       	ldi	r26, 0x05	; 5
     28e:	be e3       	ldi	r27, 0x3E	; 62
     290:	01 90       	ld	r0, Z+
     292:	0d 92       	st	X+, r0
     294:	8a 95       	dec	r24
     296:	e1 f7       	brne	.-8      	; 0x290 <_Z41__static_initialization_and_destruction_0ii+0x14>
     298:	08 95       	ret

0000029a <__vector_9>:
bcd_encoder bcd_input; //init BCD input encoder


//interrupt for TCA0 split high underflow - spindle pin
ISR (TCA0_HUNF_vect)
{
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	8f 93       	push	r24
     2a6:	9f 93       	push	r25
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
	//TCA0.SPLIT.INTFLAGS  //clear interrupt flag
	if (spindle_ramp_counter == 0)
     2ac:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <spindle_ramp_counter>
     2b0:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <spindle_ramp_counter+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	31 f4       	brne	.+12     	; 0x2c4 <__vector_9+0x2a>
	{
		TCA0.SPLIT.INTCTRL &= ~(TCA_SPLIT_HUNF_bm); //disable interrupt
     2b8:	e0 e0       	ldi	r30, 0x00	; 0
     2ba:	fa e0       	ldi	r31, 0x0A	; 10
     2bc:	82 85       	ldd	r24, Z+10	; 0x0a
     2be:	8d 7f       	andi	r24, 0xFD	; 253
     2c0:	82 87       	std	Z+10, r24	; 0x0a
     2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <__vector_9+0x3c>
	}
	else
	{
		spindle_ramp_counter--;
     2c4:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <spindle_ramp_counter>
     2c8:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <spindle_ramp_counter+0x1>
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	80 93 1e 3e 	sts	0x3E1E, r24	; 0x803e1e <spindle_ramp_counter>
     2d2:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <spindle_ramp_counter+0x1>
	}
	
}
     2d6:	ff 91       	pop	r31
     2d8:	ef 91       	pop	r30
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <__vector_13>:

//interrupt for TCB0 - toggle pin
ISR (TCB0_INT_vect)
{
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	8f 93       	push	r24
	TCB0.INTFLAGS = TCB_CAPT_bm;  //Clear the interrupt flag 
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <_ZL27spindle_clock_divider_array+0x7f75b6>
	STEP_FEED_PORT.OUTTGL = STEP_FEED_MASK;  //Toggle step GPIO 
     2fa:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZL27spindle_clock_divider_array+0x7f6fb7>
	
	//decrement ramp up counter
	if (feed_ramp_counter > 0)
     2fe:	80 91 1c 3e 	lds	r24, 0x3E1C	; 0x803e1c <feed_ramp_counter>
     302:	88 23       	and	r24, r24
     304:	29 f0       	breq	.+10     	; 0x310 <__vector_13+0x28>
	{
		feed_ramp_counter--;
     306:	80 91 1c 3e 	lds	r24, 0x3E1C	; 0x803e1c <feed_ramp_counter>
     30a:	81 50       	subi	r24, 0x01	; 1
     30c:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <feed_ramp_counter>
	}
}
     310:	8f 91       	pop	r24
     312:	0f 90       	pop	r0
     314:	0f be       	out	0x3f, r0	; 63
     316:	0f 90       	pop	r0
     318:	1f 90       	pop	r1
     31a:	18 95       	reti

0000031c <__vector_3>:

//setup interrupt for changes on enable pins
ISR (PORTA_PORT_vect)
{
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	8f 93       	push	r24
     328:	9f 93       	push	r25
     32a:	ef 93       	push	r30
     32c:	ff 93       	push	r31
	SPINDLE_ENABLE_SWITCH_PORT.INTFLAGS = PORT_INT_gm; //clear interrupt
     32e:	e0 e0       	ldi	r30, 0x00	; 0
     330:	f4 e0       	ldi	r31, 0x04	; 4
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	81 87       	std	Z+9, r24	; 0x09
	//read pins and update flags
	dir_spindle = ((SPINDLE_DIRECTION_SWITCH_PORT.IN & SPINDLE_DIRECTION_SWITCH_MASK) >> SPINDLE_DIRECTION_SWITCH_PIN_POSITION);
     336:	80 85       	ldd	r24, Z+8	; 0x08
     338:	88 1f       	adc	r24, r24
     33a:	88 27       	eor	r24, r24
     33c:	88 1f       	adc	r24, r24
     33e:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <dir_spindle>
	run_spindle = ((SPINDLE_ENABLE_SWITCH_PORT.IN & SPINDLE_ENABLE_SWITCH_MASK) >> SPINDLE_ENABLE_SWITCH_PIN_POSITION) | dir_spindle;			
     342:	80 85       	ldd	r24, Z+8	; 0x08
     344:	80 74       	andi	r24, 0x40	; 64
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	08 2e       	mov	r0, r24
     34a:	89 2f       	mov	r24, r25
     34c:	00 0c       	add	r0, r0
     34e:	88 1f       	adc	r24, r24
     350:	99 0b       	sbc	r25, r25
     352:	00 0c       	add	r0, r0
     354:	88 1f       	adc	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	90 91 23 3e 	lds	r25, 0x3E23	; 0x803e23 <dir_spindle>
     35c:	89 2b       	or	r24, r25
     35e:	80 93 24 3e 	sts	0x3E24, r24	; 0x803e24 <run_spindle>
	run_feed = ((FEED_DIRECTION_SWITCH_PORT.IN & FEED_DIRECTION_SWITCH_MASK) >> FEED_DIRECTION_SWITCH_PIN_POSITION);
     362:	80 85       	ldd	r24, Z+8	; 0x08
     364:	80 71       	andi	r24, 0x10	; 16
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	95 95       	asr	r25
     36a:	87 95       	ror	r24
     36c:	95 95       	asr	r25
     36e:	87 95       	ror	r24
     370:	95 95       	asr	r25
     372:	87 95       	ror	r24
     374:	95 95       	asr	r25
     376:	87 95       	ror	r24
     378:	80 93 22 3e 	sts	0x3E22, r24	; 0x803e22 <run_feed>
}
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	0f 90       	pop	r0
     38a:	1f 90       	pop	r1
     38c:	18 95       	reti

0000038e <__vector_4>:

//setup interrupt for changes on enable pins
ISR (PORTB_PORT_vect)
{
     38e:	1f 92       	push	r1
     390:	0f 92       	push	r0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	0f 92       	push	r0
     396:	11 24       	eor	r1, r1
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	ef 93       	push	r30
     39e:	ff 93       	push	r31
	FEED_ENABLE_SWITCH_PORT.INTFLAGS = PORT_INT_gm; //clear interrupt
     3a0:	e0 e2       	ldi	r30, 0x20	; 32
     3a2:	f4 e0       	ldi	r31, 0x04	; 4
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	81 87       	std	Z+9, r24	; 0x09
	run_feed = ((FEED_ENABLE_SWITCH_PORT.IN & FEED_ENABLE_SWITCH_MASK) >> FEED_ENABLE_SWITCH_PIN_POSITION); //read pins
     3a8:	80 85       	ldd	r24, Z+8	; 0x08
     3aa:	84 70       	andi	r24, 0x04	; 4
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	95 95       	asr	r25
     3b0:	87 95       	ror	r24
     3b2:	95 95       	asr	r25
     3b4:	87 95       	ror	r24
     3b6:	80 93 22 3e 	sts	0x3E22, r24	; 0x803e22 <run_feed>
}	
     3ba:	ff 91       	pop	r31
     3bc:	ef 91       	pop	r30
     3be:	9f 91       	pop	r25
     3c0:	8f 91       	pop	r24
     3c2:	0f 90       	pop	r0
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <_Z14cpu_clock_initv>:
}


//setup the CPU full 20MHz
void cpu_clock_init(void) {
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, 0);
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	88 ed       	ldi	r24, 0xD8	; 216
     3d0:	84 bf       	out	0x34, r24	; 52
     3d2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_ZL27spindle_clock_divider_array+0x7f6bd1>
     3d6:	08 95       	ret

000003d8 <_Z8init_ADCv>:
//Setup ADC
void init_ADC()
{
	//TINY - setup ADC
	//VREF - setup voltage reference to 4.3V
	VREF.CTRLA = VREF_ADC0REFSEL_4V34_gc;
     3d8:	e0 ea       	ldi	r30, 0xA0	; 160
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 e3       	ldi	r24, 0x30	; 48
     3de:	80 83       	st	Z, r24
	//VREF - enable ADC ref
	VREF.CTRLB |= VREF_ADC0REFEN_bm;
     3e0:	81 81       	ldd	r24, Z+1	; 0x01
     3e2:	82 60       	ori	r24, 0x02	; 2
     3e4:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select resolution 8bit
	ADC0.CTRLA = ADC_RESSEL_8BIT_gc;
     3e6:	e0 e0       	ldi	r30, 0x00	; 0
     3e8:	f6 e0       	ldi	r31, 0x06	; 6
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	80 83       	st	Z, r24
	//ADC - number of convertions accumulated per measurement
	ADC0.CTRLB = ADC_SAMPNUM_ACC8_gc;
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select reference
	ADC0.CTRLC = ADC_REFSEL_INTREF_gc;
     3f2:	12 82       	std	Z+2, r1	; 0x02
	//ADC - sampling rate pre-scaler ~1.25MHz
	ADC0.CTRLC = ADC_PRESC_DIV16_gc;
     3f4:	82 83       	std	Z+2, r24	; 0x02
	//ADC - initial input PA3 / AIN3
	ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;
     3f6:	86 83       	std	Z+6, r24	; 0x06
	//ADC - enable start event (start measuring on enable)
	ADC0.EVCTRL |= ADC_STARTEI_bm;
     3f8:	81 85       	ldd	r24, Z+9	; 0x09
     3fa:	81 60       	ori	r24, 0x01	; 1
     3fc:	81 87       	std	Z+9, r24	; 0x09
	//ADC - enable ADC (ready for measurement trigger)
	ADC0.CTRLA |= ADC_ENABLE_bm;
     3fe:	80 81       	ld	r24, Z
     400:	81 60       	ori	r24, 0x01	; 1
     402:	80 83       	st	Z, r24
     404:	08 95       	ret

00000406 <_Z11init_timersv>:
//setup - Counter A & B
void init_timers()
{
	//TCA0 - setup 8bit
	//enable split mode on TCA0 to allow signal to get to pin C3
	TCA0.SINGLE.CTRLD = TCA_SINGLE_SPLITM_bm;
     406:	e0 e0       	ldi	r30, 0x00	; 0
     408:	fa e0       	ldi	r31, 0x0A	; 10
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	93 83       	std	Z+3, r25	; 0x03
	TCA0.SPLIT.HPER = 255; //longest wait for given clock
     40e:	8f ef       	ldi	r24, 0xFF	; 255
     410:	87 a3       	std	Z+39, r24	; 0x27
	TCA0.SPLIT.HCMP0 = 128;
     412:	80 e8       	ldi	r24, 0x80	; 128
     414:	81 a7       	std	Z+41, r24	; 0x29
	TCA0.SPLIT.HCNT = 0; 
     416:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SPLIT.DBGCTRL |= TCA_SPLIT_DBGRUN_bm;
     41c:	86 85       	ldd	r24, Z+14	; 0x0e
     41e:	81 60       	ori	r24, 0x01	; 1
     420:	86 87       	std	Z+14, r24	; 0x0e
	
	//scale main clock - default
	spindle_clock_divider = 5;
     422:	85 e0       	ldi	r24, 0x05	; 5
     424:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <spindle_clock_divider>
	TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     428:	a0 91 19 3e 	lds	r26, 0x3E19	; 0x803e19 <spindle_clock_divider>
     42c:	20 81       	ld	r18, Z
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	a4 57       	subi	r26, 0x74	; 116
     432:	bb 46       	sbci	r27, 0x6B	; 107
     434:	8c 91       	ld	r24, X
     436:	82 2b       	or	r24, r18
     438:	80 83       	st	Z, r24
	
	//TCB0 - setup 16bit
	TCB0.CCMP = 0; //set pulse length - high 
     43a:	e0 e4       	ldi	r30, 0x40	; 64
     43c:	fa e0       	ldi	r31, 0x0A	; 10
     43e:	14 86       	std	Z+12, r1	; 0x0c
     440:	15 86       	std	Z+13, r1	; 0x0d

	//set 8bit PWM mode - this connects it to its pin PA5 (or alternate)
	TCB0.CTRLA = 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
				| 0 << TCB_SYNCUPD_bp /* Synchronize Update: enabled */
				| TCB_CLKSEL_CLKDIV1_gc  /* use MAIN as clock source */
				| 0 << TCB_ENABLE_bp;   /* Enable: disabled */
     442:	10 82       	st	Z, r1

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
				| 0 << TCB_CCMPINIT_bp /* Pin Initial State: enabled, used for input operations */
				| 0 << TCB_CCMPEN_bp   /* Pin Output Enable: enabled */
				| TCB_CNTMODE_INT_gc; /* Periodic Interrupt */
     444:	11 82       	std	Z+1, r1	; 0x01
	
	TCB0.DBGCTRL |= TCB_DBGRUN_bm;
     446:	80 85       	ldd	r24, Z+8	; 0x08
     448:	81 60       	ori	r24, 0x01	; 1
     44a:	80 87       	std	Z+8, r24	; 0x08
	
	TCB0.INTCTRL = TCB_CAPT_bm; //enable interrupt for clocking pin
     44c:	95 83       	std	Z+5, r25	; 0x05
     44e:	08 95       	ret

00000450 <_Z7get_adch>:

//read ADC value
uint16_t get_adc(uint8_t sel_pin)
{
	//wait for current measurement to finish
	while((ADC0.COMMAND & ADC_STCONV_bm) == 1){}
     450:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <_ZL27spindle_clock_divider_array+0x7f7178>
     454:	90 fd       	sbrc	r25, 0
     456:	fc cf       	rjmp	.-8      	; 0x450 <_Z7get_adch>
	//select input PA2 / AIN2
	ADC0.MUXPOS = sel_pin;
     458:	e0 e0       	ldi	r30, 0x00	; 0
     45a:	f6 e0       	ldi	r31, 0x06	; 6
     45c:	86 83       	std	Z+6, r24	; 0x06
	//trigger reading
	ADC0.COMMAND |= ADC_STCONV_bm;
     45e:	80 85       	ldd	r24, Z+8	; 0x08
     460:	81 60       	ori	r24, 0x01	; 1
     462:	80 87       	std	Z+8, r24	; 0x08
	//wait while reading taken
	while((ADC0.COMMAND & ADC_STCONV_bm) == 1){}
     464:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <_ZL27spindle_clock_divider_array+0x7f7178>
     468:	80 fd       	sbrc	r24, 0
     46a:	fc cf       	rjmp	.-8      	; 0x464 <_Z7get_adch+0x14>
	//process result
	uint8_t result = uint8_t(ADC0.RES/8); //divide by number of samples accumulated
     46c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <_ZL27spindle_clock_divider_array+0x7f7180>
     470:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <_ZL27spindle_clock_divider_array+0x7f7181>
     474:	96 95       	lsr	r25
     476:	87 95       	ror	r24
     478:	96 95       	lsr	r25
     47a:	87 95       	ror	r24
     47c:	96 95       	lsr	r25
     47e:	87 95       	ror	r24
	return result;
}
     480:	99 27       	eor	r25, r25
     482:	08 95       	ret

00000484 <_Z7rpm_outj>:

//update LED rpm from ADC
uint16_t rpm_out(uint16_t per_size)
{
     484:	cf 92       	push	r12
     486:	df 92       	push	r13
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
	
	uint16_t out_number = uint16_t(((float)CPU_SPEED / ((float)spindle_clock_divider_array[spindle_clock_divider]*float(per_size)*(float)SPINDLE_STEPS)));
     492:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	e0 57       	subi	r30, 0x70	; 112
     49e:	fb 46       	sbci	r31, 0x6B	; 107
     4a0:	60 81       	ld	r22, Z
     4a2:	71 81       	ldd	r23, Z+1	; 0x01
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	b1 d6       	rcall	.+3426   	; 0x120c <__floatunsisf>
     4aa:	6b 01       	movw	r12, r22
     4ac:	7c 01       	movw	r14, r24
     4ae:	be 01       	movw	r22, r28
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	ab d6       	rcall	.+3414   	; 0x120c <__floatunsisf>
     4b6:	9b 01       	movw	r18, r22
     4b8:	ac 01       	movw	r20, r24
     4ba:	c7 01       	movw	r24, r14
     4bc:	b6 01       	movw	r22, r12
     4be:	39 d7       	rcall	.+3698   	; 0x1332 <__mulsf3>
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	48 ec       	ldi	r20, 0xC8	; 200
     4c6:	54 e4       	ldi	r21, 0x44	; 68
     4c8:	34 d7       	rcall	.+3688   	; 0x1332 <__mulsf3>
     4ca:	9b 01       	movw	r18, r22
     4cc:	ac 01       	movw	r20, r24
     4ce:	68 e1       	ldi	r22, 0x18	; 24
     4d0:	7d e0       	ldi	r23, 0x0D	; 13
     4d2:	8f e8       	ldi	r24, 0x8F	; 143
     4d4:	9e e4       	ldi	r25, 0x4E	; 78
     4d6:	f2 d5       	rcall	.+3044   	; 0x10bc <__divsf3>
     4d8:	6a d6       	rcall	.+3284   	; 0x11ae <__fixunssfsi>
	
	return out_number;
	
}
     4da:	cb 01       	movw	r24, r22
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	cf 90       	pop	r12
     4e8:	08 95       	ret

000004ea <_Z15ramp_spindle_upv>:


void ramp_spindle_up()
{
	//ramp the frequency
	for (uint8_t n = 255; n >= analogue_value; n--)
     4ea:	2f ef       	ldi	r18, 0xFF	; 255
     4ec:	80 91 25 3e 	lds	r24, 0x3E25	; 0x803e25 <analogue_value>
     4f0:	28 17       	cp	r18, r24
     4f2:	70 f1       	brcs	.+92     	; 0x550 <_Z15ramp_spindle_upv+0x66>
	{
		TCA0.SPLIT.HPER = n;
     4f4:	e0 e0       	ldi	r30, 0x00	; 0
     4f6:	fa e0       	ldi	r31, 0x0A	; 10
     4f8:	27 a3       	std	Z+39, r18	; 0x27
		TCA0.SPLIT.HCMP0 = n/2; //HPER divide by 2 ~50% duty cycle
     4fa:	82 2f       	mov	r24, r18
     4fc:	86 95       	lsr	r24
     4fe:	81 a7       	std	Z+41, r24	; 0x29
		//calculate current rpm
		//calculate next rpm
		//calculate difference
		//calculate steps to match required acceleration rpm/second 
		
		spindle_ramp_counter = ramp_loops;
     500:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <ramp_loops>
     504:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <ramp_loops+0x1>
     508:	80 93 1e 3e 	sts	0x3E1E, r24	; 0x803e1e <spindle_ramp_counter>
     50c:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <spindle_ramp_counter+0x1>
		
		TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm; //enable interrupt flag
     510:	82 85       	ldd	r24, Z+10	; 0x0a
     512:	82 60       	ori	r24, 0x02	; 2
     514:	82 87       	std	Z+10, r24	; 0x0a
		
		while (spindle_ramp_counter != 0 && run_spindle == 1)
     516:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <spindle_ramp_counter>
     51a:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <spindle_ramp_counter+0x1>
     51e:	89 2b       	or	r24, r25
     520:	31 f0       	breq	.+12     	; 0x52e <_Z15ramp_spindle_upv+0x44>
     522:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	21 f0       	breq	.+8      	; 0x532 <_Z15ramp_spindle_upv+0x48>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	03 c0       	rjmp	.+6      	; 0x534 <_Z15ramp_spindle_upv+0x4a>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	01 c0       	rjmp	.+2      	; 0x534 <_Z15ramp_spindle_upv+0x4a>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	81 11       	cpse	r24, r1
     536:	ef cf       	rjmp	.-34     	; 0x516 <_Z15ramp_spindle_upv+0x2c>
			//hold here until interrupt loop finished
			//delay equal to 
		}
		
		//if ramp up canceled then exit and disable
		if (run_spindle == 0)
     538:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     53c:	81 11       	cpse	r24, r1
     53e:	06 c0       	rjmp	.+12     	; 0x54c <_Z15ramp_spindle_upv+0x62>
		{
			//disable spindle
			SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_MASK;
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6fb6>
			spindle_running = 0;
     546:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <spindle_running>

			//exit ramp up
			return;
     54a:	08 95       	ret


void ramp_spindle_up()
{
	//ramp the frequency
	for (uint8_t n = 255; n >= analogue_value; n--)
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	ce cf       	rjmp	.-100    	; 0x4ec <_Z15ramp_spindle_upv+0x2>
     550:	08 95       	ret

00000552 <_Z17ramp_spindle_downv>:


void ramp_spindle_down()
{
	//ramp the frequency
	for (uint8_t n = analogue_value; n <= 92; n++)
     552:	20 91 25 3e 	lds	r18, 0x3E25	; 0x803e25 <analogue_value>
     556:	2d 35       	cpi	r18, 0x5D	; 93
     558:	f0 f4       	brcc	.+60     	; 0x596 <_Z17ramp_spindle_downv+0x44>
	{
		TCA0.SPLIT.HPER = n;
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	fa e0       	ldi	r31, 0x0A	; 10
     55e:	27 a3       	std	Z+39, r18	; 0x27
		TCA0.SPLIT.HCMP0 = n/2; //HPER divide by 2 ~50% duty cycle
     560:	82 2f       	mov	r24, r18
     562:	86 95       	lsr	r24
     564:	81 a7       	std	Z+41, r24	; 0x29
		
		spindle_ramp_counter = ramp_loops;
     566:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <ramp_loops>
     56a:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <ramp_loops+0x1>
     56e:	80 93 1e 3e 	sts	0x3E1E, r24	; 0x803e1e <spindle_ramp_counter>
     572:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <spindle_ramp_counter+0x1>
		
		TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm; //enable interrupt flag
     576:	82 85       	ldd	r24, Z+10	; 0x0a
     578:	82 60       	ori	r24, 0x02	; 2
     57a:	82 87       	std	Z+10, r24	; 0x0a
		
		while (spindle_ramp_counter != 0)
     57c:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <spindle_ramp_counter>
     580:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <spindle_ramp_counter+0x1>
     584:	89 2b       	or	r24, r25
     586:	d1 f7       	brne	.-12     	; 0x57c <_Z17ramp_spindle_downv+0x2a>
		{
			//hold here until interrupt loop finished
		}

		TCA0.SPLIT.INTCTRL &= ~(TCA_SPLIT_HUNF_bm); //disable interrupt
     588:	e0 e0       	ldi	r30, 0x00	; 0
     58a:	fa e0       	ldi	r31, 0x0A	; 10
     58c:	82 85       	ldd	r24, Z+10	; 0x0a
     58e:	8d 7f       	andi	r24, 0xFD	; 253
     590:	82 87       	std	Z+10, r24	; 0x0a


void ramp_spindle_down()
{
	//ramp the frequency
	for (uint8_t n = analogue_value; n <= 92; n++)
     592:	2f 5f       	subi	r18, 0xFF	; 255
     594:	e0 cf       	rjmp	.-64     	; 0x556 <_Z17ramp_spindle_downv+0x4>
     596:	08 95       	ret

00000598 <_Z18syncronise_encoderv>:


void syncronise_encoder()
{
	//position lock the spindle
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_MASK;
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZL27spindle_clock_divider_array+0x7f6fb5>
	spindle_running = 1;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_running>
	
	//step the spindle to ensure that the encoder is aligned
	for (uint8_t i = 0; i <= 6; i++)
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	87 30       	cpi	r24, 0x07	; 7
     5a8:	70 f4       	brcc	.+28     	; 0x5c6 <_Z18syncronise_encoderv+0x2e>
	{
		STEP_SPINDLE_PORT.OUTTGL = STEP_SPINDLE_MASK;
     5aa:	98 e0       	ldi	r25, 0x08	; 8
     5ac:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <_ZL27spindle_clock_divider_array+0x7f6fb7>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b0:	2f e7       	ldi	r18, 0x7F	; 127
     5b2:	3a e1       	ldi	r19, 0x1A	; 26
     5b4:	96 e0       	ldi	r25, 0x06	; 6
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	90 40       	sbci	r25, 0x00	; 0
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <_Z18syncronise_encoderv+0x1e>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <_Z18syncronise_encoderv+0x28>
     5c0:	00 00       	nop
	//position lock the spindle
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_MASK;
	spindle_running = 1;
	
	//step the spindle to ensure that the encoder is aligned
	for (uint8_t i = 0; i <= 6; i++)
     5c2:	8f 5f       	subi	r24, 0xFF	; 255
     5c4:	f0 cf       	rjmp	.-32     	; 0x5a6 <_Z18syncronise_encoderv+0xe>
		STEP_SPINDLE_PORT.OUTTGL = STEP_SPINDLE_MASK;
		_delay_ms(MIN_SPINDLE_DRIVER_PULSE_DELAY);
	}
	
	//disable the spindle
	STEP_SPINDLE_PORT.OUTCLR = STEP_SPINDLE_MASK;
     5c6:	e0 e4       	ldi	r30, 0x40	; 64
     5c8:	f4 e0       	ldi	r31, 0x04	; 4
     5ca:	88 e0       	ldi	r24, 0x08	; 8
     5cc:	86 83       	std	Z+6, r24	; 0x06
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_MASK;
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	86 83       	std	Z+6, r24	; 0x06
	spindle_running = 0;
     5d2:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <spindle_running>
     5d6:	08 95       	ret

000005d8 <main>:

///////////////////////////////////////////////////////////////////////////////
///////////////////////// START of MAIN ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
int main(void)
{
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	26 97       	sbiw	r28, 0x06	; 6
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	de bf       	out	0x3e, r29	; 62

	//set outputs
	PORTMUX.CTRLC = PORTMUX_TCA03_ALTERNATE_gc; //TCA03 alt pin
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b2 e0       	ldi	r27, 0x02	; 2
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	12 96       	adiw	r26, 0x02	; 2
     5ee:	8c 93       	st	X, r24
     5f0:	12 97       	sbiw	r26, 0x02	; 2
	STEP_SPINDLE_PORT.OUTCLR = STEP_SPINDLE_MASK;
     5f2:	e0 e4       	ldi	r30, 0x40	; 64
     5f4:	f4 e0       	ldi	r31, 0x04	; 4
     5f6:	86 83       	std	Z+6, r24	; 0x06
	STEP_SPINDLE_PORT.DIRSET = STEP_SPINDLE_MASK;
     5f8:	81 83       	std	Z+1, r24	; 0x01
	
	PORTMUX.CTRLD = PORTMUX_TCB0_ALTERNATE_gc; //TCB0 alt pin
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	13 96       	adiw	r26, 0x03	; 3
     5fe:	8c 93       	st	X, r24
	STEP_FEED_PORT.OUTCLR = STEP_FEED_MASK;
     600:	86 83       	std	Z+6, r24	; 0x06
	STEP_FEED_PORT.DIRSET = STEP_FEED_MASK;
     602:	81 83       	std	Z+1, r24	; 0x01
	
	SPINDLE_ENABLE_CONTROL = PORT_INVEN_bm;
     604:	80 e8       	ldi	r24, 0x80	; 128
     606:	81 8b       	std	Z+17, r24	; 0x11
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_MASK;
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	96 83       	std	Z+6, r25	; 0x06
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_MASK;
     60c:	91 83       	std	Z+1, r25	; 0x01

	FEED_ENABLE_CONTROL = PORT_INVEN_bm;
     60e:	82 8b       	std	Z+18, r24	; 0x12
	FEED_ENABLE_PORT.OUTCLR = FEED_ENABLE_MASK;
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	86 83       	std	Z+6, r24	; 0x06
	FEED_ENABLE_PORT.DIRSET = FEED_ENABLE_MASK;
     614:	81 83       	std	Z+1, r24	; 0x01
	
	//set input, pull-ups on pins, interrupt from pins, etc
	SPINDLE_ENABLE_SWITCH_CONTROL =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm |PORT_INVEN_bm;
     616:	e0 e0       	ldi	r30, 0x00	; 0
     618:	f4 e0       	ldi	r31, 0x04	; 4
     61a:	89 e8       	ldi	r24, 0x89	; 137
     61c:	86 8b       	std	Z+22, r24	; 0x16
	SPINDLE_DIRECTION_SWITCH_CONTROL =	PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     61e:	87 8b       	std	Z+23, r24	; 0x17
	FEED_ENABLE_SWITCH_CONTROL =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     620:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <_ZL27spindle_clock_divider_array+0x7f6fa2>
	FEED_DIRECTION_SWITCH_CONTROL =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     624:	84 8b       	std	Z+20, r24	; 0x14


	//set CPU to run at full speed (default is 3.3MHz)
	cpu_clock_init();
     626:	d2 de       	rcall	.-604    	; 0x3cc <_Z14cpu_clock_initv>
	
	//initialise 
	init_ADC();
     628:	d7 de       	rcall	.-594    	; 0x3d8 <_Z8init_ADCv>
	led.init();
     62a:	85 e0       	ldi	r24, 0x05	; 5
     62c:	9e e3       	ldi	r25, 0x3E	; 62
     62e:	ee d3       	rcall	.+2012   	; 0xe0c <_ZN6TM16374initEv>
	bcd_input.init();
     630:	84 e0       	ldi	r24, 0x04	; 4
     632:	9e e3       	ldi	r25, 0x3E	; 62
     634:	26 dd       	rcall	.-1460   	; 0x82 <_ZN11bcd_encoder4initEv>
	
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
     636:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	f1 f4       	brne	.+60     	; 0x67a <main+0xa2>
	{
		while ( (SPINDLE_ENABLE_SWITCH_PORT.IN & SPINDLE_ENABLE_SWITCH_MASK) >= 1 
     63e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZL27spindle_clock_divider_array+0x7f6f78>
		|| (SPINDLE_DIRECTION_SWITCH_PORT.IN & SPINDLE_DIRECTION_SWITCH_MASK) >= 1
		|| (FEED_ENABLE_SWITCH_PORT.IN & FEED_ENABLE_SWITCH_MASK) >= 1
		|| (FEED_DIRECTION_SWITCH_PORT.IN & FEED_DIRECTION_SWITCH_MASK) >= 1 )
     642:	86 fd       	sbrc	r24, 6
     644:	0e c0       	rjmp	.+28     	; 0x662 <main+0x8a>
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
	{
		while ( (SPINDLE_ENABLE_SWITCH_PORT.IN & SPINDLE_ENABLE_SWITCH_MASK) >= 1 
		|| (SPINDLE_DIRECTION_SWITCH_PORT.IN & SPINDLE_DIRECTION_SWITCH_MASK) >= 1
     646:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZL27spindle_clock_divider_array+0x7f6f78>
     64a:	88 23       	and	r24, r24
     64c:	64 f0       	brlt	.+24     	; 0x666 <main+0x8e>
		|| (FEED_ENABLE_SWITCH_PORT.IN & FEED_ENABLE_SWITCH_MASK) >= 1
     64e:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <_ZL27spindle_clock_divider_array+0x7f6f98>
     652:	82 fd       	sbrc	r24, 2
     654:	0a c0       	rjmp	.+20     	; 0x66a <main+0x92>
		|| (FEED_DIRECTION_SWITCH_PORT.IN & FEED_DIRECTION_SWITCH_MASK) >= 1 )
     656:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZL27spindle_clock_divider_array+0x7f6f78>
     65a:	84 ff       	sbrs	r24, 4
     65c:	08 c0       	rjmp	.+16     	; 0x66e <main+0x96>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	07 c0       	rjmp	.+14     	; 0x670 <main+0x98>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	05 c0       	rjmp	.+10     	; 0x670 <main+0x98>
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	03 c0       	rjmp	.+6      	; 0x670 <main+0x98>
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	01 c0       	rjmp	.+2      	; 0x670 <main+0x98>
     66e:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
	{
		while ( (SPINDLE_ENABLE_SWITCH_PORT.IN & SPINDLE_ENABLE_SWITCH_MASK) >= 1 
     670:	81 11       	cpse	r24, r1
     672:	e5 cf       	rjmp	.-54     	; 0x63e <main+0x66>
		
		{
				//wait
		}
		
		interlock = 0;
     674:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
		
		//align the spindle encoder
		syncronise_encoder();
     678:	8f df       	rcall	.-226    	; 0x598 <_Z18syncronise_encoderv>
	}
	
	//can start timers after all safe
	init_timers();
     67a:	c5 de       	rcall	.-630    	; 0x406 <_Z11init_timersv>
	
	//enable interrupts
	sei();
     67c:	78 94       	sei
		
		//////////////////////////////////////////////////////////////////////////
		//main loop
		
		//while waiting for startup
		while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     67e:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     682:	81 11       	cpse	r24, r1
     684:	0a c0       	rjmp	.+20     	; 0x69a <main+0xc2>
     686:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     68a:	81 11       	cpse	r24, r1
     68c:	08 c0       	rjmp	.+16     	; 0x69e <main+0xc6>
     68e:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     692:	88 23       	and	r24, r24
     694:	31 f0       	breq	.+12     	; 0x6a2 <main+0xca>
     696:	10 e0       	ldi	r17, 0x00	; 0
     698:	05 c0       	rjmp	.+10     	; 0x6a4 <main+0xcc>
     69a:	10 e0       	ldi	r17, 0x00	; 0
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <main+0xcc>
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <main+0xcc>
     6a2:	11 e0       	ldi	r17, 0x01	; 1
     6a4:	11 23       	and	r17, r17
     6a6:	09 f4       	brne	.+2      	; 0x6aa <main+0xd2>
     6a8:	21 c1       	rjmp	.+578    	; 0x8ec <main+0x314>
		{
			//disable timers
			TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;
     6aa:	e0 e0       	ldi	r30, 0x00	; 0
     6ac:	fa e0       	ldi	r31, 0x0A	; 10
     6ae:	80 81       	ld	r24, Z
     6b0:	8e 7f       	andi	r24, 0xFE	; 254
     6b2:	80 83       	st	Z, r24
			TCB0.CTRLA &= ~TCB_ENABLE_bm;
     6b4:	a0 e4       	ldi	r26, 0x40	; 64
     6b6:	ba e0       	ldi	r27, 0x0A	; 10
     6b8:	8c 91       	ld	r24, X
     6ba:	8e 7f       	andi	r24, 0xFE	; 254
     6bc:	8c 93       	st	X, r24
			
			//scale main clock - default
			spindle_clock_divider = BINS-1; //div_max
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <spindle_clock_divider>
			TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     6c4:	a0 91 19 3e 	lds	r26, 0x3E19	; 0x803e19 <spindle_clock_divider>
     6c8:	90 81       	ld	r25, Z
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	a4 57       	subi	r26, 0x74	; 116
     6ce:	bb 46       	sbci	r27, 0x6B	; 107
     6d0:	8c 91       	ld	r24, X
     6d2:	89 2b       	or	r24, r25
     6d4:	80 83       	st	Z, r24
			TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm; //enable timer interrupt
     6d6:	80 e1       	ldi	r24, 0x10	; 16
     6d8:	81 83       	std	Z+1, r24	; 0x01
			//setup safe - lowest frequency
			TCA0.SPLIT.HPER = 255;
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	87 a3       	std	Z+39, r24	; 0x27
			TCA0.SPLIT.HCMP0 = 128;
     6de:	90 e8       	ldi	r25, 0x80	; 128
     6e0:	91 a7       	std	Z+41, r25	; 0x29
			
			//set the ramp counters to max
			spindle_ramp_counter = -1;
     6e2:	2f ef       	ldi	r18, 0xFF	; 255
     6e4:	3f ef       	ldi	r19, 0xFF	; 255
     6e6:	20 93 1e 3e 	sts	0x3E1E, r18	; 0x803e1e <spindle_ramp_counter>
     6ea:	30 93 1f 3e 	sts	0x3E1F, r19	; 0x803e1f <spindle_ramp_counter+0x1>
			feed_ramp_counter = -1;
     6ee:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <feed_ramp_counter>
			
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     6f2:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     6f6:	81 11       	cpse	r24, r1
     6f8:	0a c0       	rjmp	.+20     	; 0x70e <main+0x136>
     6fa:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     6fe:	81 11       	cpse	r24, r1
     700:	08 c0       	rjmp	.+16     	; 0x712 <main+0x13a>
     702:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     706:	88 23       	and	r24, r24
     708:	31 f0       	breq	.+12     	; 0x716 <main+0x13e>
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	05 c0       	rjmp	.+10     	; 0x718 <main+0x140>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	03 c0       	rjmp	.+6      	; 0x718 <main+0x140>
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	01 c0       	rjmp	.+2      	; 0x718 <main+0x140>
     716:	81 2f       	mov	r24, r17
     718:	88 23       	and	r24, r24
     71a:	09 f4       	brne	.+2      	; 0x71e <main+0x146>
     71c:	b0 cf       	rjmp	.-160    	; 0x67e <main+0xa6>
			{
				feed_rate = bcd_input.bcd_to_int(); //read BCD counter - 1/1000ths of a millimeter
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	9e e3       	ldi	r25, 0x3E	; 62
     722:	f6 dc       	rcall	.-1556   	; 0x110 <_ZN11bcd_encoder10bcd_to_intEv>
     724:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <feed_rate>
     728:	90 93 1b 3e 	sts	0x3E1B, r25	; 0x803e1b <feed_rate+0x1>
				analogue_value = (255 - get_adc(3)); //read potentiometer
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	90 de       	rcall	.-736    	; 0x450 <_Z7get_adch>
     730:	80 95       	com	r24
     732:	80 93 25 3e 	sts	0x3E25, r24	; 0x803e25 <analogue_value>
				
				//set analogue value based on divider
				analogue_value = (analogue_value / STANDARD_CONTROL_STEPS) + 1;
     736:	80 91 25 3e 	lds	r24, 0x3E25	; 0x803e25 <analogue_value>
     73a:	9b ea       	ldi	r25, 0xAB	; 171
     73c:	89 9f       	mul	r24, r25
     73e:	81 2d       	mov	r24, r1
     740:	11 24       	eor	r1, r1
     742:	86 95       	lsr	r24
     744:	86 95       	lsr	r24
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	80 93 25 3e 	sts	0x3E25, r24	; 0x803e25 <analogue_value>
				
				//calculate ideal RPM from analogue value
				if ((uint16_t)analogue_value < (((uint16_t)MAX_RPM - FINE_CONTROL_RPM) / 100))
     74c:	80 91 25 3e 	lds	r24, 0x3E25	; 0x803e25 <analogue_value>
     750:	8b 30       	cpi	r24, 0x0B	; 11
     752:	98 f4       	brcc	.+38     	; 0x77a <main+0x1a2>
				{
					spindle_speed = (uint16_t)((uint16_t)MAX_RPM - ((uint16_t)analogue_value * 100));
     754:	20 91 25 3e 	lds	r18, 0x3E25	; 0x803e25 <analogue_value>
     758:	80 eb       	ldi	r24, 0xB0	; 176
     75a:	94 e0       	ldi	r25, 0x04	; 4
     75c:	34 e6       	ldi	r19, 0x64	; 100
     75e:	23 9f       	mul	r18, r19
     760:	80 19       	sub	r24, r0
     762:	91 09       	sbc	r25, r1
     764:	11 24       	eor	r1, r1
     766:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <spindle_speed>
     76a:	90 93 21 3e 	sts	0x3E21, r25	; 0x803e21 <spindle_speed+0x1>
			//set the ramp counters to max
			spindle_ramp_counter = -1;
			feed_ramp_counter = -1;
			
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     76e:	00 e0       	ldi	r16, 0x00	; 0
     770:	ee 24       	eor	r14, r14
     772:	ea 94       	dec	r14
     774:	fe 2c       	mov	r15, r14
     776:	d1 2c       	mov	r13, r1
     778:	12 c0       	rjmp	.+36     	; 0x79e <main+0x1c6>
				{
					spindle_speed = (uint16_t)((uint16_t)MAX_RPM - ((uint16_t)analogue_value * 100));
				} 
				else
				{
					spindle_speed =  (uint16_t)(FINE_CONTROL_RPM - ((uint16_t)analogue_value - ((((uint16_t)MAX_RPM - FINE_CONTROL_RPM) / 100) + 1)) * FINE_CONTROL_STEPS);
     77a:	80 91 25 3e 	lds	r24, 0x3E25	; 0x803e25 <analogue_value>
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	9c 01       	movw	r18, r24
     782:	22 0f       	add	r18, r18
     784:	33 1f       	adc	r19, r19
     786:	82 0f       	add	r24, r18
     788:	93 1f       	adc	r25, r19
     78a:	28 e8       	ldi	r18, 0x88	; 136
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	a9 01       	movw	r20, r18
     790:	48 1b       	sub	r20, r24
     792:	59 0b       	sbc	r21, r25
     794:	40 93 20 3e 	sts	0x3E20, r20	; 0x803e20 <spindle_speed>
     798:	50 93 21 3e 	sts	0x3E21, r21	; 0x803e21 <spindle_speed+0x1>
     79c:	e8 cf       	rjmp	.-48     	; 0x76e <main+0x196>
				//calculate closest value clock settings to achieve requested / ideal rpm
				uint8_t temp_integer = 0;
				uint16_t temp_value = -1; //max value
						
				//calculate for each clock divider and keep the one that's closest to the desired rpm
				for (uint8_t n = 0; n < BINS; n++)
     79e:	04 30       	cpi	r16, 0x04	; 4
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <main+0x1cc>
     7a2:	5b c0       	rjmp	.+182    	; 0x85a <main+0x282>
				{
					//for each clock divider calculate the integer that gives rpm closest to requested
					uint8_t temp_div_integer = (uint8_t)((float)CPU_SPEED / ((float)spindle_clock_divider_array[n] * (float)spindle_speed * (float)SPINDLE_STEPS));
     7a4:	e0 2f       	mov	r30, r16
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	e0 57       	subi	r30, 0x70	; 112
     7ae:	fb 46       	sbci	r31, 0x6B	; 107
     7b0:	60 81       	ld	r22, Z
     7b2:	71 81       	ldd	r23, Z+1	; 0x01
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	29 d5       	rcall	.+2642   	; 0x120c <__floatunsisf>
     7ba:	4b 01       	movw	r8, r22
     7bc:	5c 01       	movw	r10, r24
     7be:	60 91 20 3e 	lds	r22, 0x3E20	; 0x803e20 <spindle_speed>
     7c2:	70 91 21 3e 	lds	r23, 0x3E21	; 0x803e21 <spindle_speed+0x1>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	20 d5       	rcall	.+2624   	; 0x120c <__floatunsisf>
     7cc:	a5 01       	movw	r20, r10
     7ce:	94 01       	movw	r18, r8
     7d0:	b0 d5       	rcall	.+2912   	; 0x1332 <__mulsf3>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	48 ec       	ldi	r20, 0xC8	; 200
     7d8:	54 e4       	ldi	r21, 0x44	; 68
     7da:	ab d5       	rcall	.+2902   	; 0x1332 <__mulsf3>
     7dc:	9b 01       	movw	r18, r22
     7de:	ac 01       	movw	r20, r24
     7e0:	68 e1       	ldi	r22, 0x18	; 24
     7e2:	7d e0       	ldi	r23, 0x0D	; 13
     7e4:	8f e8       	ldi	r24, 0x8F	; 143
     7e6:	9e e4       	ldi	r25, 0x4E	; 78
     7e8:	69 d4       	rcall	.+2258   	; 0x10bc <__divsf3>
     7ea:	e1 d4       	rcall	.+2498   	; 0x11ae <__fixunssfsi>
     7ec:	c6 2e       	mov	r12, r22
					//calculate the rpm values to allow calculation of the closest value
					int16_t temp_div_rpm = (int16_t)(((float)CPU_SPEED / ((float)spindle_clock_divider_array[n]*float(temp_div_integer)*(float)SPINDLE_STEPS)));
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0b d5       	rcall	.+2582   	; 0x120c <__floatunsisf>
     7f6:	a5 01       	movw	r20, r10
     7f8:	94 01       	movw	r18, r8
     7fa:	9b d5       	rcall	.+2870   	; 0x1332 <__mulsf3>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	48 ec       	ldi	r20, 0xC8	; 200
     802:	54 e4       	ldi	r21, 0x44	; 68
     804:	96 d5       	rcall	.+2860   	; 0x1332 <__mulsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	68 e1       	ldi	r22, 0x18	; 24
     80c:	7d e0       	ldi	r23, 0x0D	; 13
     80e:	8f e8       	ldi	r24, 0x8F	; 143
     810:	9e e4       	ldi	r25, 0x4E	; 78
     812:	54 d4       	rcall	.+2216   	; 0x10bc <__divsf3>
     814:	c5 d4       	rcall	.+2442   	; 0x11a0 <__fixsfsi>
					//compare values to current best value
					if ((uint16_t)abs((int16_t)spindle_speed - temp_div_rpm) < temp_value)
     816:	20 91 20 3e 	lds	r18, 0x3E20	; 0x803e20 <spindle_speed>
     81a:	30 91 21 3e 	lds	r19, 0x3E21	; 0x803e21 <spindle_speed+0x1>
     81e:	a9 01       	movw	r20, r18
     820:	46 1b       	sub	r20, r22
     822:	57 0b       	sbc	r21, r23
     824:	9a 01       	movw	r18, r20
     826:	22 f4       	brpl	.+8      	; 0x830 <main+0x258>
     828:	22 27       	eor	r18, r18
     82a:	33 27       	eor	r19, r19
     82c:	24 1b       	sub	r18, r20
     82e:	35 0b       	sbc	r19, r21
     830:	2e 15       	cp	r18, r14
     832:	3f 05       	cpc	r19, r15
     834:	80 f4       	brcc	.+32     	; 0x856 <main+0x27e>
					{
						temp_value = abs(spindle_speed - temp_div_rpm);
     836:	20 91 20 3e 	lds	r18, 0x3E20	; 0x803e20 <spindle_speed>
     83a:	30 91 21 3e 	lds	r19, 0x3E21	; 0x803e21 <spindle_speed+0x1>
     83e:	c9 01       	movw	r24, r18
     840:	86 1b       	sub	r24, r22
     842:	97 0b       	sbc	r25, r23
     844:	7c 01       	movw	r14, r24
     846:	22 f4       	brpl	.+8      	; 0x850 <main+0x278>
     848:	ee 24       	eor	r14, r14
     84a:	ff 24       	eor	r15, r15
     84c:	e8 1a       	sub	r14, r24
     84e:	f9 0a       	sbc	r15, r25
						temp_integer = temp_div_integer;
						spindle_clock_divider = n;
     850:	00 93 19 3e 	sts	0x3E19, r16	; 0x803e19 <spindle_clock_divider>
					int16_t temp_div_rpm = (int16_t)(((float)CPU_SPEED / ((float)spindle_clock_divider_array[n]*float(temp_div_integer)*(float)SPINDLE_STEPS)));
					//compare values to current best value
					if ((uint16_t)abs((int16_t)spindle_speed - temp_div_rpm) < temp_value)
					{
						temp_value = abs(spindle_speed - temp_div_rpm);
						temp_integer = temp_div_integer;
     854:	dc 2c       	mov	r13, r12
				//calculate closest value clock settings to achieve requested / ideal rpm
				uint8_t temp_integer = 0;
				uint16_t temp_value = -1; //max value
						
				//calculate for each clock divider and keep the one that's closest to the desired rpm
				for (uint8_t n = 0; n < BINS; n++)
     856:	0f 5f       	subi	r16, 0xFF	; 255
     858:	a2 cf       	rjmp	.-188    	; 0x79e <main+0x1c6>
						spindle_clock_divider = n;
					}
				}
				
				//update analogue value to nearest value for the selected clock divider
				analogue_value = temp_integer;
     85a:	d0 92 25 3e 	sts	0x3E25, r13	; 0x803e25 <analogue_value>
				
				ramp_loops = (uint16_t)(RAMP_ACCELERATION * ((float)CPU_SPEED / ((float)spindle_clock_divider_array[spindle_clock_divider] * analogue_value * MAX_RPM)));
     85e:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	e0 57       	subi	r30, 0x70	; 112
     86a:	fb 46       	sbci	r31, 0x6B	; 107
     86c:	60 81       	ld	r22, Z
     86e:	71 81       	ldd	r23, Z+1	; 0x01
     870:	00 91 25 3e 	lds	r16, 0x3E25	; 0x803e25 <analogue_value>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	c9 d4       	rcall	.+2450   	; 0x120c <__floatunsisf>
     87a:	6b 01       	movw	r12, r22
     87c:	7c 01       	movw	r14, r24
     87e:	60 2f       	mov	r22, r16
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	c4 d4       	rcall	.+2440   	; 0x1210 <__floatsisf>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	c7 01       	movw	r24, r14
     88e:	b6 01       	movw	r22, r12
     890:	50 d5       	rcall	.+2720   	; 0x1332 <__mulsf3>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	46 e9       	ldi	r20, 0x96	; 150
     898:	54 e4       	ldi	r21, 0x44	; 68
     89a:	4b d5       	rcall	.+2710   	; 0x1332 <__mulsf3>
     89c:	9b 01       	movw	r18, r22
     89e:	ac 01       	movw	r20, r24
     8a0:	68 e1       	ldi	r22, 0x18	; 24
     8a2:	7d e0       	ldi	r23, 0x0D	; 13
     8a4:	8f e8       	ldi	r24, 0x8F	; 143
     8a6:	9e e4       	ldi	r25, 0x4E	; 78
     8a8:	09 d4       	rcall	.+2066   	; 0x10bc <__divsf3>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e2       	ldi	r20, 0x20	; 32
     8b0:	51 e4       	ldi	r21, 0x41	; 65
     8b2:	3f d5       	rcall	.+2686   	; 0x1332 <__mulsf3>
     8b4:	7c d4       	rcall	.+2296   	; 0x11ae <__fixunssfsi>
     8b6:	60 93 01 3e 	sts	0x3E01, r22	; 0x803e01 <ramp_loops>
     8ba:	70 93 02 3e 	sts	0x3E02, r23	; 0x803e02 <ramp_loops+0x1>
				
				//update the clock divider.
				cli();
     8be:	f8 94       	cli
				TCA0.SPLIT.CTRLA = 0;
     8c0:	a0 e0       	ldi	r26, 0x00	; 0
     8c2:	ba e0       	ldi	r27, 0x0A	; 10
     8c4:	1c 92       	st	X, r1
				TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     8c6:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     8ca:	9c 91       	ld	r25, X
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	e4 57       	subi	r30, 0x74	; 116
     8d0:	fb 46       	sbci	r31, 0x6B	; 107
     8d2:	80 81       	ld	r24, Z
     8d4:	89 2b       	or	r24, r25
     8d6:	8c 93       	st	X, r24
				sei();
     8d8:	78 94       	sei
				
				
				led.send_number(rpm_out(analogue_value)); //sends the rpm
     8da:	80 91 25 3e 	lds	r24, 0x3E25	; 0x803e25 <analogue_value>
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	d1 dd       	rcall	.-1118   	; 0x484 <_Z7rpm_outj>
     8e2:	bc 01       	movw	r22, r24
     8e4:	85 e0       	ldi	r24, 0x05	; 5
     8e6:	9e e3       	ldi	r25, 0x3E	; 62
     8e8:	c6 d2       	rcall	.+1420   	; 0xe76 <_ZN6TM163711send_numberEj>
			//set the ramp counters to max
			spindle_ramp_counter = -1;
			feed_ramp_counter = -1;
			
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     8ea:	03 cf       	rjmp	.-506    	; 0x6f2 <main+0x11a>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//spindle only, allow reverse only when slow running
		while ( (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 0) 
     8ec:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
			 || (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 1 && spindle_speed <= 20) )
     8f0:	81 11       	cpse	r24, r1
     8f2:	0c c0       	rjmp	.+24     	; 0x90c <main+0x334>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//spindle only, allow reverse only when slow running
		while ( (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 0) 
     8f4:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	41 f4       	brne	.+16     	; 0x90c <main+0x334>
     8fc:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     900:	81 11       	cpse	r24, r1
     902:	04 c0       	rjmp	.+8      	; 0x90c <main+0x334>
     904:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <dir_spindle>
     908:	88 23       	and	r24, r24
     90a:	c1 f0       	breq	.+48     	; 0x93c <main+0x364>
			 || (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 1 && spindle_speed <= 20) )
     90c:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     910:	81 11       	cpse	r24, r1
     912:	17 c0       	rjmp	.+46     	; 0x942 <main+0x36a>
     914:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	a9 f4       	brne	.+42     	; 0x946 <main+0x36e>
     91c:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     920:	81 11       	cpse	r24, r1
     922:	13 c0       	rjmp	.+38     	; 0x94a <main+0x372>
     924:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <dir_spindle>
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	89 f4       	brne	.+34     	; 0x94e <main+0x376>
     92c:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <spindle_speed>
     930:	90 91 21 3e 	lds	r25, 0x3E21	; 0x803e21 <spindle_speed+0x1>
     934:	45 97       	sbiw	r24, 0x15	; 21
     936:	68 f0       	brcs	.+26     	; 0x952 <main+0x37a>
     938:	f1 2e       	mov	r15, r17
     93a:	0d c0       	rjmp	.+26     	; 0x956 <main+0x37e>
     93c:	ff 24       	eor	r15, r15
     93e:	f3 94       	inc	r15
     940:	0a c0       	rjmp	.+20     	; 0x956 <main+0x37e>
     942:	f1 2e       	mov	r15, r17
     944:	08 c0       	rjmp	.+16     	; 0x956 <main+0x37e>
     946:	f1 2e       	mov	r15, r17
     948:	06 c0       	rjmp	.+12     	; 0x956 <main+0x37e>
     94a:	f1 2e       	mov	r15, r17
     94c:	04 c0       	rjmp	.+8      	; 0x956 <main+0x37e>
     94e:	f1 2e       	mov	r15, r17
     950:	02 c0       	rjmp	.+4      	; 0x956 <main+0x37e>
     952:	ff 24       	eor	r15, r15
     954:	f3 94       	inc	r15
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//spindle only, allow reverse only when slow running
		while ( (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 0) 
     956:	ff 20       	and	r15, r15
     958:	09 f4       	brne	.+2      	; 0x95c <main+0x384>
     95a:	3e c0       	rjmp	.+124    	; 0x9d8 <main+0x400>
		{
			//_delay_ms(MIN_SPINDLE_DRIVER_PULSE_DELAY);
			//syncronise_encoder();
			
			//check for previous running
			if (spindle_running == 0)
     95c:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_running>
     960:	81 11       	cpse	r24, r1
     962:	12 c0       	rjmp	.+36     	; 0x988 <main+0x3b0>
			{				
				//enable spindle motor
				SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_MASK;
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZL27spindle_clock_divider_array+0x7f6fb5>
				spindle_running = 1;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_running>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     970:	83 ef       	ldi	r24, 0xF3	; 243
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <main+0x39c>
     978:	00 c0       	rjmp	.+0      	; 0x97a <main+0x3a2>
     97a:	00 00       	nop
				_delay_us(MIN_SPINDLE_DRIVER_PULSE_DELAY); //delay to allow init of driver

				//enable timers
				TCA0.SPLIT.CTRLA |= TCB_ENABLE_bm;
     97c:	e0 e0       	ldi	r30, 0x00	; 0
     97e:	fa e0       	ldi	r31, 0x0A	; 10
     980:	80 81       	ld	r24, Z
     982:	81 60       	ori	r24, 0x01	; 1
     984:	80 83       	st	Z, r24
				
				//ramp up
				ramp_spindle_up();	
     986:	b1 dd       	rcall	.-1182   	; 0x4ea <_Z15ramp_spindle_upv>
			}
					
			while (interlock == 0 && run_spindle == 1 && spindle_ramp_counter == 0 && run_feed == 0)
     988:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     98c:	81 11       	cpse	r24, r1
     98e:	10 c0       	rjmp	.+32     	; 0x9b0 <main+0x3d8>
     990:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	71 f4       	brne	.+28     	; 0x9b4 <main+0x3dc>
     998:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <spindle_ramp_counter>
     99c:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <spindle_ramp_counter+0x1>
     9a0:	89 2b       	or	r24, r25
     9a2:	51 f4       	brne	.+20     	; 0x9b8 <main+0x3e0>
     9a4:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     9a8:	88 23       	and	r24, r24
     9aa:	41 f0       	breq	.+16     	; 0x9bc <main+0x3e4>
     9ac:	81 2f       	mov	r24, r17
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <main+0x3e6>
     9b0:	81 2f       	mov	r24, r17
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <main+0x3e6>
     9b4:	81 2f       	mov	r24, r17
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <main+0x3e6>
     9b8:	81 2f       	mov	r24, r17
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <main+0x3e6>
     9bc:	8f 2d       	mov	r24, r15
     9be:	81 11       	cpse	r24, r1
     9c0:	e3 cf       	rjmp	.-58     	; 0x988 <main+0x3b0>
			{
				//hold here until interrupt
			}
			
			//if spindle off after interrupt, then ramp down the spindle
			if (run_spindle == 0)
     9c2:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     9c6:	81 11       	cpse	r24, r1
     9c8:	91 cf       	rjmp	.-222    	; 0x8ec <main+0x314>
			{
				//ramp speed down
				ramp_spindle_down();
     9ca:	c3 dd       	rcall	.-1146   	; 0x552 <_Z17ramp_spindle_downv>
				
				//disable spindle
				SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_MASK;
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6fb6>
				spindle_running = 0;
     9d2:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <spindle_running>
     9d6:	8a cf       	rjmp	.-236    	; 0x8ec <main+0x314>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//feed only
		while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     9d8:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     9dc:	81 11       	cpse	r24, r1
     9de:	0a c0       	rjmp	.+20     	; 0x9f4 <main+0x41c>
     9e0:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     9e4:	81 11       	cpse	r24, r1
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <main+0x420>
     9e8:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	31 f0       	breq	.+12     	; 0x9fc <main+0x424>
     9f0:	0f 2d       	mov	r16, r15
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <main+0x426>
     9f4:	0f 2d       	mov	r16, r15
     9f6:	03 c0       	rjmp	.+6      	; 0x9fe <main+0x426>
     9f8:	0f 2d       	mov	r16, r15
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <main+0x426>
     9fc:	01 e0       	ldi	r16, 0x01	; 1
     9fe:	00 23       	and	r16, r16
     a00:	a1 f1       	breq	.+104    	; 0xa6a <main+0x492>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a02:	9f e7       	ldi	r25, 0x7F	; 127
     a04:	ea e1       	ldi	r30, 0x1A	; 26
     a06:	f6 e0       	ldi	r31, 0x06	; 6
     a08:	91 50       	subi	r25, 0x01	; 1
     a0a:	e0 40       	sbci	r30, 0x00	; 0
     a0c:	f0 40       	sbci	r31, 0x00	; 0
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <main+0x430>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <main+0x43a>
     a12:	00 00       	nop
		{
			_delay_ms(MIN_SPINDLE_DRIVER_PULSE_DELAY);
			
			//set feed rate
			TCB0.CCMP = FEED_DEFAULT_PER; //set pulse length
     a14:	e0 e4       	ldi	r30, 0x40	; 64
     a16:	fa e0       	ldi	r31, 0x0A	; 10
     a18:	80 e2       	ldi	r24, 0x20	; 32
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	84 87       	std	Z+12, r24	; 0x0c
     a1e:	95 87       	std	Z+13, r25	; 0x0d
			
			//enable feed motor
			FEED_ENABLE_PORT.OUTSET = FEED_ENABLE_MASK;
     a20:	84 e0       	ldi	r24, 0x04	; 4
     a22:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZL27spindle_clock_divider_array+0x7f6fb5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a26:	83 ef       	ldi	r24, 0xF3	; 243
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <main+0x452>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <main+0x458>
     a30:	00 00       	nop
			_delay_us(MIN_SPINDLE_DRIVER_PULSE_DELAY); //delay for allow driver startup

			//enable timers
			TCB0.CTRLA |= TCB_ENABLE_bm;
     a32:	80 81       	ld	r24, Z
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 83       	st	Z, r24
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     a38:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     a3c:	81 11       	cpse	r24, r1
     a3e:	0a c0       	rjmp	.+20     	; 0xa54 <main+0x47c>
     a40:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     a44:	81 11       	cpse	r24, r1
     a46:	08 c0       	rjmp	.+16     	; 0xa58 <main+0x480>
     a48:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	31 f0       	breq	.+12     	; 0xa5c <main+0x484>
     a50:	8f 2d       	mov	r24, r15
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <main+0x486>
     a54:	8f 2d       	mov	r24, r15
     a56:	03 c0       	rjmp	.+6      	; 0xa5e <main+0x486>
     a58:	8f 2d       	mov	r24, r15
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <main+0x486>
     a5c:	80 2f       	mov	r24, r16
     a5e:	81 11       	cpse	r24, r1
     a60:	eb cf       	rjmp	.-42     	; 0xa38 <main+0x460>
			{
				//hold here until interrupt
			}
			
			//disable feed motor
			FEED_ENABLE_PORT.OUTCLR = FEED_ENABLE_MASK;
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6fb6>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//feed only
		while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     a68:	b7 cf       	rjmp	.-146    	; 0x9d8 <main+0x400>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//standard spindle with feed - feed rate number is arbitrary value
		//spindle must be started / running before entering this mode
		while (interlock == 0 && run_spindle == 1 && spindle_ramp_counter == 0 && run_feed == 1 && spindle_speed > 20)
     a6a:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     a6e:	81 11       	cpse	r24, r1
     a70:	16 c0       	rjmp	.+44     	; 0xa9e <main+0x4c6>
     a72:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	a1 f4       	brne	.+40     	; 0xaa2 <main+0x4ca>
     a7a:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <spindle_ramp_counter>
     a7e:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <spindle_ramp_counter+0x1>
     a82:	89 2b       	or	r24, r25
     a84:	81 f4       	brne	.+32     	; 0xaa6 <main+0x4ce>
     a86:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	71 f4       	brne	.+28     	; 0xaaa <main+0x4d2>
     a8e:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <spindle_speed>
     a92:	90 91 21 3e 	lds	r25, 0x3E21	; 0x803e21 <spindle_speed+0x1>
     a96:	45 97       	sbiw	r24, 0x15	; 21
     a98:	50 f4       	brcc	.+20     	; 0xaae <main+0x4d6>
     a9a:	10 2f       	mov	r17, r16
     a9c:	09 c0       	rjmp	.+18     	; 0xab0 <main+0x4d8>
     a9e:	10 2f       	mov	r17, r16
     aa0:	07 c0       	rjmp	.+14     	; 0xab0 <main+0x4d8>
     aa2:	10 2f       	mov	r17, r16
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <main+0x4d8>
     aa6:	10 2f       	mov	r17, r16
     aa8:	03 c0       	rjmp	.+6      	; 0xab0 <main+0x4d8>
     aaa:	10 2f       	mov	r17, r16
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <main+0x4d8>
     aae:	11 e0       	ldi	r17, 0x01	; 1
     ab0:	11 23       	and	r17, r17
     ab2:	09 f4       	brne	.+2      	; 0xab6 <main+0x4de>
     ab4:	48 c0       	rjmp	.+144    	; 0xb46 <main+0x56e>
		{
			//set feed rate
			TCB0.CCMP = FEED_DEFAULT_PER*20; //set clock turn over slower speed during cuts
     ab6:	e0 e4       	ldi	r30, 0x40	; 64
     ab8:	fa e0       	ldi	r31, 0x0A	; 10
     aba:	80 e8       	ldi	r24, 0x80	; 128
     abc:	9e e3       	ldi	r25, 0x3E	; 62
     abe:	84 87       	std	Z+12, r24	; 0x0c
     ac0:	95 87       	std	Z+13, r25	; 0x0d
			
			//enable feed timer
			TCB0.CTRLA |= TCB_ENABLE_bm; //enable clock	
     ac2:	80 81       	ld	r24, Z
     ac4:	81 60       	ori	r24, 0x01	; 1
     ac6:	80 83       	st	Z, r24
			
			//enable feed motor
			FEED_ENABLE_PORT.OUTSET = FEED_ENABLE_MASK;
     ac8:	84 e0       	ldi	r24, 0x04	; 4
     aca:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZL27spindle_clock_divider_array+0x7f6fb5>
     ace:	e3 ef       	ldi	r30, 0xF3	; 243
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <main+0x4fa>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <main+0x500>
     ad8:	00 00       	nop
			_delay_us(MIN_SPINDLE_DRIVER_PULSE_DELAY); //delay for allow driver startup
	
			
			while (interlock == 0 && run_spindle == 1 && spindle_ramp_counter == 0 && run_feed == 1 && spindle_speed > 20)
     ada:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     ade:	81 11       	cpse	r24, r1
     ae0:	16 c0       	rjmp	.+44     	; 0xb0e <main+0x536>
     ae2:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	a1 f4       	brne	.+40     	; 0xb12 <main+0x53a>
     aea:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <spindle_ramp_counter>
     aee:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <spindle_ramp_counter+0x1>
     af2:	89 2b       	or	r24, r25
     af4:	81 f4       	brne	.+32     	; 0xb16 <main+0x53e>
     af6:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	71 f4       	brne	.+28     	; 0xb1a <main+0x542>
     afe:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <spindle_speed>
     b02:	90 91 21 3e 	lds	r25, 0x3E21	; 0x803e21 <spindle_speed+0x1>
     b06:	45 97       	sbiw	r24, 0x15	; 21
     b08:	50 f4       	brcc	.+20     	; 0xb1e <main+0x546>
     b0a:	80 2f       	mov	r24, r16
     b0c:	09 c0       	rjmp	.+18     	; 0xb20 <main+0x548>
     b0e:	80 2f       	mov	r24, r16
     b10:	07 c0       	rjmp	.+14     	; 0xb20 <main+0x548>
     b12:	80 2f       	mov	r24, r16
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <main+0x548>
     b16:	80 2f       	mov	r24, r16
     b18:	03 c0       	rjmp	.+6      	; 0xb20 <main+0x548>
     b1a:	80 2f       	mov	r24, r16
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <main+0x548>
     b1e:	81 2f       	mov	r24, r17
     b20:	81 11       	cpse	r24, r1
     b22:	db cf       	rjmp	.-74     	; 0xada <main+0x502>
			{
				//hold here until interrupt
			}
			
			//disable feed motor
			FEED_ENABLE_PORT.OUTCLR = FEED_ENABLE_MASK;
     b24:	84 e0       	ldi	r24, 0x04	; 4
     b26:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6fb6>
			
			//if spindle off after interrupt, then ramp down the spindle
			if (run_spindle == 0)
     b2a:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     b2e:	81 11       	cpse	r24, r1
     b30:	9c cf       	rjmp	.-200    	; 0xa6a <main+0x492>
			{
				ramp_spindle_down();
     b32:	0f dd       	rcall	.-1506   	; 0x552 <_Z17ramp_spindle_downv>
				
				//disable spindle & feed
				SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_MASK;
     b34:	e0 e4       	ldi	r30, 0x40	; 64
     b36:	f4 e0       	ldi	r31, 0x04	; 4
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	86 83       	std	Z+6, r24	; 0x06
				FEED_ENABLE_PORT.OUTCLR = FEED_ENABLE_MASK;
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	86 83       	std	Z+6, r24	; 0x06
				spindle_running = 0;
     b40:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <spindle_running>
     b44:	92 cf       	rjmp	.-220    	; 0xa6a <main+0x492>
			}
		}
		
		//////////////////////////////////////////////////////////////////////////
		//Engaged spindle with feed / slow spindle
		while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     b46:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     b4a:	81 11       	cpse	r24, r1
     b4c:	10 c0       	rjmp	.+32     	; 0xb6e <main+0x596>
     b4e:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	71 f4       	brne	.+28     	; 0xb72 <main+0x59a>
     b56:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	61 f4       	brne	.+24     	; 0xb76 <main+0x59e>
     b5e:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <spindle_speed>
     b62:	90 91 21 3e 	lds	r25, 0x3E21	; 0x803e21 <spindle_speed+0x1>
     b66:	45 97       	sbiw	r24, 0x15	; 21
     b68:	40 f0       	brcs	.+16     	; 0xb7a <main+0x5a2>
     b6a:	01 2f       	mov	r16, r17
     b6c:	07 c0       	rjmp	.+14     	; 0xb7c <main+0x5a4>
     b6e:	01 2f       	mov	r16, r17
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <main+0x5a4>
     b72:	01 2f       	mov	r16, r17
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <main+0x5a4>
     b76:	01 2f       	mov	r16, r17
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <main+0x5a4>
     b7a:	01 e0       	ldi	r16, 0x01	; 1
     b7c:	00 23       	and	r16, r16
     b7e:	09 f4       	brne	.+2      	; 0xb82 <main+0x5aa>
     b80:	7e cd       	rjmp	.-1284   	; 0x67e <main+0xa6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b82:	ff e7       	ldi	r31, 0x7F	; 127
     b84:	2a e1       	ldi	r18, 0x1A	; 26
     b86:	36 e0       	ldi	r19, 0x06	; 6
     b88:	f1 50       	subi	r31, 0x01	; 1
     b8a:	20 40       	sbci	r18, 0x00	; 0
     b8c:	30 40       	sbci	r19, 0x00	; 0
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <main+0x5b0>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <main+0x5ba>
     b92:	00 00       	nop
		{
			_delay_ms(MIN_SPINDLE_DRIVER_PULSE_DELAY);
			
			//disable timers
			TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;
     b94:	e0 e0       	ldi	r30, 0x00	; 0
     b96:	fa e0       	ldi	r31, 0x0A	; 10
     b98:	80 81       	ld	r24, Z
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	80 83       	st	Z, r24
			TCB0.CTRLA &= ~TCB_ENABLE_bm;	
     b9e:	a0 e4       	ldi	r26, 0x40	; 64
     ba0:	ba e0       	ldi	r27, 0x0A	; 10
     ba2:	8c 91       	ld	r24, X
     ba4:	8e 7f       	andi	r24, 0xFE	; 254
     ba6:	8c 93       	st	X, r24
			TCA0.SPLIT.CTRLB = 0; //disable timer interrupt		
     ba8:	11 82       	std	Z+1, r1	; 0x01
			
			//calculate stepping ratio
			//convert feed_rate to the number of steps the spindle makes per step the feed makes
			float spindle_steps_per_feed_step = (float)SPINDLE_STEPS / ((float)feed_rate / FEED_BCD_DIVISOR / FEED_MM_PER_STEP);
     baa:	60 91 1a 3e 	lds	r22, 0x3E1A	; 0x803e1a <feed_rate>
     bae:	70 91 1b 3e 	lds	r23, 0x3E1B	; 0x803e1b <feed_rate+0x1>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	2a d3       	rcall	.+1620   	; 0x120c <__floatunsisf>
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4a e7       	ldi	r20, 0x7A	; 122
     bbe:	54 e4       	ldi	r21, 0x44	; 68
     bc0:	7d d2       	rcall	.+1274   	; 0x10bc <__divsf3>
     bc2:	24 ed       	ldi	r18, 0xD4	; 212
     bc4:	3f e7       	ldi	r19, 0x7F	; 127
     bc6:	46 e5       	ldi	r20, 0x56	; 86
     bc8:	59 e3       	ldi	r21, 0x39	; 57
     bca:	78 d2       	rcall	.+1264   	; 0x10bc <__divsf3>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	88 ec       	ldi	r24, 0xC8	; 200
     bd6:	94 e4       	ldi	r25, 0x44	; 68
     bd8:	71 d2       	rcall	.+1250   	; 0x10bc <__divsf3>
     bda:	6b 01       	movw	r12, r22
     bdc:	7c 01       	movw	r14, r24
			
			volatile float current_decimal = spindle_steps_per_feed_step;
     bde:	69 83       	std	Y+1, r22	; 0x01
     be0:	7a 83       	std	Y+2, r23	; 0x02
     be2:	8b 83       	std	Y+3, r24	; 0x03
     be4:	9c 83       	std	Y+4, r25	; 0x04
			volatile uint16_t current_spindle_steps = (uint16_t)spindle_steps_per_feed_step; 
     be6:	e3 d2       	rcall	.+1478   	; 0x11ae <__fixunssfsi>
     be8:	6d 83       	std	Y+5, r22	; 0x05
     bea:	7e 83       	std	Y+6, r23	; 0x06
			
			//enable spindle & feed motor
			SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_MASK;
     bec:	e0 e4       	ldi	r30, 0x40	; 64
     bee:	f4 e0       	ldi	r31, 0x04	; 4
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	85 83       	std	Z+5, r24	; 0x05
			spindle_running = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_running>
			FEED_ENABLE_PORT.OUTSET = FEED_ENABLE_MASK;
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bfe:	83 ef       	ldi	r24, 0xF3	; 243
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <main+0x62a>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <main+0x630>
     c08:	00 00       	nop
			_delay_us(MIN_SPINDLE_DRIVER_PULSE_DELAY); //delay for allow driver startup
			
			while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     c0a:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     c0e:	81 11       	cpse	r24, r1
     c10:	10 c0       	rjmp	.+32     	; 0xc32 <main+0x65a>
     c12:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <run_spindle>
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	71 f4       	brne	.+28     	; 0xc36 <main+0x65e>
     c1a:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <run_feed>
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	61 f4       	brne	.+24     	; 0xc3a <main+0x662>
     c22:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <spindle_speed>
     c26:	90 91 21 3e 	lds	r25, 0x3E21	; 0x803e21 <spindle_speed+0x1>
     c2a:	45 97       	sbiw	r24, 0x15	; 21
     c2c:	40 f0       	brcs	.+16     	; 0xc3e <main+0x666>
     c2e:	81 2f       	mov	r24, r17
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <main+0x668>
     c32:	81 2f       	mov	r24, r17
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <main+0x668>
     c36:	81 2f       	mov	r24, r17
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <main+0x668>
     c3a:	81 2f       	mov	r24, r17
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <main+0x668>
     c3e:	80 2f       	mov	r24, r16
     c40:	88 23       	and	r24, r24
     c42:	09 f4       	brne	.+2      	; 0xc46 <main+0x66e>
     c44:	55 c0       	rjmp	.+170    	; 0xcf0 <main+0x718>
			{
				//hold in here until interrupt
				//evaluate next step
				if ((current_decimal + spindle_steps_per_feed_step) > 1)
     c46:	29 81       	ldd	r18, Y+1	; 0x01
     c48:	3a 81       	ldd	r19, Y+2	; 0x02
     c4a:	4b 81       	ldd	r20, Y+3	; 0x03
     c4c:	5c 81       	ldd	r21, Y+4	; 0x04
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	c8 d1       	rcall	.+912    	; 0xfe4 <__addsf3>
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	65 d3       	rcall	.+1738   	; 0x1328 <__gesf2>
     c5e:	18 16       	cp	r1, r24
     c60:	c4 f4       	brge	.+48     	; 0xc92 <main+0x6ba>
				{
					current_decimal = current_decimal + spindle_steps_per_feed_step - current_spindle_steps;
     c62:	29 81       	ldd	r18, Y+1	; 0x01
     c64:	3a 81       	ldd	r19, Y+2	; 0x02
     c66:	4b 81       	ldd	r20, Y+3	; 0x03
     c68:	5c 81       	ldd	r21, Y+4	; 0x04
     c6a:	c7 01       	movw	r24, r14
     c6c:	b6 01       	movw	r22, r12
     c6e:	ba d1       	rcall	.+884    	; 0xfe4 <__addsf3>
     c70:	4b 01       	movw	r8, r22
     c72:	5c 01       	movw	r10, r24
     c74:	6d 81       	ldd	r22, Y+5	; 0x05
     c76:	7e 81       	ldd	r23, Y+6	; 0x06
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	c7 d2       	rcall	.+1422   	; 0x120c <__floatunsisf>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	c5 01       	movw	r24, r10
     c84:	b4 01       	movw	r22, r8
     c86:	ad d1       	rcall	.+858    	; 0xfe2 <__subsf3>
     c88:	69 83       	std	Y+1, r22	; 0x01
     c8a:	7a 83       	std	Y+2, r23	; 0x02
     c8c:	8b 83       	std	Y+3, r24	; 0x03
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	0b c0       	rjmp	.+22     	; 0xca8 <main+0x6d0>
				} 
				else
				{
					current_decimal = current_decimal + spindle_steps_per_feed_step;
     c92:	29 81       	ldd	r18, Y+1	; 0x01
     c94:	3a 81       	ldd	r19, Y+2	; 0x02
     c96:	4b 81       	ldd	r20, Y+3	; 0x03
     c98:	5c 81       	ldd	r21, Y+4	; 0x04
     c9a:	c7 01       	movw	r24, r14
     c9c:	b6 01       	movw	r22, r12
     c9e:	a2 d1       	rcall	.+836    	; 0xfe4 <__addsf3>
     ca0:	69 83       	std	Y+1, r22	; 0x01
     ca2:	7a 83       	std	Y+2, r23	; 0x02
     ca4:	8b 83       	std	Y+3, r24	; 0x03
     ca6:	9c 83       	std	Y+4, r25	; 0x04
				}
				
				//extract only the whole digits for spindle steps
				current_spindle_steps = (uint16_t)current_decimal;
     ca8:	69 81       	ldd	r22, Y+1	; 0x01
     caa:	7a 81       	ldd	r23, Y+2	; 0x02
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	9c 81       	ldd	r25, Y+4	; 0x04
     cb0:	7e d2       	rcall	.+1276   	; 0x11ae <__fixunssfsi>
     cb2:	6d 83       	std	Y+5, r22	; 0x05
     cb4:	7e 83       	std	Y+6, r23	; 0x06
				
				//loop to required number of spindle steps per feed step - this can be zero
				for (uint16_t i = current_spindle_steps; i > 0; i--)
     cb6:	8d 81       	ldd	r24, Y+5	; 0x05
     cb8:	9e 81       	ldd	r25, Y+6	; 0x06
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	79 f0       	breq	.+30     	; 0xcdc <main+0x704>
				{
					STEP_SPINDLE_PORT.OUTTGL = STEP_SPINDLE_MASK;  //Toggle step GPIO 
     cbe:	28 e0       	ldi	r18, 0x08	; 8
     cc0:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <_ZL27spindle_clock_divider_array+0x7f6fb7>
     cc4:	e3 ef       	ldi	r30, 0xF3	; 243
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <main+0x6f0>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <main+0x6f6>
     cce:	00 00       	nop
					_delay_us(MIN_SPINDLE_DRIVER_PULSE_DELAY); //delay
					
					if (run_spindle == 0)
     cd0:	20 91 24 3e 	lds	r18, 0x3E24	; 0x803e24 <run_spindle>
     cd4:	22 23       	and	r18, r18
     cd6:	11 f0       	breq	.+4      	; 0xcdc <main+0x704>
				
				//extract only the whole digits for spindle steps
				current_spindle_steps = (uint16_t)current_decimal;
				
				//loop to required number of spindle steps per feed step - this can be zero
				for (uint16_t i = current_spindle_steps; i > 0; i--)
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	ef cf       	rjmp	.-34     	; 0xcba <main+0x6e2>
					{
						break;
					}
				}
				
				STEP_FEED_PORT.OUTTGL = STEP_FEED_MASK;  //Toggle feed step 
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZL27spindle_clock_divider_array+0x7f6fb7>
     ce2:	83 ef       	ldi	r24, 0xF3	; 243
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <main+0x70e>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <main+0x714>
     cec:	00 00       	nop
     cee:	8d cf       	rjmp	.-230    	; 0xc0a <main+0x632>
				_delay_us(MIN_SPINDLE_DRIVER_PULSE_DELAY); //delay
			}
			
			//disable spindle & feed
			SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_MASK;
     cf0:	e0 e4       	ldi	r30, 0x40	; 64
     cf2:	f4 e0       	ldi	r31, 0x04	; 4
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	86 83       	std	Z+6, r24	; 0x06
			spindle_running = 0;
     cf8:	10 92 1d 3e 	sts	0x3E1D, r1	; 0x803e1d <spindle_running>
			FEED_ENABLE_PORT.OUTCLR = FEED_ENABLE_MASK;
     cfc:	84 e0       	ldi	r24, 0x04	; 4
     cfe:	86 83       	std	Z+6, r24	; 0x06
			}
		}
		
		//////////////////////////////////////////////////////////////////////////
		//Engaged spindle with feed / slow spindle
		while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     d00:	22 cf       	rjmp	.-444    	; 0xb46 <main+0x56e>

00000d02 <_GLOBAL__sub_I_ramp_loops>:
	
	//disable the spindle
	STEP_SPINDLE_PORT.OUTCLR = STEP_SPINDLE_MASK;
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_MASK;
	spindle_running = 0;
}
     d02:	6f ef       	ldi	r22, 0xFF	; 255
     d04:	7f ef       	ldi	r23, 0xFF	; 255
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	b8 da       	rcall	.-2704   	; 0x27c <_Z41__static_initialization_and_destruction_0ii>
     d0c:	08 95       	ret

00000d0e <_ZN6TM16375startEv>:
}

void TM1637::start()
{
	//set clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     d0e:	e0 e0       	ldi	r30, 0x00	; 0
     d10:	f4 e0       	ldi	r31, 0x04	; 4
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	85 83       	std	Z+5, r24	; 0x05
	//set data high
	tm1637_data_port.OUTSET = tm1637_data_pin;
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	95 83       	std	Z+5, r25	; 0x05
     d1a:	22 e4       	ldi	r18, 0x42	; 66
     d1c:	2a 95       	dec	r18
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <_ZN6TM16375startEv+0xe>
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <_ZN6TM16375startEv+0x14>
	//wait 5us
	_delay_us(10);
	
	//set data low
	tm1637_data_port.OUTCLR = tm1637_data_pin;
     d22:	96 83       	std	Z+6, r25	; 0x06
	//sel clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     d24:	86 83       	std	Z+6, r24	; 0x06
     d26:	82 e4       	ldi	r24, 0x42	; 66
     d28:	8a 95       	dec	r24
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <_ZN6TM16375startEv+0x1a>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <_ZN6TM16375startEv+0x20>
     d2e:	08 95       	ret

00000d30 <_ZN6TM16374stopEv>:


void TM1637::stop()
{
	//clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     d30:	e0 e0       	ldi	r30, 0x00	; 0
     d32:	f4 e0       	ldi	r31, 0x04	; 4
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	96 83       	std	Z+6, r25	; 0x06
	//data low
	tm1637_data_port.OUTCLR = tm1637_data_pin;
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	86 83       	std	Z+6, r24	; 0x06
     d3c:	22 e4       	ldi	r18, 0x42	; 66
     d3e:	2a 95       	dec	r18
     d40:	f1 f7       	brne	.-4      	; 0xd3e <_ZN6TM16374stopEv+0xe>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <_ZN6TM16374stopEv+0x14>
	//wait 5us
	_delay_us(10);
	
	//clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     d44:	95 83       	std	Z+5, r25	; 0x05
	//data high
	tm1637_data_port.OUTSET = tm1637_data_pin;
     d46:	85 83       	std	Z+5, r24	; 0x05
     d48:	82 e4       	ldi	r24, 0x42	; 66
     d4a:	8a 95       	dec	r24
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <_ZN6TM16374stopEv+0x1a>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <_ZN6TM16374stopEv+0x20>
     d50:	08 95       	ret

00000d52 <_ZN6TM16378data_outEh>:

uint8_t TM1637::data_out(uint8_t value)
{
	//going to ignore receiving the ACK bit
	
	for (uint8_t i = 0; i < 8; i++)
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	28 30       	cpi	r18, 0x08	; 8
     d56:	78 f5       	brcc	.+94     	; 0xdb6 <_ZN6TM16378data_outEh+0x64>
	{
		//clk low
		tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <_ZL27spindle_clock_divider_array+0x7f6f76>
     d5e:	82 e4       	ldi	r24, 0x42	; 66
     d60:	8a 95       	dec	r24
     d62:	f1 f7       	brne	.-4      	; 0xd60 <_ZN6TM16378data_outEh+0xe>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <_ZN6TM16378data_outEh+0x14>
		_delay_us(10);
		//set data to match bit value
		if ( ((value & (1<<i)) >> i) == 1)
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <_ZN6TM16378data_outEh+0x20>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <_ZN6TM16378data_outEh+0x1c>
     d76:	46 2f       	mov	r20, r22
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	84 23       	and	r24, r20
     d7c:	95 23       	and	r25, r21
     d7e:	02 2e       	mov	r0, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <_ZN6TM16378data_outEh+0x34>
     d82:	95 95       	asr	r25
     d84:	87 95       	ror	r24
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <_ZN6TM16378data_outEh+0x30>
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	21 f4       	brne	.+8      	; 0xd96 <_ZN6TM16378data_outEh+0x44>
		{
			tm1637_data_port.OUTSET = tm1637_data_pin;
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZL27spindle_clock_divider_array+0x7f6f75>
     d94:	03 c0       	rjmp	.+6      	; 0xd9c <_ZN6TM16378data_outEh+0x4a>
		} 
		else
		{	
			tm1637_data_port.OUTCLR = tm1637_data_pin;
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <_ZL27spindle_clock_divider_array+0x7f6f76>
     d9c:	92 e4       	ldi	r25, 0x42	; 66
     d9e:	9a 95       	dec	r25
     da0:	f1 f7       	brne	.-4      	; 0xd9e <_ZN6TM16378data_outEh+0x4c>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <_ZN6TM16378data_outEh+0x52>
		}
		_delay_us(10);
		//clk high
		tm1637_clk_port.OUTSET = tm1637_clk_pin;
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZL27spindle_clock_divider_array+0x7f6f75>
     daa:	e2 e4       	ldi	r30, 0x42	; 66
     dac:	ea 95       	dec	r30
     dae:	f1 f7       	brne	.-4      	; 0xdac <_ZN6TM16378data_outEh+0x5a>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <_ZN6TM16378data_outEh+0x60>

uint8_t TM1637::data_out(uint8_t value)
{
	//going to ignore receiving the ACK bit
	
	for (uint8_t i = 0; i < 8; i++)
     db2:	2f 5f       	subi	r18, 0xFF	; 255
     db4:	cf cf       	rjmp	.-98     	; 0xd54 <_ZN6TM16378data_outEh+0x2>
		tm1637_clk_port.OUTSET = tm1637_clk_pin;
		_delay_us(10);
	}
	
	//clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     db6:	e0 e0       	ldi	r30, 0x00	; 0
     db8:	f4 e0       	ldi	r31, 0x04	; 4
     dba:	84 e0       	ldi	r24, 0x04	; 4
     dbc:	86 83       	std	Z+6, r24	; 0x06
     dbe:	92 e4       	ldi	r25, 0x42	; 66
     dc0:	9a 95       	dec	r25
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <_ZN6TM16378data_outEh+0x6e>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <_ZN6TM16378data_outEh+0x74>
	_delay_us(10);
	
	//data input
	tm1637_data_port.DIRCLR = tm1637_data_pin;
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	92 83       	std	Z+2, r25	; 0x02
	
	//clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     dca:	85 83       	std	Z+5, r24	; 0x05
     dcc:	82 e4       	ldi	r24, 0x42	; 66
     dce:	8a 95       	dec	r24
     dd0:	f1 f7       	brne	.-4      	; 0xdce <_ZN6TM16378data_outEh+0x7c>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <_ZN6TM16378data_outEh+0x82>
	_delay_us(10);
	
	//wait for ACK
	uint8_t ack = (~tm1637_data_port.IN & tm1637_data_pin) == 0;
     dd4:	80 85       	ldd	r24, Z+8	; 0x08
     dd6:	86 95       	lsr	r24
     dd8:	81 70       	andi	r24, 0x01	; 1
	
	//data output
	tm1637_data_port.DIRSET = tm1637_data_pin;
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	e3 ef       	ldi	r30, 0xF3	; 243
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	31 97       	sbiw	r30, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <_ZN6TM16378data_outEh+0x8e>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <_ZN6TM16378data_outEh+0x94>
     de6:	00 00       	nop
	
	_delay_us(100);
	
	return ack;
}
     de8:	08 95       	ret

00000dea <_ZN6TM163717tm1637_brightnessEh>:


void TM1637::tm1637_brightness(uint8_t level)
{
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	8c 01       	movw	r16, r24
     df2:	c6 2f       	mov	r28, r22
	TM1637::start();
     df4:	8c df       	rcall	.-232    	; 0xd0e <_ZN6TM16375startEv>
	
	TM1637::data_out(0b10001000 | (0b00000111 & level));
     df6:	6c 2f       	mov	r22, r28
     df8:	67 70       	andi	r22, 0x07	; 7
     dfa:	68 68       	ori	r22, 0x88	; 136
     dfc:	c8 01       	movw	r24, r16
     dfe:	a9 df       	rcall	.-174    	; 0xd52 <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     e00:	c8 01       	movw	r24, r16
     e02:	96 df       	rcall	.-212    	; 0xd30 <_ZN6TM16374stopEv>
}
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <_ZN6TM16374initEv>:

void TM1637::init()
{
	//TINY - setup port A (1 = output)
	// 7 6 5 4 3 2 1 0
	tm1637_data_port.DIRSET = tm1637_data_pin;
     e0c:	e0 e0       	ldi	r30, 0x00	; 0
     e0e:	f4 e0       	ldi	r31, 0x04	; 4
     e10:	22 e0       	ldi	r18, 0x02	; 2
     e12:	21 83       	std	Z+1, r18	; 0x01
	tm1637_clk_port.DIRSET = tm1637_clk_pin;
     e14:	34 e0       	ldi	r19, 0x04	; 4
     e16:	31 83       	std	Z+1, r19	; 0x01
	
	//set pins high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     e18:	35 83       	std	Z+5, r19	; 0x05
	tm1637_data_port.OUTSET = tm1637_data_pin;
     e1a:	25 83       	std	Z+5, r18	; 0x05
	
	TM1637::tm1637_brightness(6);
     e1c:	66 e0       	ldi	r22, 0x06	; 6
     e1e:	e5 df       	rcall	.-54     	; 0xdea <_ZN6TM163717tm1637_brightnessEh>
     e20:	08 95       	ret

00000e22 <_ZN6TM163710send_charsEhhhh>:
	TM1637::stop();
}


void TM1637::send_chars(uint8_t a_digit, uint8_t b_digit, uint8_t c_digit, uint8_t d_digit)
{
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
     e30:	e6 2e       	mov	r14, r22
     e32:	f4 2e       	mov	r15, r20
     e34:	12 2f       	mov	r17, r18
	TM1637::start();
     e36:	6b df       	rcall	.-298    	; 0xd0e <_ZN6TM16375startEv>
	
	TM1637::data_out(0b01000000);
     e38:	60 e4       	ldi	r22, 0x40	; 64
     e3a:	ce 01       	movw	r24, r28
     e3c:	8a df       	rcall	.-236    	; 0xd52 <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     e3e:	ce 01       	movw	r24, r28
     e40:	77 df       	rcall	.-274    	; 0xd30 <_ZN6TM16374stopEv>
	
	
	TM1637::start();
     e42:	ce 01       	movw	r24, r28
     e44:	64 df       	rcall	.-312    	; 0xd0e <_ZN6TM16375startEv>
	
	TM1637::data_out(0b11000000);
     e46:	60 ec       	ldi	r22, 0xC0	; 192
     e48:	ce 01       	movw	r24, r28
     e4a:	83 df       	rcall	.-250    	; 0xd52 <_ZN6TM16378data_outEh>
	
	TM1637::data_out(a_digit);
     e4c:	6e 2d       	mov	r22, r14
     e4e:	ce 01       	movw	r24, r28
     e50:	80 df       	rcall	.-256    	; 0xd52 <_ZN6TM16378data_outEh>
	TM1637::data_out(b_digit);
     e52:	6f 2d       	mov	r22, r15
     e54:	ce 01       	movw	r24, r28
     e56:	7d df       	rcall	.-262    	; 0xd52 <_ZN6TM16378data_outEh>
	TM1637::data_out(c_digit);
     e58:	61 2f       	mov	r22, r17
     e5a:	ce 01       	movw	r24, r28
     e5c:	7a df       	rcall	.-268    	; 0xd52 <_ZN6TM16378data_outEh>
	TM1637::data_out(d_digit);
     e5e:	60 2f       	mov	r22, r16
     e60:	ce 01       	movw	r24, r28
     e62:	77 df       	rcall	.-274    	; 0xd52 <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     e64:	ce 01       	movw	r24, r28
     e66:	64 df       	rcall	.-312    	; 0xd30 <_ZN6TM16374stopEv>
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	08 95       	ret

00000e76 <_ZN6TM163711send_numberEj>:


void TM1637::send_number(uint16_t four_digit_number)
{
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	fc 01       	movw	r30, r24
     e7c:	ab 01       	movw	r20, r22
	if (four_digit_number > 999)
     e7e:	68 3e       	cpi	r22, 0xE8	; 232
     e80:	23 e0       	ldi	r18, 0x03	; 3
     e82:	72 07       	cpc	r23, r18
     e84:	58 f1       	brcs	.+86     	; 0xedc <_ZN6TM163711send_numberEj+0x66>
	{
		a = uint8_t(four_digit_number / 1000 % 10);
     e86:	9b 01       	movw	r18, r22
     e88:	36 95       	lsr	r19
     e8a:	27 95       	ror	r18
     e8c:	36 95       	lsr	r19
     e8e:	27 95       	ror	r18
     e90:	36 95       	lsr	r19
     e92:	27 95       	ror	r18
     e94:	a5 ec       	ldi	r26, 0xC5	; 197
     e96:	b0 e2       	ldi	r27, 0x20	; 32
     e98:	dd d2       	rcall	.+1466   	; 0x1454 <__umulhisi3>
     e9a:	8c 01       	movw	r16, r24
     e9c:	12 95       	swap	r17
     e9e:	02 95       	swap	r16
     ea0:	0f 70       	andi	r16, 0x0F	; 15
     ea2:	01 27       	eor	r16, r17
     ea4:	1f 70       	andi	r17, 0x0F	; 15
     ea6:	01 27       	eor	r16, r17
     ea8:	98 01       	movw	r18, r16
     eaa:	ad ec       	ldi	r26, 0xCD	; 205
     eac:	bc ec       	ldi	r27, 0xCC	; 204
     eae:	d2 d2       	rcall	.+1444   	; 0x1454 <__umulhisi3>
     eb0:	96 95       	lsr	r25
     eb2:	87 95       	ror	r24
     eb4:	96 95       	lsr	r25
     eb6:	87 95       	ror	r24
     eb8:	96 95       	lsr	r25
     eba:	87 95       	ror	r24
     ebc:	9c 01       	movw	r18, r24
     ebe:	22 0f       	add	r18, r18
     ec0:	33 1f       	adc	r19, r19
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	82 0f       	add	r24, r18
     ed0:	93 1f       	adc	r25, r19
     ed2:	98 01       	movw	r18, r16
     ed4:	28 1b       	sub	r18, r24
     ed6:	39 0b       	sbc	r19, r25
     ed8:	20 8b       	std	Z+16, r18	; 0x10
     eda:	01 c0       	rjmp	.+2      	; 0xede <_ZN6TM163711send_numberEj+0x68>
	} 
	else
	{
		a = 0;
     edc:	10 8a       	std	Z+16, r1	; 0x10
	}
	
	if (four_digit_number > 99)
     ede:	44 36       	cpi	r20, 0x64	; 100
     ee0:	51 05       	cpc	r21, r1
     ee2:	28 f1       	brcs	.+74     	; 0xf2e <_ZN6TM163711send_numberEj+0xb8>
	{
		b = uint8_t(four_digit_number / 100 % 10);
     ee4:	9a 01       	movw	r18, r20
     ee6:	36 95       	lsr	r19
     ee8:	27 95       	ror	r18
     eea:	36 95       	lsr	r19
     eec:	27 95       	ror	r18
     eee:	ab e7       	ldi	r26, 0x7B	; 123
     ef0:	b4 e1       	ldi	r27, 0x14	; 20
     ef2:	b0 d2       	rcall	.+1376   	; 0x1454 <__umulhisi3>
     ef4:	8c 01       	movw	r16, r24
     ef6:	16 95       	lsr	r17
     ef8:	07 95       	ror	r16
     efa:	98 01       	movw	r18, r16
     efc:	ad ec       	ldi	r26, 0xCD	; 205
     efe:	bc ec       	ldi	r27, 0xCC	; 204
     f00:	a9 d2       	rcall	.+1362   	; 0x1454 <__umulhisi3>
     f02:	96 95       	lsr	r25
     f04:	87 95       	ror	r24
     f06:	96 95       	lsr	r25
     f08:	87 95       	ror	r24
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	9c 01       	movw	r18, r24
     f10:	22 0f       	add	r18, r18
     f12:	33 1f       	adc	r19, r19
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	82 0f       	add	r24, r18
     f22:	93 1f       	adc	r25, r19
     f24:	98 01       	movw	r18, r16
     f26:	28 1b       	sub	r18, r24
     f28:	39 0b       	sbc	r19, r25
     f2a:	21 8b       	std	Z+17, r18	; 0x11
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <_ZN6TM163711send_numberEj+0xba>
	} 
	else
	{
		b = 0;
     f2e:	11 8a       	std	Z+17, r1	; 0x11
	}
	
	if (four_digit_number > 9)
     f30:	4a 30       	cpi	r20, 0x0A	; 10
     f32:	51 05       	cpc	r21, r1
     f34:	18 f1       	brcs	.+70     	; 0xf7c <_ZN6TM163711send_numberEj+0x106>
	{
		c = uint8_t(four_digit_number / 10 % 10);
     f36:	9a 01       	movw	r18, r20
     f38:	ad ec       	ldi	r26, 0xCD	; 205
     f3a:	bc ec       	ldi	r27, 0xCC	; 204
     f3c:	8b d2       	rcall	.+1302   	; 0x1454 <__umulhisi3>
     f3e:	8c 01       	movw	r16, r24
     f40:	16 95       	lsr	r17
     f42:	07 95       	ror	r16
     f44:	16 95       	lsr	r17
     f46:	07 95       	ror	r16
     f48:	16 95       	lsr	r17
     f4a:	07 95       	ror	r16
     f4c:	98 01       	movw	r18, r16
     f4e:	82 d2       	rcall	.+1284   	; 0x1454 <__umulhisi3>
     f50:	96 95       	lsr	r25
     f52:	87 95       	ror	r24
     f54:	96 95       	lsr	r25
     f56:	87 95       	ror	r24
     f58:	96 95       	lsr	r25
     f5a:	87 95       	ror	r24
     f5c:	9c 01       	movw	r18, r24
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	82 0f       	add	r24, r18
     f70:	93 1f       	adc	r25, r19
     f72:	98 01       	movw	r18, r16
     f74:	28 1b       	sub	r18, r24
     f76:	39 0b       	sbc	r19, r25
     f78:	22 8b       	std	Z+18, r18	; 0x12
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <_ZN6TM163711send_numberEj+0x108>
	} 
	else
	{
		c = 0;
     f7c:	12 8a       	std	Z+18, r1	; 0x12
	}
	
	if (four_digit_number >= 0)
	{
		d = uint8_t(four_digit_number % 10);
     f7e:	9a 01       	movw	r18, r20
     f80:	ad ec       	ldi	r26, 0xCD	; 205
     f82:	bc ec       	ldi	r27, 0xCC	; 204
     f84:	67 d2       	rcall	.+1230   	; 0x1454 <__umulhisi3>
     f86:	96 95       	lsr	r25
     f88:	87 95       	ror	r24
     f8a:	96 95       	lsr	r25
     f8c:	87 95       	ror	r24
     f8e:	96 95       	lsr	r25
     f90:	87 95       	ror	r24
     f92:	9c 01       	movw	r18, r24
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 0f       	add	r24, r18
     fa6:	93 1f       	adc	r25, r19
     fa8:	9a 01       	movw	r18, r20
     faa:	28 1b       	sub	r18, r24
     fac:	39 0b       	sbc	r19, r25
     fae:	23 8b       	std	Z+19, r18	; 0x13
	{
		d = 0;
	}
		
		
	TM1637::send_chars(digitToSegment[a], digitToSegment[b], digitToSegment[c], digitToSegment[d]);
     fb0:	83 89       	ldd	r24, Z+19	; 0x13
     fb2:	df 01       	movw	r26, r30
     fb4:	a8 0f       	add	r26, r24
     fb6:	b1 1d       	adc	r27, r1
     fb8:	0c 91       	ld	r16, X
     fba:	82 89       	ldd	r24, Z+18	; 0x12
     fbc:	df 01       	movw	r26, r30
     fbe:	a8 0f       	add	r26, r24
     fc0:	b1 1d       	adc	r27, r1
     fc2:	2c 91       	ld	r18, X
     fc4:	81 89       	ldd	r24, Z+17	; 0x11
     fc6:	df 01       	movw	r26, r30
     fc8:	a8 0f       	add	r26, r24
     fca:	b1 1d       	adc	r27, r1
     fcc:	4c 91       	ld	r20, X
     fce:	80 89       	ldd	r24, Z+16	; 0x10
     fd0:	df 01       	movw	r26, r30
     fd2:	a8 0f       	add	r26, r24
     fd4:	b1 1d       	adc	r27, r1
     fd6:	6c 91       	ld	r22, X
     fd8:	cf 01       	movw	r24, r30
     fda:	23 df       	rcall	.-442    	; 0xe22 <_ZN6TM163710send_charsEhhhh>
		
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <__subsf3>:
     fe2:	50 58       	subi	r21, 0x80	; 128

00000fe4 <__addsf3>:
     fe4:	bb 27       	eor	r27, r27
     fe6:	aa 27       	eor	r26, r26
     fe8:	0e 94 09 08 	call	0x1012	; 0x1012 <__addsf3x>
     fec:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__fp_round>
     ff0:	0e 94 4c 09 	call	0x1298	; 0x1298 <__fp_pscA>
     ff4:	38 f0       	brcs	.+14     	; 0x1004 <__addsf3+0x20>
     ff6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__fp_pscB>
     ffa:	20 f0       	brcs	.+8      	; 0x1004 <__addsf3+0x20>
     ffc:	39 f4       	brne	.+14     	; 0x100c <__addsf3+0x28>
     ffe:	9f 3f       	cpi	r25, 0xFF	; 255
    1000:	19 f4       	brne	.+6      	; 0x1008 <__addsf3+0x24>
    1002:	26 f4       	brtc	.+8      	; 0x100c <__addsf3+0x28>
    1004:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_nan>
    1008:	0e f4       	brtc	.+2      	; 0x100c <__addsf3+0x28>
    100a:	e0 95       	com	r30
    100c:	e7 fb       	bst	r30, 7
    100e:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_inf>

00001012 <__addsf3x>:
    1012:	e9 2f       	mov	r30, r25
    1014:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fp_split3>
    1018:	58 f3       	brcs	.-42     	; 0xff0 <__addsf3+0xc>
    101a:	ba 17       	cp	r27, r26
    101c:	62 07       	cpc	r22, r18
    101e:	73 07       	cpc	r23, r19
    1020:	84 07       	cpc	r24, r20
    1022:	95 07       	cpc	r25, r21
    1024:	20 f0       	brcs	.+8      	; 0x102e <__addsf3x+0x1c>
    1026:	79 f4       	brne	.+30     	; 0x1046 <__addsf3x+0x34>
    1028:	a6 f5       	brtc	.+104    	; 0x1092 <__addsf3x+0x80>
    102a:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_zero>
    102e:	0e f4       	brtc	.+2      	; 0x1032 <__addsf3x+0x20>
    1030:	e0 95       	com	r30
    1032:	0b 2e       	mov	r0, r27
    1034:	ba 2f       	mov	r27, r26
    1036:	a0 2d       	mov	r26, r0
    1038:	0b 01       	movw	r0, r22
    103a:	b9 01       	movw	r22, r18
    103c:	90 01       	movw	r18, r0
    103e:	0c 01       	movw	r0, r24
    1040:	ca 01       	movw	r24, r20
    1042:	a0 01       	movw	r20, r0
    1044:	11 24       	eor	r1, r1
    1046:	ff 27       	eor	r31, r31
    1048:	59 1b       	sub	r21, r25
    104a:	99 f0       	breq	.+38     	; 0x1072 <__addsf3x+0x60>
    104c:	59 3f       	cpi	r21, 0xF9	; 249
    104e:	50 f4       	brcc	.+20     	; 0x1064 <__addsf3x+0x52>
    1050:	50 3e       	cpi	r21, 0xE0	; 224
    1052:	68 f1       	brcs	.+90     	; 0x10ae <__addsf3x+0x9c>
    1054:	1a 16       	cp	r1, r26
    1056:	f0 40       	sbci	r31, 0x00	; 0
    1058:	a2 2f       	mov	r26, r18
    105a:	23 2f       	mov	r18, r19
    105c:	34 2f       	mov	r19, r20
    105e:	44 27       	eor	r20, r20
    1060:	58 5f       	subi	r21, 0xF8	; 248
    1062:	f3 cf       	rjmp	.-26     	; 0x104a <__addsf3x+0x38>
    1064:	46 95       	lsr	r20
    1066:	37 95       	ror	r19
    1068:	27 95       	ror	r18
    106a:	a7 95       	ror	r26
    106c:	f0 40       	sbci	r31, 0x00	; 0
    106e:	53 95       	inc	r21
    1070:	c9 f7       	brne	.-14     	; 0x1064 <__addsf3x+0x52>
    1072:	7e f4       	brtc	.+30     	; 0x1092 <__addsf3x+0x80>
    1074:	1f 16       	cp	r1, r31
    1076:	ba 0b       	sbc	r27, r26
    1078:	62 0b       	sbc	r22, r18
    107a:	73 0b       	sbc	r23, r19
    107c:	84 0b       	sbc	r24, r20
    107e:	ba f0       	brmi	.+46     	; 0x10ae <__addsf3x+0x9c>
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	a1 f0       	breq	.+40     	; 0x10ac <__addsf3x+0x9a>
    1084:	ff 0f       	add	r31, r31
    1086:	bb 1f       	adc	r27, r27
    1088:	66 1f       	adc	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	c2 f7       	brpl	.-16     	; 0x1080 <__addsf3x+0x6e>
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <__addsf3x+0x9c>
    1092:	ba 0f       	add	r27, r26
    1094:	62 1f       	adc	r22, r18
    1096:	73 1f       	adc	r23, r19
    1098:	84 1f       	adc	r24, r20
    109a:	48 f4       	brcc	.+18     	; 0x10ae <__addsf3x+0x9c>
    109c:	87 95       	ror	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	9e 3f       	cpi	r25, 0xFE	; 254
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <__addsf3x+0x9a>
    10aa:	b0 cf       	rjmp	.-160    	; 0x100c <__addsf3+0x28>
    10ac:	93 95       	inc	r25
    10ae:	88 0f       	add	r24, r24
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <__addsf3x+0xa2>
    10b2:	99 27       	eor	r25, r25
    10b4:	ee 0f       	add	r30, r30
    10b6:	97 95       	ror	r25
    10b8:	87 95       	ror	r24
    10ba:	08 95       	ret

000010bc <__divsf3>:
    10bc:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__divsf3x>
    10c0:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__fp_round>
    10c4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__fp_pscB>
    10c8:	58 f0       	brcs	.+22     	; 0x10e0 <__divsf3+0x24>
    10ca:	0e 94 4c 09 	call	0x1298	; 0x1298 <__fp_pscA>
    10ce:	40 f0       	brcs	.+16     	; 0x10e0 <__divsf3+0x24>
    10d0:	29 f4       	brne	.+10     	; 0x10dc <__divsf3+0x20>
    10d2:	5f 3f       	cpi	r21, 0xFF	; 255
    10d4:	29 f0       	breq	.+10     	; 0x10e0 <__divsf3+0x24>
    10d6:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_inf>
    10da:	51 11       	cpse	r21, r1
    10dc:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__fp_szero>
    10e0:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_nan>

000010e4 <__divsf3x>:
    10e4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fp_split3>
    10e8:	68 f3       	brcs	.-38     	; 0x10c4 <__divsf3+0x8>

000010ea <__divsf3_pse>:
    10ea:	99 23       	and	r25, r25
    10ec:	b1 f3       	breq	.-20     	; 0x10da <__divsf3+0x1e>
    10ee:	55 23       	and	r21, r21
    10f0:	91 f3       	breq	.-28     	; 0x10d6 <__divsf3+0x1a>
    10f2:	95 1b       	sub	r25, r21
    10f4:	55 0b       	sbc	r21, r21
    10f6:	bb 27       	eor	r27, r27
    10f8:	aa 27       	eor	r26, r26
    10fa:	62 17       	cp	r22, r18
    10fc:	73 07       	cpc	r23, r19
    10fe:	84 07       	cpc	r24, r20
    1100:	38 f0       	brcs	.+14     	; 0x1110 <__divsf3_pse+0x26>
    1102:	9f 5f       	subi	r25, 0xFF	; 255
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	44 1f       	adc	r20, r20
    110c:	aa 1f       	adc	r26, r26
    110e:	a9 f3       	breq	.-22     	; 0x10fa <__divsf3_pse+0x10>
    1110:	35 d0       	rcall	.+106    	; 0x117c <__divsf3_pse+0x92>
    1112:	0e 2e       	mov	r0, r30
    1114:	3a f0       	brmi	.+14     	; 0x1124 <__divsf3_pse+0x3a>
    1116:	e0 e8       	ldi	r30, 0x80	; 128
    1118:	32 d0       	rcall	.+100    	; 0x117e <__divsf3_pse+0x94>
    111a:	91 50       	subi	r25, 0x01	; 1
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	e6 95       	lsr	r30
    1120:	00 1c       	adc	r0, r0
    1122:	ca f7       	brpl	.-14     	; 0x1116 <__divsf3_pse+0x2c>
    1124:	2b d0       	rcall	.+86     	; 0x117c <__divsf3_pse+0x92>
    1126:	fe 2f       	mov	r31, r30
    1128:	29 d0       	rcall	.+82     	; 0x117c <__divsf3_pse+0x92>
    112a:	66 0f       	add	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	bb 1f       	adc	r27, r27
    1132:	26 17       	cp	r18, r22
    1134:	37 07       	cpc	r19, r23
    1136:	48 07       	cpc	r20, r24
    1138:	ab 07       	cpc	r26, r27
    113a:	b0 e8       	ldi	r27, 0x80	; 128
    113c:	09 f0       	breq	.+2      	; 0x1140 <__divsf3_pse+0x56>
    113e:	bb 0b       	sbc	r27, r27
    1140:	80 2d       	mov	r24, r0
    1142:	bf 01       	movw	r22, r30
    1144:	ff 27       	eor	r31, r31
    1146:	93 58       	subi	r25, 0x83	; 131
    1148:	5f 4f       	sbci	r21, 0xFF	; 255
    114a:	3a f0       	brmi	.+14     	; 0x115a <__divsf3_pse+0x70>
    114c:	9e 3f       	cpi	r25, 0xFE	; 254
    114e:	51 05       	cpc	r21, r1
    1150:	78 f0       	brcs	.+30     	; 0x1170 <__divsf3_pse+0x86>
    1152:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_inf>
    1156:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__fp_szero>
    115a:	5f 3f       	cpi	r21, 0xFF	; 255
    115c:	e4 f3       	brlt	.-8      	; 0x1156 <__divsf3_pse+0x6c>
    115e:	98 3e       	cpi	r25, 0xE8	; 232
    1160:	d4 f3       	brlt	.-12     	; 0x1156 <__divsf3_pse+0x6c>
    1162:	86 95       	lsr	r24
    1164:	77 95       	ror	r23
    1166:	67 95       	ror	r22
    1168:	b7 95       	ror	r27
    116a:	f7 95       	ror	r31
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	c9 f7       	brne	.-14     	; 0x1162 <__divsf3_pse+0x78>
    1170:	88 0f       	add	r24, r24
    1172:	91 1d       	adc	r25, r1
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	97 f9       	bld	r25, 7
    117a:	08 95       	ret
    117c:	e1 e0       	ldi	r30, 0x01	; 1
    117e:	66 0f       	add	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	bb 1f       	adc	r27, r27
    1186:	62 17       	cp	r22, r18
    1188:	73 07       	cpc	r23, r19
    118a:	84 07       	cpc	r24, r20
    118c:	ba 07       	cpc	r27, r26
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__divsf3_pse+0xae>
    1190:	62 1b       	sub	r22, r18
    1192:	73 0b       	sbc	r23, r19
    1194:	84 0b       	sbc	r24, r20
    1196:	ba 0b       	sbc	r27, r26
    1198:	ee 1f       	adc	r30, r30
    119a:	88 f7       	brcc	.-30     	; 0x117e <__divsf3_pse+0x94>
    119c:	e0 95       	com	r30
    119e:	08 95       	ret

000011a0 <__fixsfsi>:
    11a0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixunssfsi>
    11a4:	68 94       	set
    11a6:	b1 11       	cpse	r27, r1
    11a8:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__fp_szero>
    11ac:	08 95       	ret

000011ae <__fixunssfsi>:
    11ae:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fp_splitA>
    11b2:	88 f0       	brcs	.+34     	; 0x11d6 <__fixunssfsi+0x28>
    11b4:	9f 57       	subi	r25, 0x7F	; 127
    11b6:	98 f0       	brcs	.+38     	; 0x11de <__fixunssfsi+0x30>
    11b8:	b9 2f       	mov	r27, r25
    11ba:	99 27       	eor	r25, r25
    11bc:	b7 51       	subi	r27, 0x17	; 23
    11be:	b0 f0       	brcs	.+44     	; 0x11ec <__fixunssfsi+0x3e>
    11c0:	e1 f0       	breq	.+56     	; 0x11fa <__fixunssfsi+0x4c>
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	1a f0       	brmi	.+6      	; 0x11d2 <__fixunssfsi+0x24>
    11cc:	ba 95       	dec	r27
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <__fixunssfsi+0x14>
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <__fixunssfsi+0x4c>
    11d2:	b1 30       	cpi	r27, 0x01	; 1
    11d4:	91 f0       	breq	.+36     	; 0x11fa <__fixunssfsi+0x4c>
    11d6:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_zero>
    11da:	b1 e0       	ldi	r27, 0x01	; 1
    11dc:	08 95       	ret
    11de:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__fp_zero>
    11e2:	67 2f       	mov	r22, r23
    11e4:	78 2f       	mov	r23, r24
    11e6:	88 27       	eor	r24, r24
    11e8:	b8 5f       	subi	r27, 0xF8	; 248
    11ea:	39 f0       	breq	.+14     	; 0x11fa <__fixunssfsi+0x4c>
    11ec:	b9 3f       	cpi	r27, 0xF9	; 249
    11ee:	cc f3       	brlt	.-14     	; 0x11e2 <__fixunssfsi+0x34>
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b3 95       	inc	r27
    11f8:	d9 f7       	brne	.-10     	; 0x11f0 <__fixunssfsi+0x42>
    11fa:	3e f4       	brtc	.+14     	; 0x120a <__fixunssfsi+0x5c>
    11fc:	90 95       	com	r25
    11fe:	80 95       	com	r24
    1200:	70 95       	com	r23
    1202:	61 95       	neg	r22
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	08 95       	ret

0000120c <__floatunsisf>:
    120c:	e8 94       	clt
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <__floatsisf+0x12>

00001210 <__floatsisf>:
    1210:	97 fb       	bst	r25, 7
    1212:	3e f4       	brtc	.+14     	; 0x1222 <__floatsisf+0x12>
    1214:	90 95       	com	r25
    1216:	80 95       	com	r24
    1218:	70 95       	com	r23
    121a:	61 95       	neg	r22
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	99 23       	and	r25, r25
    1224:	a9 f0       	breq	.+42     	; 0x1250 <__floatsisf+0x40>
    1226:	f9 2f       	mov	r31, r25
    1228:	96 e9       	ldi	r25, 0x96	; 150
    122a:	bb 27       	eor	r27, r27
    122c:	93 95       	inc	r25
    122e:	f6 95       	lsr	r31
    1230:	87 95       	ror	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b7 95       	ror	r27
    1238:	f1 11       	cpse	r31, r1
    123a:	f8 cf       	rjmp	.-16     	; 0x122c <__floatsisf+0x1c>
    123c:	fa f4       	brpl	.+62     	; 0x127c <__floatsisf+0x6c>
    123e:	bb 0f       	add	r27, r27
    1240:	11 f4       	brne	.+4      	; 0x1246 <__floatsisf+0x36>
    1242:	60 ff       	sbrs	r22, 0
    1244:	1b c0       	rjmp	.+54     	; 0x127c <__floatsisf+0x6c>
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	16 c0       	rjmp	.+44     	; 0x127c <__floatsisf+0x6c>
    1250:	88 23       	and	r24, r24
    1252:	11 f0       	breq	.+4      	; 0x1258 <__floatsisf+0x48>
    1254:	96 e9       	ldi	r25, 0x96	; 150
    1256:	11 c0       	rjmp	.+34     	; 0x127a <__floatsisf+0x6a>
    1258:	77 23       	and	r23, r23
    125a:	21 f0       	breq	.+8      	; 0x1264 <__floatsisf+0x54>
    125c:	9e e8       	ldi	r25, 0x8E	; 142
    125e:	87 2f       	mov	r24, r23
    1260:	76 2f       	mov	r23, r22
    1262:	05 c0       	rjmp	.+10     	; 0x126e <__floatsisf+0x5e>
    1264:	66 23       	and	r22, r22
    1266:	71 f0       	breq	.+28     	; 0x1284 <__floatsisf+0x74>
    1268:	96 e8       	ldi	r25, 0x86	; 134
    126a:	86 2f       	mov	r24, r22
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	2a f0       	brmi	.+10     	; 0x127c <__floatsisf+0x6c>
    1272:	9a 95       	dec	r25
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	da f7       	brpl	.-10     	; 0x1272 <__floatsisf+0x62>
    127c:	88 0f       	add	r24, r24
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	97 f9       	bld	r25, 7
    1284:	08 95       	ret

00001286 <__fp_inf>:
    1286:	97 f9       	bld	r25, 7
    1288:	9f 67       	ori	r25, 0x7F	; 127
    128a:	80 e8       	ldi	r24, 0x80	; 128
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	08 95       	ret

00001292 <__fp_nan>:
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	80 ec       	ldi	r24, 0xC0	; 192
    1296:	08 95       	ret

00001298 <__fp_pscA>:
    1298:	00 24       	eor	r0, r0
    129a:	0a 94       	dec	r0
    129c:	16 16       	cp	r1, r22
    129e:	17 06       	cpc	r1, r23
    12a0:	18 06       	cpc	r1, r24
    12a2:	09 06       	cpc	r0, r25
    12a4:	08 95       	ret

000012a6 <__fp_pscB>:
    12a6:	00 24       	eor	r0, r0
    12a8:	0a 94       	dec	r0
    12aa:	12 16       	cp	r1, r18
    12ac:	13 06       	cpc	r1, r19
    12ae:	14 06       	cpc	r1, r20
    12b0:	05 06       	cpc	r0, r21
    12b2:	08 95       	ret

000012b4 <__fp_round>:
    12b4:	09 2e       	mov	r0, r25
    12b6:	03 94       	inc	r0
    12b8:	00 0c       	add	r0, r0
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <__fp_round+0xc>
    12bc:	88 23       	and	r24, r24
    12be:	52 f0       	brmi	.+20     	; 0x12d4 <__fp_round+0x20>
    12c0:	bb 0f       	add	r27, r27
    12c2:	40 f4       	brcc	.+16     	; 0x12d4 <__fp_round+0x20>
    12c4:	bf 2b       	or	r27, r31
    12c6:	11 f4       	brne	.+4      	; 0x12cc <__fp_round+0x18>
    12c8:	60 ff       	sbrs	r22, 0
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <__fp_round+0x20>
    12cc:	6f 5f       	subi	r22, 0xFF	; 255
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	8f 4f       	sbci	r24, 0xFF	; 255
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	08 95       	ret

000012d6 <__fp_split3>:
    12d6:	57 fd       	sbrc	r21, 7
    12d8:	90 58       	subi	r25, 0x80	; 128
    12da:	44 0f       	add	r20, r20
    12dc:	55 1f       	adc	r21, r21
    12de:	59 f0       	breq	.+22     	; 0x12f6 <__fp_splitA+0x10>
    12e0:	5f 3f       	cpi	r21, 0xFF	; 255
    12e2:	71 f0       	breq	.+28     	; 0x1300 <__fp_splitA+0x1a>
    12e4:	47 95       	ror	r20

000012e6 <__fp_splitA>:
    12e6:	88 0f       	add	r24, r24
    12e8:	97 fb       	bst	r25, 7
    12ea:	99 1f       	adc	r25, r25
    12ec:	61 f0       	breq	.+24     	; 0x1306 <__fp_splitA+0x20>
    12ee:	9f 3f       	cpi	r25, 0xFF	; 255
    12f0:	79 f0       	breq	.+30     	; 0x1310 <__fp_splitA+0x2a>
    12f2:	87 95       	ror	r24
    12f4:	08 95       	ret
    12f6:	12 16       	cp	r1, r18
    12f8:	13 06       	cpc	r1, r19
    12fa:	14 06       	cpc	r1, r20
    12fc:	55 1f       	adc	r21, r21
    12fe:	f2 cf       	rjmp	.-28     	; 0x12e4 <__fp_split3+0xe>
    1300:	46 95       	lsr	r20
    1302:	f1 df       	rcall	.-30     	; 0x12e6 <__fp_splitA>
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <__fp_splitA+0x30>
    1306:	16 16       	cp	r1, r22
    1308:	17 06       	cpc	r1, r23
    130a:	18 06       	cpc	r1, r24
    130c:	99 1f       	adc	r25, r25
    130e:	f1 cf       	rjmp	.-30     	; 0x12f2 <__fp_splitA+0xc>
    1310:	86 95       	lsr	r24
    1312:	71 05       	cpc	r23, r1
    1314:	61 05       	cpc	r22, r1
    1316:	08 94       	sec
    1318:	08 95       	ret

0000131a <__fp_zero>:
    131a:	e8 94       	clt

0000131c <__fp_szero>:
    131c:	bb 27       	eor	r27, r27
    131e:	66 27       	eor	r22, r22
    1320:	77 27       	eor	r23, r23
    1322:	cb 01       	movw	r24, r22
    1324:	97 f9       	bld	r25, 7
    1326:	08 95       	ret

00001328 <__gesf2>:
    1328:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_cmp>
    132c:	08 f4       	brcc	.+2      	; 0x1330 <__gesf2+0x8>
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	08 95       	ret

00001332 <__mulsf3>:
    1332:	0e 94 ac 09 	call	0x1358	; 0x1358 <__mulsf3x>
    1336:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__fp_round>
    133a:	0e 94 4c 09 	call	0x1298	; 0x1298 <__fp_pscA>
    133e:	38 f0       	brcs	.+14     	; 0x134e <__mulsf3+0x1c>
    1340:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__fp_pscB>
    1344:	20 f0       	brcs	.+8      	; 0x134e <__mulsf3+0x1c>
    1346:	95 23       	and	r25, r21
    1348:	11 f0       	breq	.+4      	; 0x134e <__mulsf3+0x1c>
    134a:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_inf>
    134e:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_nan>
    1352:	11 24       	eor	r1, r1
    1354:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__fp_szero>

00001358 <__mulsf3x>:
    1358:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fp_split3>
    135c:	70 f3       	brcs	.-36     	; 0x133a <__mulsf3+0x8>

0000135e <__mulsf3_pse>:
    135e:	95 9f       	mul	r25, r21
    1360:	c1 f3       	breq	.-16     	; 0x1352 <__mulsf3+0x20>
    1362:	95 0f       	add	r25, r21
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	55 1f       	adc	r21, r21
    1368:	62 9f       	mul	r22, r18
    136a:	f0 01       	movw	r30, r0
    136c:	72 9f       	mul	r23, r18
    136e:	bb 27       	eor	r27, r27
    1370:	f0 0d       	add	r31, r0
    1372:	b1 1d       	adc	r27, r1
    1374:	63 9f       	mul	r22, r19
    1376:	aa 27       	eor	r26, r26
    1378:	f0 0d       	add	r31, r0
    137a:	b1 1d       	adc	r27, r1
    137c:	aa 1f       	adc	r26, r26
    137e:	64 9f       	mul	r22, r20
    1380:	66 27       	eor	r22, r22
    1382:	b0 0d       	add	r27, r0
    1384:	a1 1d       	adc	r26, r1
    1386:	66 1f       	adc	r22, r22
    1388:	82 9f       	mul	r24, r18
    138a:	22 27       	eor	r18, r18
    138c:	b0 0d       	add	r27, r0
    138e:	a1 1d       	adc	r26, r1
    1390:	62 1f       	adc	r22, r18
    1392:	73 9f       	mul	r23, r19
    1394:	b0 0d       	add	r27, r0
    1396:	a1 1d       	adc	r26, r1
    1398:	62 1f       	adc	r22, r18
    139a:	83 9f       	mul	r24, r19
    139c:	a0 0d       	add	r26, r0
    139e:	61 1d       	adc	r22, r1
    13a0:	22 1f       	adc	r18, r18
    13a2:	74 9f       	mul	r23, r20
    13a4:	33 27       	eor	r19, r19
    13a6:	a0 0d       	add	r26, r0
    13a8:	61 1d       	adc	r22, r1
    13aa:	23 1f       	adc	r18, r19
    13ac:	84 9f       	mul	r24, r20
    13ae:	60 0d       	add	r22, r0
    13b0:	21 1d       	adc	r18, r1
    13b2:	82 2f       	mov	r24, r18
    13b4:	76 2f       	mov	r23, r22
    13b6:	6a 2f       	mov	r22, r26
    13b8:	11 24       	eor	r1, r1
    13ba:	9f 57       	subi	r25, 0x7F	; 127
    13bc:	50 40       	sbci	r21, 0x00	; 0
    13be:	9a f0       	brmi	.+38     	; 0x13e6 <__mulsf3_pse+0x88>
    13c0:	f1 f0       	breq	.+60     	; 0x13fe <__mulsf3_pse+0xa0>
    13c2:	88 23       	and	r24, r24
    13c4:	4a f0       	brmi	.+18     	; 0x13d8 <__mulsf3_pse+0x7a>
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	bb 1f       	adc	r27, r27
    13cc:	66 1f       	adc	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	91 50       	subi	r25, 0x01	; 1
    13d4:	50 40       	sbci	r21, 0x00	; 0
    13d6:	a9 f7       	brne	.-22     	; 0x13c2 <__mulsf3_pse+0x64>
    13d8:	9e 3f       	cpi	r25, 0xFE	; 254
    13da:	51 05       	cpc	r21, r1
    13dc:	80 f0       	brcs	.+32     	; 0x13fe <__mulsf3_pse+0xa0>
    13de:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_inf>
    13e2:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__fp_szero>
    13e6:	5f 3f       	cpi	r21, 0xFF	; 255
    13e8:	e4 f3       	brlt	.-8      	; 0x13e2 <__mulsf3_pse+0x84>
    13ea:	98 3e       	cpi	r25, 0xE8	; 232
    13ec:	d4 f3       	brlt	.-12     	; 0x13e2 <__mulsf3_pse+0x84>
    13ee:	86 95       	lsr	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b7 95       	ror	r27
    13f6:	f7 95       	ror	r31
    13f8:	e7 95       	ror	r30
    13fa:	9f 5f       	subi	r25, 0xFF	; 255
    13fc:	c1 f7       	brne	.-16     	; 0x13ee <__mulsf3_pse+0x90>
    13fe:	fe 2b       	or	r31, r30
    1400:	88 0f       	add	r24, r24
    1402:	91 1d       	adc	r25, r1
    1404:	96 95       	lsr	r25
    1406:	87 95       	ror	r24
    1408:	97 f9       	bld	r25, 7
    140a:	08 95       	ret

0000140c <__fp_cmp>:
    140c:	99 0f       	add	r25, r25
    140e:	00 08       	sbc	r0, r0
    1410:	55 0f       	add	r21, r21
    1412:	aa 0b       	sbc	r26, r26
    1414:	e0 e8       	ldi	r30, 0x80	; 128
    1416:	fe ef       	ldi	r31, 0xFE	; 254
    1418:	16 16       	cp	r1, r22
    141a:	17 06       	cpc	r1, r23
    141c:	e8 07       	cpc	r30, r24
    141e:	f9 07       	cpc	r31, r25
    1420:	c0 f0       	brcs	.+48     	; 0x1452 <__fp_cmp+0x46>
    1422:	12 16       	cp	r1, r18
    1424:	13 06       	cpc	r1, r19
    1426:	e4 07       	cpc	r30, r20
    1428:	f5 07       	cpc	r31, r21
    142a:	98 f0       	brcs	.+38     	; 0x1452 <__fp_cmp+0x46>
    142c:	62 1b       	sub	r22, r18
    142e:	73 0b       	sbc	r23, r19
    1430:	84 0b       	sbc	r24, r20
    1432:	95 0b       	sbc	r25, r21
    1434:	39 f4       	brne	.+14     	; 0x1444 <__fp_cmp+0x38>
    1436:	0a 26       	eor	r0, r26
    1438:	61 f0       	breq	.+24     	; 0x1452 <__fp_cmp+0x46>
    143a:	23 2b       	or	r18, r19
    143c:	24 2b       	or	r18, r20
    143e:	25 2b       	or	r18, r21
    1440:	21 f4       	brne	.+8      	; 0x144a <__fp_cmp+0x3e>
    1442:	08 95       	ret
    1444:	0a 26       	eor	r0, r26
    1446:	09 f4       	brne	.+2      	; 0x144a <__fp_cmp+0x3e>
    1448:	a1 40       	sbci	r26, 0x01	; 1
    144a:	a6 95       	lsr	r26
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	81 1d       	adc	r24, r1
    1450:	81 1d       	adc	r24, r1
    1452:	08 95       	ret

00001454 <__umulhisi3>:
    1454:	a2 9f       	mul	r26, r18
    1456:	b0 01       	movw	r22, r0
    1458:	b3 9f       	mul	r27, r19
    145a:	c0 01       	movw	r24, r0
    145c:	a3 9f       	mul	r26, r19
    145e:	01 d0       	rcall	.+2      	; 0x1462 <__umulhisi3+0xe>
    1460:	b2 9f       	mul	r27, r18
    1462:	70 0d       	add	r23, r0
    1464:	81 1d       	adc	r24, r1
    1466:	11 24       	eor	r1, r1
    1468:	91 1d       	adc	r25, r1
    146a:	08 95       	ret

0000146c <__tablejump2__>:
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	05 90       	lpm	r0, Z+
    1472:	f4 91       	lpm	r31, Z
    1474:	e0 2d       	mov	r30, r0
    1476:	09 94       	ijmp

00001478 <_exit>:
    1478:	f8 94       	cli

0000147a <__stop_program>:
    147a:	ff cf       	rjmp	.-2      	; 0x147a <__stop_program>
