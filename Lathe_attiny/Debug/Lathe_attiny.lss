
Lathe_attiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  000014a4  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001488  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  00009488  00001488  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000021  00803e04  00803e04  0000155c  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000108  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003f0b  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001edc  00000000  00000000  000055db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001148  00000000  00000000  000074b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002bc  00000000  00000000  00008600  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000199e  00000000  00000000  000088bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f7a  00000000  00000000  0000a25a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
       2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
       4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
       6:	8c c1       	rjmp	.+792    	; 0x320 <__vector_3>
       8:	c6 c1       	rjmp	.+908    	; 0x396 <__vector_4>
       a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
       c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
       e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
      10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
      12:	43 c1       	rjmp	.+646    	; 0x29a <__vector_9>
      14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
      16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
      18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
      1a:	66 c1       	rjmp	.+716    	; 0x2e8 <__vector_13>
      1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
      1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
      20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
      22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
      24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
      26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
      28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
      2a:	2a c0       	rjmp	.+84     	; 0x80 <__bad_interrupt>
      2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
      2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
      30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
      32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <__ctors_start>:
      34:	87 06       	cpc	r8, r23

00000036 <__ctors_end>:
      36:	11 24       	eor	r1, r1
      38:	1f be       	out	0x3f, r1	; 63
      3a:	cf ef       	ldi	r28, 0xFF	; 255
      3c:	cd bf       	out	0x3d, r28	; 61
      3e:	df e3       	ldi	r29, 0x3F	; 63
      40:	de bf       	out	0x3e, r29	; 62

00000042 <__do_copy_data>:
      42:	1e e3       	ldi	r17, 0x3E	; 62
      44:	a0 e0       	ldi	r26, 0x00	; 0
      46:	be e3       	ldi	r27, 0x3E	; 62
      48:	e4 ea       	ldi	r30, 0xA4	; 164
      4a:	f4 e1       	ldi	r31, 0x14	; 20
      4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
      4e:	05 90       	lpm	r0, Z+
      50:	0d 92       	st	X+, r0
      52:	a4 30       	cpi	r26, 0x04	; 4
      54:	b1 07       	cpc	r27, r17
      56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
      58:	2e e3       	ldi	r18, 0x3E	; 62
      5a:	a4 e0       	ldi	r26, 0x04	; 4
      5c:	be e3       	ldi	r27, 0x3E	; 62
      5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
      60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
      62:	a5 32       	cpi	r26, 0x25	; 37
      64:	b2 07       	cpc	r27, r18
      66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>

00000068 <__do_global_ctors>:
      68:	10 e0       	ldi	r17, 0x00	; 0
      6a:	cb e1       	ldi	r28, 0x1B	; 27
      6c:	d0 e0       	ldi	r29, 0x00	; 0
      6e:	03 c0       	rjmp	.+6      	; 0x76 <__do_global_ctors+0xe>
      70:	21 97       	sbiw	r28, 0x01	; 1
      72:	fe 01       	movw	r30, r28
      74:	01 da       	rcall	.-3070   	; 0xfffff478 <__eeprom_end+0xff7ef478>
      76:	ca 31       	cpi	r28, 0x1A	; 26
      78:	d1 07       	cpc	r29, r17
      7a:	d1 f7       	brne	.-12     	; 0x70 <__do_global_ctors+0x8>
      7c:	8c d2       	rcall	.+1304   	; 0x596 <main>
      7e:	02 ca       	rjmp	.-3068   	; 0xfffff484 <__eeprom_end+0xff7ef484>

00000080 <__bad_interrupt>:
      80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <_ZN11bcd_encoder4initEv>:
#include "BCD_encoder.h"

void bcd_encoder::init()
{
	
	bcd_clock_port.DIRSET = bcd_clock_pin; 
      82:	e0 e2       	ldi	r30, 0x20	; 32
      84:	f4 e0       	ldi	r31, 0x04	; 4
      86:	81 e0       	ldi	r24, 0x01	; 1
      88:	81 83       	std	Z+1, r24	; 0x01
	bcd_clock_port.OUTCLR = bcd_clock_pin; //clk low
      8a:	86 83       	std	Z+6, r24	; 0x06
	
	bcd_load_port.DIRSET = bcd_load_pin;
      8c:	88 e0       	ldi	r24, 0x08	; 8
      8e:	81 83       	std	Z+1, r24	; 0x01
	bcd_load_port.OUTSET = bcd_load_pin; //trigger high
      90:	85 83       	std	Z+5, r24	; 0x05
      92:	08 95       	ret

00000094 <_ZN11bcd_encoder8read_bcdEv>:
	
}


uint16_t bcd_encoder::read_bcd()
{
      94:	cf 93       	push	r28
      96:	df 93       	push	r29
      98:	00 d0       	rcall	.+0      	; 0x9a <_ZN11bcd_encoder8read_bcdEv+0x6>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t data = 0;
      9e:	19 82       	std	Y+1, r1	; 0x01
      a0:	1a 82       	std	Y+2, r1	; 0x02
	
	//load data
	bcd_load_port.OUTCLR = bcd_load_pin;
      a2:	e0 e2       	ldi	r30, 0x20	; 32
      a4:	f4 e0       	ldi	r31, 0x04	; 4
      a6:	88 e0       	ldi	r24, 0x08	; 8
      a8:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      aa:	91 e2       	ldi	r25, 0x21	; 33
      ac:	9a 95       	dec	r25
      ae:	f1 f7       	brne	.-4      	; 0xac <_ZN11bcd_encoder8read_bcdEv+0x18>
      b0:	00 00       	nop
	_delay_us(5);
	//latch input to start shift out
	bcd_load_port.OUTSET = bcd_load_pin;
      b2:	85 83       	std	Z+5, r24	; 0x05
      b4:	81 e2       	ldi	r24, 0x21	; 33
      b6:	8a 95       	dec	r24
      b8:	f1 f7       	brne	.-4      	; 0xb6 <_ZN11bcd_encoder8read_bcdEv+0x22>
      ba:	00 00       	nop
	_delay_us(5);
	
	//clock out data
	for (uint8_t i = 0; i < bcd_bits; i++)
      bc:	20 e0       	ldi	r18, 0x00	; 0
      be:	20 31       	cpi	r18, 0x10	; 16
      c0:	00 f5       	brcc	.+64     	; 0x102 <_ZN11bcd_encoder8read_bcdEv+0x6e>
	{
		
		data = data | (((bcd_data_port.IN & bcd_data_pin) >> (bcd_data_pin-1)) << i );
      c2:	e0 e2       	ldi	r30, 0x20	; 32
      c4:	f4 e0       	ldi	r31, 0x04	; 4
      c6:	80 85       	ldd	r24, Z+8	; 0x08
      c8:	82 70       	andi	r24, 0x02	; 2
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	95 95       	asr	r25
      ce:	87 95       	ror	r24
      d0:	02 2e       	mov	r0, r18
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <_ZN11bcd_encoder8read_bcdEv+0x44>
      d4:	88 0f       	add	r24, r24
      d6:	99 1f       	adc	r25, r25
      d8:	0a 94       	dec	r0
      da:	e2 f7       	brpl	.-8      	; 0xd4 <_ZN11bcd_encoder8read_bcdEv+0x40>
      dc:	49 81       	ldd	r20, Y+1	; 0x01
      de:	5a 81       	ldd	r21, Y+2	; 0x02
      e0:	84 2b       	or	r24, r20
      e2:	95 2b       	or	r25, r21
      e4:	89 83       	std	Y+1, r24	; 0x01
      e6:	9a 83       	std	Y+2, r25	; 0x02
		
		//clk high - shift data
		bcd_clock_port.OUTSET = bcd_clock_pin;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	91 e2       	ldi	r25, 0x21	; 33
      ee:	9a 95       	dec	r25
      f0:	f1 f7       	brne	.-4      	; 0xee <_ZN11bcd_encoder8read_bcdEv+0x5a>
      f2:	00 00       	nop
		_delay_us(5);
		//clk low
		bcd_clock_port.OUTCLR = bcd_clock_pin;
      f4:	86 83       	std	Z+6, r24	; 0x06
      f6:	81 e2       	ldi	r24, 0x21	; 33
      f8:	8a 95       	dec	r24
      fa:	f1 f7       	brne	.-4      	; 0xf8 <_ZN11bcd_encoder8read_bcdEv+0x64>
      fc:	00 00       	nop
	//latch input to start shift out
	bcd_load_port.OUTSET = bcd_load_pin;
	_delay_us(5);
	
	//clock out data
	for (uint8_t i = 0; i < bcd_bits; i++)
      fe:	2f 5f       	subi	r18, 0xFF	; 255
     100:	de cf       	rjmp	.-68     	; 0xbe <_ZN11bcd_encoder8read_bcdEv+0x2a>
		bcd_clock_port.OUTCLR = bcd_clock_pin;
		_delay_us(5);
		
	}
	
	return data;
     102:	89 81       	ldd	r24, Y+1	; 0x01
     104:	9a 81       	ldd	r25, Y+2	; 0x02
}
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <_ZN11bcd_encoder10bcd_to_intEv>:

uint16_t bcd_encoder::bcd_to_int()
{
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
	uint16_t temp = read_bcd();
     118:	bd df       	rcall	.-134    	; 0x94 <_ZN11bcd_encoder8read_bcdEv>
	
	uint16_t ones = ((temp & 0b0000000000001000) >> 3) | ((temp & 0b0000000000000100) >> 1) | ((temp & 0b0000000000000010) << 1) | ((temp & 0b0000000000000001) << 3);
     11a:	83 fb       	bst	r24, 3
     11c:	00 27       	eor	r16, r16
     11e:	00 f9       	bld	r16, 0
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	bc 01       	movw	r22, r24
     124:	64 70       	andi	r22, 0x04	; 4
     126:	77 27       	eor	r23, r23
     128:	76 95       	lsr	r23
     12a:	67 95       	ror	r22
     12c:	60 2b       	or	r22, r16
     12e:	71 2b       	or	r23, r17
     130:	ac 01       	movw	r20, r24
     132:	42 70       	andi	r20, 0x02	; 2
     134:	55 27       	eor	r21, r21
     136:	44 0f       	add	r20, r20
     138:	55 1f       	adc	r21, r21
     13a:	9b 01       	movw	r18, r22
     13c:	24 2b       	or	r18, r20
     13e:	35 2b       	or	r19, r21
     140:	bc 01       	movw	r22, r24
     142:	61 70       	andi	r22, 0x01	; 1
     144:	77 27       	eor	r23, r23
     146:	66 0f       	add	r22, r22
     148:	77 1f       	adc	r23, r23
     14a:	66 0f       	add	r22, r22
     14c:	77 1f       	adc	r23, r23
     14e:	66 0f       	add	r22, r22
     150:	77 1f       	adc	r23, r23
     152:	62 2b       	or	r22, r18
     154:	73 2b       	or	r23, r19
	uint16_t tens = ((temp & 0b0000000010000000) >> 7) | ((temp & 0b0000000001000000) >> 5) | ((temp & 0b0000000000100000) >> 3) | ((temp & 0b0000000000010000) >> 1);
     156:	87 fb       	bst	r24, 7
     158:	22 27       	eor	r18, r18
     15a:	20 f9       	bld	r18, 0
     15c:	c2 2f       	mov	r28, r18
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	d2 2f       	mov	r29, r18
     162:	ac 01       	movw	r20, r24
     164:	40 74       	andi	r20, 0x40	; 64
     166:	55 27       	eor	r21, r21
     168:	56 95       	lsr	r21
     16a:	47 95       	ror	r20
     16c:	52 95       	swap	r21
     16e:	42 95       	swap	r20
     170:	4f 70       	andi	r20, 0x0F	; 15
     172:	45 27       	eor	r20, r21
     174:	5f 70       	andi	r21, 0x0F	; 15
     176:	45 27       	eor	r20, r21
     178:	4c 2b       	or	r20, r28
     17a:	5d 2b       	or	r21, r29
     17c:	fc 01       	movw	r30, r24
     17e:	e0 72       	andi	r30, 0x20	; 32
     180:	ff 27       	eor	r31, r31
     182:	f6 95       	lsr	r31
     184:	e7 95       	ror	r30
     186:	f6 95       	lsr	r31
     188:	e7 95       	ror	r30
     18a:	f6 95       	lsr	r31
     18c:	e7 95       	ror	r30
     18e:	9a 01       	movw	r18, r20
     190:	2e 2b       	or	r18, r30
     192:	3f 2b       	or	r19, r31
     194:	ac 01       	movw	r20, r24
     196:	40 71       	andi	r20, 0x10	; 16
     198:	55 27       	eor	r21, r21
     19a:	56 95       	lsr	r21
     19c:	47 95       	ror	r20
     19e:	42 2b       	or	r20, r18
     1a0:	53 2b       	or	r21, r19
	uint16_t hundereds = ((temp & 0b0000100000000000) >> 11) | ((temp & 0b0000010000000000) >> 9) | ((temp & 0b0000001000000000) >> 7) | ((temp & 0b0000000100000000) >> 5);
     1a2:	fc 01       	movw	r30, r24
     1a4:	ee 27       	eor	r30, r30
     1a6:	f8 70       	andi	r31, 0x08	; 8
     1a8:	ef 2f       	mov	r30, r31
     1aa:	ff 27       	eor	r31, r31
     1ac:	e6 95       	lsr	r30
     1ae:	e6 95       	lsr	r30
     1b0:	e6 95       	lsr	r30
     1b2:	9c 01       	movw	r18, r24
     1b4:	22 27       	eor	r18, r18
     1b6:	34 70       	andi	r19, 0x04	; 4
     1b8:	23 2f       	mov	r18, r19
     1ba:	33 27       	eor	r19, r19
     1bc:	26 95       	lsr	r18
     1be:	e2 2b       	or	r30, r18
     1c0:	f3 2b       	or	r31, r19
     1c2:	dc 01       	movw	r26, r24
     1c4:	aa 27       	eor	r26, r26
     1c6:	b2 70       	andi	r27, 0x02	; 2
     1c8:	aa 0f       	add	r26, r26
     1ca:	ab 2f       	mov	r26, r27
     1cc:	aa 1f       	adc	r26, r26
     1ce:	bb 0b       	sbc	r27, r27
     1d0:	b1 95       	neg	r27
     1d2:	9f 01       	movw	r18, r30
     1d4:	2a 2b       	or	r18, r26
     1d6:	3b 2b       	or	r19, r27
     1d8:	fc 01       	movw	r30, r24
     1da:	ee 27       	eor	r30, r30
     1dc:	f1 70       	andi	r31, 0x01	; 1
     1de:	f6 95       	lsr	r31
     1e0:	e7 95       	ror	r30
     1e2:	f2 95       	swap	r31
     1e4:	e2 95       	swap	r30
     1e6:	ef 70       	andi	r30, 0x0F	; 15
     1e8:	ef 27       	eor	r30, r31
     1ea:	ff 70       	andi	r31, 0x0F	; 15
     1ec:	ef 27       	eor	r30, r31
     1ee:	e2 2b       	or	r30, r18
     1f0:	f3 2b       	or	r31, r19
	uint16_t thousands = ((temp & 0b1000000000000000) >> 15) | ((temp & 0b0100000000000000) >> 13) | ((temp & 0b0010000000000000) >> 11) | ((temp & 0b0001000000000000) >> 9);
     1f2:	dc 01       	movw	r26, r24
     1f4:	aa 27       	eor	r26, r26
     1f6:	bb 0f       	add	r27, r27
     1f8:	aa 1f       	adc	r26, r26
     1fa:	bb 27       	eor	r27, r27
     1fc:	9c 01       	movw	r18, r24
     1fe:	22 27       	eor	r18, r18
     200:	30 74       	andi	r19, 0x40	; 64
     202:	23 2f       	mov	r18, r19
     204:	33 27       	eor	r19, r19
     206:	22 95       	swap	r18
     208:	26 95       	lsr	r18
     20a:	27 70       	andi	r18, 0x07	; 7
     20c:	2a 2b       	or	r18, r26
     20e:	3b 2b       	or	r19, r27
     210:	dc 01       	movw	r26, r24
     212:	aa 27       	eor	r26, r26
     214:	b0 72       	andi	r27, 0x20	; 32
     216:	ab 2f       	mov	r26, r27
     218:	bb 27       	eor	r27, r27
     21a:	a6 95       	lsr	r26
     21c:	a6 95       	lsr	r26
     21e:	a6 95       	lsr	r26
     220:	2a 2b       	or	r18, r26
     222:	3b 2b       	or	r19, r27
     224:	88 27       	eor	r24, r24
     226:	90 71       	andi	r25, 0x10	; 16
     228:	89 2f       	mov	r24, r25
     22a:	99 27       	eor	r25, r25
     22c:	86 95       	lsr	r24
     22e:	28 2b       	or	r18, r24
     230:	39 2b       	or	r19, r25
	
	temp = ones + (tens * 10) + (hundereds * 100) + (thousands * 1000);
     232:	ca 01       	movw	r24, r20
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	44 0f       	add	r20, r20
     23e:	55 1f       	adc	r21, r21
     240:	44 0f       	add	r20, r20
     242:	55 1f       	adc	r21, r21
     244:	48 0f       	add	r20, r24
     246:	59 1f       	adc	r21, r25
     248:	a4 e6       	ldi	r26, 0x64	; 100
     24a:	ae 9f       	mul	r26, r30
     24c:	c0 01       	movw	r24, r0
     24e:	af 9f       	mul	r26, r31
     250:	90 0d       	add	r25, r0
     252:	11 24       	eor	r1, r1
     254:	48 0f       	add	r20, r24
     256:	59 1f       	adc	r21, r25
     258:	64 0f       	add	r22, r20
     25a:	75 1f       	adc	r23, r21
     25c:	48 ee       	ldi	r20, 0xE8	; 232
     25e:	53 e0       	ldi	r21, 0x03	; 3
     260:	24 9f       	mul	r18, r20
     262:	c0 01       	movw	r24, r0
     264:	25 9f       	mul	r18, r21
     266:	90 0d       	add	r25, r0
     268:	34 9f       	mul	r19, r20
     26a:	90 0d       	add	r25, r0
     26c:	11 24       	eor	r1, r1
	
	return temp;
     26e:	86 0f       	add	r24, r22
     270:	97 1f       	adc	r25, r23
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	08 95       	ret

0000027c <_Z41__static_initialization_and_destruction_0ii>:
		while (spindle_ramp_counter != 0)
		{
			//hold here until interrupt loop finished
		}
	}
}
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	61 f4       	brne	.+24     	; 0x298 <_Z41__static_initialization_and_destruction_0ii+0x1c>
     280:	6f 3f       	cpi	r22, 0xFF	; 255
     282:	7f 4f       	sbci	r23, 0xFF	; 255
     284:	49 f4       	brne	.+18     	; 0x298 <_Z41__static_initialization_and_destruction_0ii+0x1c>
#include <stdint.h>
#include <stdlib.h>
#include <util/delay.h> //F_CPU="20000000" or 20MHz clock


class TM1637 
     286:	80 e1       	ldi	r24, 0x10	; 16
     288:	e8 e8       	ldi	r30, 0x88	; 136
     28a:	f4 e9       	ldi	r31, 0x94	; 148
     28c:	a5 e0       	ldi	r26, 0x05	; 5
     28e:	be e3       	ldi	r27, 0x3E	; 62
     290:	01 90       	ld	r0, Z+
     292:	0d 92       	st	X+, r0
     294:	8a 95       	dec	r24
     296:	e1 f7       	brne	.-8      	; 0x290 <_Z41__static_initialization_and_destruction_0ii+0x14>
     298:	08 95       	ret

0000029a <__vector_9>:
bcd_encoder bcd_input; //init BCD input encoder


//interrupt for TCA0 split high underflow - spindle pin
ISR (TCA0_HUNF_vect)
{
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	8f 93       	push	r24
     2a6:	9f 93       	push	r25
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
	//TCA0.SPLIT.INTFLAGS  //clear interrupt flag
	if (spindle_ramp_counter == 0)
     2ac:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     2b0:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	31 f4       	brne	.+12     	; 0x2c4 <__vector_9+0x2a>
	{
		TCA0.SPLIT.INTCTRL &= ~(TCA_SPLIT_HUNF_bm); //disable interrupt flag)
     2b8:	e0 e0       	ldi	r30, 0x00	; 0
     2ba:	fa e0       	ldi	r31, 0x0A	; 10
     2bc:	82 85       	ldd	r24, Z+10	; 0x0a
     2be:	8d 7f       	andi	r24, 0xFD	; 253
     2c0:	82 87       	std	Z+10, r24	; 0x0a
     2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <__vector_9+0x3c>
	}
	else
	{
		spindle_ramp_counter--;
     2c4:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     2c8:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_ramp_counter>
     2d2:	90 93 1e 3e 	sts	0x3E1E, r25	; 0x803e1e <spindle_ramp_counter+0x1>
	}
	
}
     2d6:	ff 91       	pop	r31
     2d8:	ef 91       	pop	r30
     2da:	9f 91       	pop	r25
     2dc:	8f 91       	pop	r24
     2de:	0f 90       	pop	r0
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	0f 90       	pop	r0
     2e4:	1f 90       	pop	r1
     2e6:	18 95       	reti

000002e8 <__vector_13>:

//interrupt for TCB0 - toggle pin
ISR (TCB0_INT_vect)
{
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	8f 93       	push	r24
	//disable interrupts whilst clock updates
	cli();
     2f4:	f8 94       	cli
	TCB0.INTFLAGS = TCB_CAPT_bm;  //Clear the interrupt flag 
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <_ZL27spindle_clock_divider_array+0x7f75aa>
	step_feed_port.OUTTGL = step_feed_mask;  //Toggle step GPIO 
     2fc:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZL27spindle_clock_divider_array+0x7f6fab>
	
	//decrement ramp up counter
	if (feed_ramp_counter > 0)
     300:	80 91 1c 3e 	lds	r24, 0x3E1C	; 0x803e1c <feed_ramp_counter>
     304:	88 23       	and	r24, r24
     306:	29 f0       	breq	.+10     	; 0x312 <__vector_13+0x2a>
	{
		feed_ramp_counter--;
     308:	80 91 1c 3e 	lds	r24, 0x3E1C	; 0x803e1c <feed_ramp_counter>
     30c:	81 50       	subi	r24, 0x01	; 1
     30e:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <feed_ramp_counter>
	}
	//enable interrupts once clock updated
	sei();
     312:	78 94       	sei
}
     314:	8f 91       	pop	r24
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <__vector_3>:

//setup interrupt for changes on enable pins
ISR (PORTA_PORT_vect)
{
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	11 24       	eor	r1, r1
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	ef 93       	push	r30
     330:	ff 93       	push	r31
	//disable interrupts whilst clock updates
	cli();
     332:	f8 94       	cli
	spindle_enable_switch_port.INTFLAGS = PORT_INT_gm; //read pins and update flags (clear interrupt)
     334:	e0 e0       	ldi	r30, 0x00	; 0
     336:	f4 e0       	ldi	r31, 0x04	; 4
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	81 87       	std	Z+9, r24	; 0x09
	dir_spindle = ((spindle_direction_switch_port.IN & spindle_direction_switch_mask) >> spindle_direction_switch_pin_position);
     33c:	80 85       	ldd	r24, Z+8	; 0x08
     33e:	88 1f       	adc	r24, r24
     340:	88 27       	eor	r24, r24
     342:	88 1f       	adc	r24, r24
     344:	80 93 22 3e 	sts	0x3E22, r24	; 0x803e22 <dir_spindle>
	run_spindle = ((spindle_enable_switch_port.IN & spindle_enable_switch_mask) >> spindle_enable_switch_pin_position) | dir_spindle;			
     348:	80 85       	ldd	r24, Z+8	; 0x08
     34a:	80 74       	andi	r24, 0x40	; 64
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	08 2e       	mov	r0, r24
     350:	89 2f       	mov	r24, r25
     352:	00 0c       	add	r0, r0
     354:	88 1f       	adc	r24, r24
     356:	99 0b       	sbc	r25, r25
     358:	00 0c       	add	r0, r0
     35a:	88 1f       	adc	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	90 91 22 3e 	lds	r25, 0x3E22	; 0x803e22 <dir_spindle>
     362:	89 2b       	or	r24, r25
     364:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <run_spindle>
	run_feed = ((feed_direction_switch_port.IN & feed_direction_switch_mask) >> feed_direction_switch_pin_position);
     368:	80 85       	ldd	r24, Z+8	; 0x08
     36a:	80 71       	andi	r24, 0x10	; 16
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	95 95       	asr	r25
     374:	87 95       	ror	r24
     376:	95 95       	asr	r25
     378:	87 95       	ror	r24
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <run_feed>
	//enable interrupts once clock updated
	sei();
     382:	78 94       	sei
}
     384:	ff 91       	pop	r31
     386:	ef 91       	pop	r30
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <__vector_4>:

//setup interrupt for changes on enable pins
ISR (PORTB_PORT_vect)
{
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	8f 93       	push	r24
     3a2:	9f 93       	push	r25
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
	//disable interrupts whilst clock updates
	cli();
     3a8:	f8 94       	cli
	feed_enable_switch_port.INTFLAGS = PORT_INT_gm; //read pins and update flags (clear interrupt)
     3aa:	e0 e2       	ldi	r30, 0x20	; 32
     3ac:	f4 e0       	ldi	r31, 0x04	; 4
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	81 87       	std	Z+9, r24	; 0x09
	run_feed = ((feed_enable_switch_port.IN & feed_enable_switch_mask) >> feed_enable_switch_pin_position);
     3b2:	80 85       	ldd	r24, Z+8	; 0x08
     3b4:	84 70       	andi	r24, 0x04	; 4
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	95 95       	asr	r25
     3ba:	87 95       	ror	r24
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <run_feed>
	//enable interrupts once clock updated
	sei();
     3c4:	78 94       	sei
}	
     3c6:	ff 91       	pop	r31
     3c8:	ef 91       	pop	r30
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <_Z14cpu_clock_initv>:
}


//setup the CPU full 20MHz
void cpu_clock_init(void) {
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, 0);
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	88 ed       	ldi	r24, 0xD8	; 216
     3dc:	84 bf       	out	0x34, r24	; 52
     3de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_ZL27spindle_clock_divider_array+0x7f6bc5>
     3e2:	08 95       	ret

000003e4 <_Z8init_ADCv>:
//Setup ADC
void init_ADC()
{
	//TINY - setup ADC
	//VREF - setup voltage reference to 4.3V
	VREF.CTRLA = VREF_ADC0REFSEL_4V34_gc;
     3e4:	e0 ea       	ldi	r30, 0xA0	; 160
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 e3       	ldi	r24, 0x30	; 48
     3ea:	80 83       	st	Z, r24
	//VREF - enable ADC ref
	VREF.CTRLB |= VREF_ADC0REFEN_bm;
     3ec:	81 81       	ldd	r24, Z+1	; 0x01
     3ee:	82 60       	ori	r24, 0x02	; 2
     3f0:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select resolution 8bit
	ADC0.CTRLA = ADC_RESSEL_8BIT_gc;
     3f2:	e0 e0       	ldi	r30, 0x00	; 0
     3f4:	f6 e0       	ldi	r31, 0x06	; 6
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	80 83       	st	Z, r24
	//ADC - number of convertions accumulated per measurement
	ADC0.CTRLB = ADC_SAMPNUM_ACC8_gc;
     3fa:	83 e0       	ldi	r24, 0x03	; 3
     3fc:	81 83       	std	Z+1, r24	; 0x01
	//ADC - select reference
	ADC0.CTRLC = ADC_REFSEL_INTREF_gc;
     3fe:	12 82       	std	Z+2, r1	; 0x02
	//ADC - sampling rate pre-scaler ~1.25MHz
	ADC0.CTRLC = ADC_PRESC_DIV16_gc;
     400:	82 83       	std	Z+2, r24	; 0x02
	//ADC - initial input PA3 / AIN3
	ADC0.MUXPOS = ADC_MUXPOS_AIN3_gc;
     402:	86 83       	std	Z+6, r24	; 0x06
	//ADC - enable start event (start measuring on enable)
	ADC0.EVCTRL |= ADC_STARTEI_bm;
     404:	81 85       	ldd	r24, Z+9	; 0x09
     406:	81 60       	ori	r24, 0x01	; 1
     408:	81 87       	std	Z+9, r24	; 0x09
	//ADC - enable ADC (ready for measurement trigger)
	ADC0.CTRLA |= ADC_ENABLE_bm;
     40a:	80 81       	ld	r24, Z
     40c:	81 60       	ori	r24, 0x01	; 1
     40e:	80 83       	st	Z, r24
     410:	08 95       	ret

00000412 <_Z11init_timersv>:
//setup - Counter A & B
void init_timers()
{
	//TCA0 - setup 8bit
	//enable split mode on TCA0 to allow signal to get to pin C3
	TCA0.SINGLE.CTRLD = TCA_SINGLE_SPLITM_bm;
     412:	e0 e0       	ldi	r30, 0x00	; 0
     414:	fa e0       	ldi	r31, 0x0A	; 10
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	93 83       	std	Z+3, r25	; 0x03
	TCA0.SPLIT.HPER = 255; //longest wait for given clock
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	87 a3       	std	Z+39, r24	; 0x27
	TCA0.SPLIT.HCMP0 = 128;
     41e:	80 e8       	ldi	r24, 0x80	; 128
     420:	81 a7       	std	Z+41, r24	; 0x29
	TCA0.SPLIT.HCNT = 0; 
     422:	11 a2       	std	Z+33, r1	; 0x21
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm;
     424:	80 e1       	ldi	r24, 0x10	; 16
     426:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SPLIT.DBGCTRL |= TCA_SPLIT_DBGRUN_bm;
     428:	86 85       	ldd	r24, Z+14	; 0x0e
     42a:	81 60       	ori	r24, 0x01	; 1
     42c:	86 87       	std	Z+14, r24	; 0x0e
	
	//scale main clock - default
	spindle_clock_divider = 5;
     42e:	85 e0       	ldi	r24, 0x05	; 5
     430:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <spindle_clock_divider>
	TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     434:	a0 91 19 3e 	lds	r26, 0x3E19	; 0x803e19 <spindle_clock_divider>
     438:	20 81       	ld	r18, Z
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	a8 56       	subi	r26, 0x68	; 104
     43e:	bb 46       	sbci	r27, 0x6B	; 107
     440:	8c 91       	ld	r24, X
     442:	82 2b       	or	r24, r18
     444:	80 83       	st	Z, r24
	
	//TCB0 - setup 16bit
	TCB0.CCMP = 0; //set pulse length - high 
     446:	e0 e4       	ldi	r30, 0x40	; 64
     448:	fa e0       	ldi	r31, 0x0A	; 10
     44a:	14 86       	std	Z+12, r1	; 0x0c
     44c:	15 86       	std	Z+13, r1	; 0x0d

	//set 8bit PWM mode - this connects it to its pin PA5 (or alternate)
	TCB0.CTRLA = 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
				| 0 << TCB_SYNCUPD_bp /* Synchronize Update: enabled */
				| TCB_CLKSEL_CLKDIV1_gc  /* use MAIN as clock source */
				| 0 << TCB_ENABLE_bp;   /* Enable: disabled */
     44e:	10 82       	st	Z, r1

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
				| 0 << TCB_CCMPINIT_bp /* Pin Initial State: enabled, used for input operations */
				| 0 << TCB_CCMPEN_bp   /* Pin Output Enable: enabled */
				| TCB_CNTMODE_INT_gc; /* Periodic Interrupt */
     450:	11 82       	std	Z+1, r1	; 0x01
	
	TCB0.DBGCTRL |= TCB_DBGRUN_bm;
     452:	80 85       	ldd	r24, Z+8	; 0x08
     454:	81 60       	ori	r24, 0x01	; 1
     456:	80 87       	std	Z+8, r24	; 0x08
	
	TCB0.INTCTRL = TCB_CAPT_bm; //enable interrupt for clocking pin
     458:	95 83       	std	Z+5, r25	; 0x05
     45a:	08 95       	ret

0000045c <_Z7get_adch>:

//read ADC value
uint16_t get_adc(uint8_t sel_pin)
{
	//wait for current measurement to finish
	while((ADC0.COMMAND & ADC_STCONV_bm) == 1){}
     45c:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <_ZL27spindle_clock_divider_array+0x7f716c>
     460:	90 fd       	sbrc	r25, 0
     462:	fc cf       	rjmp	.-8      	; 0x45c <_Z7get_adch>
	//select input PA2 / AIN2
	ADC0.MUXPOS = sel_pin;
     464:	e0 e0       	ldi	r30, 0x00	; 0
     466:	f6 e0       	ldi	r31, 0x06	; 6
     468:	86 83       	std	Z+6, r24	; 0x06
	//trigger reading
	ADC0.COMMAND |= ADC_STCONV_bm;
     46a:	80 85       	ldd	r24, Z+8	; 0x08
     46c:	81 60       	ori	r24, 0x01	; 1
     46e:	80 87       	std	Z+8, r24	; 0x08
	//wait while reading taken
	while((ADC0.COMMAND & ADC_STCONV_bm) == 1){}
     470:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <_ZL27spindle_clock_divider_array+0x7f716c>
     474:	80 fd       	sbrc	r24, 0
     476:	fc cf       	rjmp	.-8      	; 0x470 <_Z7get_adch+0x14>
	//process result
	uint8_t result = uint8_t(ADC0.RES/8); //divide by number of samples accumulated
     478:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <_ZL27spindle_clock_divider_array+0x7f7174>
     47c:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <_ZL27spindle_clock_divider_array+0x7f7175>
     480:	96 95       	lsr	r25
     482:	87 95       	ror	r24
     484:	96 95       	lsr	r25
     486:	87 95       	ror	r24
     488:	96 95       	lsr	r25
     48a:	87 95       	ror	r24
	return result;
}
     48c:	99 27       	eor	r25, r25
     48e:	08 95       	ret

00000490 <_Z7rpm_outj>:

//update LED rpm from ADC
uint16_t rpm_out(uint16_t per_size)
{
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
	
	uint16_t out_number = uint16_t(((float)cpu_speed / ((float)spindle_clock_divider_array[spindle_clock_divider]*float(per_size)*(float)spindle_steps)));
     49e:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	e4 56       	subi	r30, 0x64	; 100
     4aa:	fb 46       	sbci	r31, 0x6B	; 107
     4ac:	60 81       	ld	r22, Z
     4ae:	71 81       	ldd	r23, Z+1	; 0x01
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	b1 d6       	rcall	.+3426   	; 0x1218 <__floatunsisf>
     4b6:	6b 01       	movw	r12, r22
     4b8:	7c 01       	movw	r14, r24
     4ba:	be 01       	movw	r22, r28
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	ab d6       	rcall	.+3414   	; 0x1218 <__floatunsisf>
     4c2:	9b 01       	movw	r18, r22
     4c4:	ac 01       	movw	r20, r24
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	39 d7       	rcall	.+3698   	; 0x133e <__mulsf3>
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	48 ec       	ldi	r20, 0xC8	; 200
     4d2:	54 e4       	ldi	r21, 0x44	; 68
     4d4:	34 d7       	rcall	.+3688   	; 0x133e <__mulsf3>
     4d6:	9b 01       	movw	r18, r22
     4d8:	ac 01       	movw	r20, r24
     4da:	68 e1       	ldi	r22, 0x18	; 24
     4dc:	7d e0       	ldi	r23, 0x0D	; 13
     4de:	8f e8       	ldi	r24, 0x8F	; 143
     4e0:	9e e4       	ldi	r25, 0x4E	; 78
     4e2:	f2 d5       	rcall	.+3044   	; 0x10c8 <__divsf3>
     4e4:	6a d6       	rcall	.+3284   	; 0x11ba <__fixunssfsi>
	
	return out_number;
	
}
     4e6:	cb 01       	movw	r24, r22
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	08 95       	ret

000004f6 <_Z15ramp_spindle_upv>:


void ramp_spindle_up()
{
	//ramp the frequency
	for (uint8_t n = 255; n >= analogue_value; n--)
     4f6:	2f ef       	ldi	r18, 0xFF	; 255
     4f8:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     4fc:	28 17       	cp	r18, r24
     4fe:	60 f1       	brcs	.+88     	; 0x558 <_Z15ramp_spindle_upv+0x62>
	{
		TCA0.SPLIT.HPER = n;
     500:	e0 e0       	ldi	r30, 0x00	; 0
     502:	fa e0       	ldi	r31, 0x0A	; 10
     504:	27 a3       	std	Z+39, r18	; 0x27
		TCA0.SPLIT.HCMP0 = n/2; //HPER divide by 2 ~50% duty cycle
     506:	82 2f       	mov	r24, r18
     508:	86 95       	lsr	r24
     50a:	81 a7       	std	Z+41, r24	; 0x29
		//calculate current rpm
		//calculate next rpm
		//calculate difference
		//calculate steps to match required acceleration rpm/second 
		
		spindle_ramp_counter = ramp_loops;
     50c:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <ramp_loops>
     510:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <ramp_loops+0x1>
     514:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_ramp_counter>
     518:	90 93 1e 3e 	sts	0x3E1E, r25	; 0x803e1e <spindle_ramp_counter+0x1>
		
		TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm; //enable interrupt flag
     51c:	82 85       	ldd	r24, Z+10	; 0x0a
     51e:	82 60       	ori	r24, 0x02	; 2
     520:	82 87       	std	Z+10, r24	; 0x0a
		
		while (spindle_ramp_counter != 0 && run_spindle == 1)
     522:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     526:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     52a:	89 2b       	or	r24, r25
     52c:	31 f0       	breq	.+12     	; 0x53a <_Z15ramp_spindle_upv+0x44>
     52e:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	21 f0       	breq	.+8      	; 0x53e <_Z15ramp_spindle_upv+0x48>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	03 c0       	rjmp	.+6      	; 0x540 <_Z15ramp_spindle_upv+0x4a>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	01 c0       	rjmp	.+2      	; 0x540 <_Z15ramp_spindle_upv+0x4a>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	81 11       	cpse	r24, r1
     542:	ef cf       	rjmp	.-34     	; 0x522 <_Z15ramp_spindle_upv+0x2c>
			//hold here until interrupt loop finished
			//delay equal to 
		}
		
		//if ramp up canceled then exit and disable
		if (run_spindle == 0)
     544:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     548:	81 11       	cpse	r24, r1
     54a:	04 c0       	rjmp	.+8      	; 0x554 <_Z15ramp_spindle_upv+0x5e>
		{
			//disable spindle
			spindle_enable_port.OUTCLR = spindle_enable_mask;
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6faa>
			
			//exit ramp up
			return;
     552:	08 95       	ret


void ramp_spindle_up()
{
	//ramp the frequency
	for (uint8_t n = 255; n >= analogue_value; n--)
     554:	21 50       	subi	r18, 0x01	; 1
     556:	d0 cf       	rjmp	.-96     	; 0x4f8 <_Z15ramp_spindle_upv+0x2>
     558:	08 95       	ret

0000055a <_Z17ramp_spindle_downv>:


void ramp_spindle_down()
{
	//ramp the frequency
	for (uint8_t n = analogue_value; n <= 64; n++)
     55a:	20 91 24 3e 	lds	r18, 0x3E24	; 0x803e24 <analogue_value>
     55e:	21 34       	cpi	r18, 0x41	; 65
     560:	c8 f4       	brcc	.+50     	; 0x594 <_Z17ramp_spindle_downv+0x3a>
	{
		TCA0.SPLIT.HPER = n;
     562:	e0 e0       	ldi	r30, 0x00	; 0
     564:	fa e0       	ldi	r31, 0x0A	; 10
     566:	27 a3       	std	Z+39, r18	; 0x27
		TCA0.SPLIT.HCMP0 = n/2; //HPER divide by 2 ~50% duty cycle
     568:	82 2f       	mov	r24, r18
     56a:	86 95       	lsr	r24
     56c:	81 a7       	std	Z+41, r24	; 0x29
		
		spindle_ramp_counter = ramp_loops;
     56e:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <ramp_loops>
     572:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <ramp_loops+0x1>
     576:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <spindle_ramp_counter>
     57a:	90 93 1e 3e 	sts	0x3E1E, r25	; 0x803e1e <spindle_ramp_counter+0x1>
		
		TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm; //enable interrupt flag
     57e:	82 85       	ldd	r24, Z+10	; 0x0a
     580:	82 60       	ori	r24, 0x02	; 2
     582:	82 87       	std	Z+10, r24	; 0x0a
		
		while (spindle_ramp_counter != 0)
     584:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     588:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     58c:	89 2b       	or	r24, r25
     58e:	d1 f7       	brne	.-12     	; 0x584 <_Z17ramp_spindle_downv+0x2a>


void ramp_spindle_down()
{
	//ramp the frequency
	for (uint8_t n = analogue_value; n <= 64; n++)
     590:	2f 5f       	subi	r18, 0xFF	; 255
     592:	e5 cf       	rjmp	.-54     	; 0x55e <_Z17ramp_spindle_downv+0x4>
     594:	08 95       	ret

00000596 <main>:

///////////////////////////////////////////////////////////////////////////////
///////////////////////// START of MAIN ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
int main(void)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	26 97       	sbiw	r28, 0x06	; 6
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	de bf       	out	0x3e, r29	; 62
	//set CPU to run at full speed (default is 3.3MHz)
	cpu_clock_init();
     5a4:	19 df       	rcall	.-462    	; 0x3d8 <_Z14cpu_clock_initv>
	
	//set input, pull-ups on pins, interrupt from pins, etc
	spindle_enable_switch_control =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm; 
     5a6:	e0 e0       	ldi	r30, 0x00	; 0
     5a8:	f4 e0       	ldi	r31, 0x04	; 4
     5aa:	89 e8       	ldi	r24, 0x89	; 137
     5ac:	86 8b       	std	Z+22, r24	; 0x16
	spindle_direction_switch_control =	PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     5ae:	87 8b       	std	Z+23, r24	; 0x17
	feed_enable_switch_control =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     5b0:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <_ZL27spindle_clock_divider_array+0x7f6f96>
	feed_direction_switch_control =		PORT_ISC_BOTHEDGES_gc | PORT_PULLUPEN_bm | PORT_INVEN_bm;
     5b4:	84 8b       	std	Z+20, r24	; 0x14

	//set outputs
	step_spindle_port.DIRSET = step_spindle_mask;
     5b6:	e0 e4       	ldi	r30, 0x40	; 64
     5b8:	f4 e0       	ldi	r31, 0x04	; 4
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	81 83       	std	Z+1, r24	; 0x01
	step_spindle_port.OUTCLR = step_spindle_mask;
     5be:	86 83       	std	Z+6, r24	; 0x06
	PORTMUX.CTRLC = PORTMUX_TCA03_ALTERNATE_gc; //TCA03 alt pin
     5c0:	a0 e0       	ldi	r26, 0x00	; 0
     5c2:	b2 e0       	ldi	r27, 0x02	; 2
     5c4:	12 96       	adiw	r26, 0x02	; 2
     5c6:	8c 93       	st	X, r24
     5c8:	12 97       	sbiw	r26, 0x02	; 2
	
	step_feed_port.DIRSET = step_feed_mask;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	81 83       	std	Z+1, r24	; 0x01
	step_feed_port.OUTCLR = step_feed_mask;
     5ce:	86 83       	std	Z+6, r24	; 0x06
	PORTMUX.CTRLD = PORTMUX_TCB0_ALTERNATE_gc; //TCB0 alt pin
     5d0:	13 96       	adiw	r26, 0x03	; 3
     5d2:	8c 93       	st	X, r24
	
	
	spindle_enable_control = PORT_INVEN_bm;
     5d4:	80 e8       	ldi	r24, 0x80	; 128
     5d6:	81 8b       	std	Z+17, r24	; 0x11
	spindle_enable_port.DIRSET = spindle_enable_mask;
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	91 83       	std	Z+1, r25	; 0x01
	spindle_enable_port.OUTCLR = spindle_enable_mask;
     5dc:	96 83       	std	Z+6, r25	; 0x06
	
	feed_enable_control = PORT_INVEN_bm;
     5de:	82 8b       	std	Z+18, r24	; 0x12
	feed_enable_port.DIRSET = feed_enable_mask;
     5e0:	84 e0       	ldi	r24, 0x04	; 4
     5e2:	81 83       	std	Z+1, r24	; 0x01
	feed_enable_port.OUTCLR = feed_enable_mask;
     5e4:	86 83       	std	Z+6, r24	; 0x06
	
	
	//initialise 
	init_ADC();
     5e6:	fe de       	rcall	.-516    	; 0x3e4 <_Z8init_ADCv>
	led.init();
     5e8:	85 e0       	ldi	r24, 0x05	; 5
     5ea:	9e e3       	ldi	r25, 0x3E	; 62
     5ec:	15 d4       	rcall	.+2090   	; 0xe18 <_ZN6TM16374initEv>
	bcd_input.init();
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	9e e3       	ldi	r25, 0x3E	; 62
     5f2:	47 dd       	rcall	.-1394   	; 0x82 <_ZN11bcd_encoder4initEv>
	
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
     5f4:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     5f8:	81 30       	cpi	r24, 0x01	; 1
     5fa:	b9 f5       	brne	.+110    	; 0x66a <main+0xd4>
	{
		while ( (spindle_enable_switch_port.IN & spindle_enable_switch_mask) >= 1 
     5fc:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZL27spindle_clock_divider_array+0x7f6f6c>
		|| (spindle_direction_switch_port.IN & spindle_direction_switch_mask) >= 1
		|| (feed_enable_switch_port.IN & feed_enable_switch_mask) >= 1
		|| (feed_direction_switch_port.IN & feed_direction_switch_mask) >= 1 )
     600:	86 fd       	sbrc	r24, 6
     602:	0e c0       	rjmp	.+28     	; 0x620 <main+0x8a>
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
	{
		while ( (spindle_enable_switch_port.IN & spindle_enable_switch_mask) >= 1 
		|| (spindle_direction_switch_port.IN & spindle_direction_switch_mask) >= 1
     604:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZL27spindle_clock_divider_array+0x7f6f6c>
     608:	88 23       	and	r24, r24
     60a:	64 f0       	brlt	.+24     	; 0x624 <main+0x8e>
		|| (feed_enable_switch_port.IN & feed_enable_switch_mask) >= 1
     60c:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <_ZL27spindle_clock_divider_array+0x7f6f8c>
     610:	82 fd       	sbrc	r24, 2
     612:	0a c0       	rjmp	.+20     	; 0x628 <main+0x92>
		|| (feed_direction_switch_port.IN & feed_direction_switch_mask) >= 1 )
     614:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZL27spindle_clock_divider_array+0x7f6f6c>
     618:	84 ff       	sbrs	r24, 4
     61a:	08 c0       	rjmp	.+16     	; 0x62c <main+0x96>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	07 c0       	rjmp	.+14     	; 0x62e <main+0x98>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	05 c0       	rjmp	.+10     	; 0x62e <main+0x98>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	03 c0       	rjmp	.+6      	; 0x62e <main+0x98>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	01 c0       	rjmp	.+2      	; 0x62e <main+0x98>
     62c:	80 e0       	ldi	r24, 0x00	; 0
	
	
	//on startup if any switches (enable or direction are enabled, halt and wait for safe state
	if (interlock == 1)
	{
		while ( (spindle_enable_switch_port.IN & spindle_enable_switch_mask) >= 1 
     62e:	81 11       	cpse	r24, r1
     630:	e5 cf       	rjmp	.-54     	; 0x5fc <main+0x66>
		
		{
				//wait
		}
		
		interlock = 0;
     632:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
		
		//position lock the spindle
		spindle_enable_port.OUTSET = spindle_enable_mask;
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZL27spindle_clock_divider_array+0x7f6fa9>
		
		for (uint8_t i = 0; i <= 6; i++)
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	87 30       	cpi	r24, 0x07	; 7
     640:	70 f4       	brcc	.+28     	; 0x65e <main+0xc8>
		{
			step_spindle_port.OUTTGL = step_spindle_mask;
     642:	98 e0       	ldi	r25, 0x08	; 8
     644:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <_ZL27spindle_clock_divider_array+0x7f6fab>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     648:	2f e7       	ldi	r18, 0x7F	; 127
     64a:	3a e1       	ldi	r19, 0x1A	; 26
     64c:	46 e0       	ldi	r20, 0x06	; 6
     64e:	21 50       	subi	r18, 0x01	; 1
     650:	30 40       	sbci	r19, 0x00	; 0
     652:	40 40       	sbci	r20, 0x00	; 0
     654:	e1 f7       	brne	.-8      	; 0x64e <main+0xb8>
     656:	00 c0       	rjmp	.+0      	; 0x658 <main+0xc2>
     658:	00 00       	nop
		interlock = 0;
		
		//position lock the spindle
		spindle_enable_port.OUTSET = spindle_enable_mask;
		
		for (uint8_t i = 0; i <= 6; i++)
     65a:	8f 5f       	subi	r24, 0xFF	; 255
     65c:	f0 cf       	rjmp	.-32     	; 0x63e <main+0xa8>
		{
			step_spindle_port.OUTTGL = step_spindle_mask;
			_delay_ms(min_spindle_driver_pulse_delay);
		}
		
		step_spindle_port.OUTCLR = step_spindle_mask;
     65e:	e0 e4       	ldi	r30, 0x40	; 64
     660:	f4 e0       	ldi	r31, 0x04	; 4
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	86 83       	std	Z+6, r24	; 0x06
		spindle_enable_port.OUTCLR = spindle_enable_mask;
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	86 83       	std	Z+6, r24	; 0x06
	}
	
	
	//can start timers after all safe
	init_timers();
     66a:	d3 de       	rcall	.-602    	; 0x412 <_Z11init_timersv>
	
	//enable interrupts
	sei();
     66c:	78 94       	sei
		
		//////////////////////////////////////////////////////////////////////////
		//main loop
		
		//while waiting for startup
		while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     66e:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     672:	81 11       	cpse	r24, r1
     674:	0a c0       	rjmp	.+20     	; 0x68a <main+0xf4>
     676:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     67a:	81 11       	cpse	r24, r1
     67c:	08 c0       	rjmp	.+16     	; 0x68e <main+0xf8>
     67e:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     682:	88 23       	and	r24, r24
     684:	31 f0       	breq	.+12     	; 0x692 <main+0xfc>
     686:	10 e0       	ldi	r17, 0x00	; 0
     688:	05 c0       	rjmp	.+10     	; 0x694 <main+0xfe>
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	03 c0       	rjmp	.+6      	; 0x694 <main+0xfe>
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	01 c0       	rjmp	.+2      	; 0x694 <main+0xfe>
     692:	11 e0       	ldi	r17, 0x01	; 1
     694:	11 23       	and	r17, r17
     696:	09 f4       	brne	.+2      	; 0x69a <main+0x104>
     698:	21 c1       	rjmp	.+578    	; 0x8dc <main+0x346>
		{
			//disable timers
			TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;
     69a:	e0 e0       	ldi	r30, 0x00	; 0
     69c:	fa e0       	ldi	r31, 0x0A	; 10
     69e:	80 81       	ld	r24, Z
     6a0:	8e 7f       	andi	r24, 0xFE	; 254
     6a2:	80 83       	st	Z, r24
			TCB0.CTRLA &= ~TCB_ENABLE_bm;
     6a4:	a0 e4       	ldi	r26, 0x40	; 64
     6a6:	ba e0       	ldi	r27, 0x0A	; 10
     6a8:	8c 91       	ld	r24, X
     6aa:	8e 7f       	andi	r24, 0xFE	; 254
     6ac:	8c 93       	st	X, r24
			
			//scale main clock - default
			spindle_clock_divider = bins-1; //div_max
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <spindle_clock_divider>
			TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     6b4:	a0 91 19 3e 	lds	r26, 0x3E19	; 0x803e19 <spindle_clock_divider>
     6b8:	90 81       	ld	r25, Z
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	a8 56       	subi	r26, 0x68	; 104
     6be:	bb 46       	sbci	r27, 0x6B	; 107
     6c0:	8c 91       	ld	r24, X
     6c2:	89 2b       	or	r24, r25
     6c4:	80 83       	st	Z, r24
			TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm; //enable timer interrupt
     6c6:	80 e1       	ldi	r24, 0x10	; 16
     6c8:	81 83       	std	Z+1, r24	; 0x01
			//setup safe - lowest frequency
			TCA0.SPLIT.HPER = 255;
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	87 a3       	std	Z+39, r24	; 0x27
			TCA0.SPLIT.HCMP0 = 128;
     6ce:	90 e8       	ldi	r25, 0x80	; 128
     6d0:	91 a7       	std	Z+41, r25	; 0x29
			
			//set the ramp counters to max
			spindle_ramp_counter = -1;
     6d2:	2f ef       	ldi	r18, 0xFF	; 255
     6d4:	3f ef       	ldi	r19, 0xFF	; 255
     6d6:	20 93 1d 3e 	sts	0x3E1D, r18	; 0x803e1d <spindle_ramp_counter>
     6da:	30 93 1e 3e 	sts	0x3E1E, r19	; 0x803e1e <spindle_ramp_counter+0x1>
			feed_ramp_counter = -1;
     6de:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <feed_ramp_counter>
			
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     6e2:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     6e6:	81 11       	cpse	r24, r1
     6e8:	0a c0       	rjmp	.+20     	; 0x6fe <main+0x168>
     6ea:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     6ee:	81 11       	cpse	r24, r1
     6f0:	08 c0       	rjmp	.+16     	; 0x702 <main+0x16c>
     6f2:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     6f6:	88 23       	and	r24, r24
     6f8:	31 f0       	breq	.+12     	; 0x706 <main+0x170>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	05 c0       	rjmp	.+10     	; 0x708 <main+0x172>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	03 c0       	rjmp	.+6      	; 0x708 <main+0x172>
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	01 c0       	rjmp	.+2      	; 0x708 <main+0x172>
     706:	81 2f       	mov	r24, r17
     708:	88 23       	and	r24, r24
     70a:	09 f4       	brne	.+2      	; 0x70e <main+0x178>
     70c:	b0 cf       	rjmp	.-160    	; 0x66e <main+0xd8>
			{
				feed_rate = bcd_input.bcd_to_int(); //read BCD counter
     70e:	84 e0       	ldi	r24, 0x04	; 4
     710:	9e e3       	ldi	r25, 0x3E	; 62
     712:	fe dc       	rcall	.-1540   	; 0x110 <_ZN11bcd_encoder10bcd_to_intEv>
     714:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <feed_rate>
     718:	90 93 1b 3e 	sts	0x3E1B, r25	; 0x803e1b <feed_rate+0x1>
				analogue_value = (255 - get_adc(3)); //read potentiometer
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	9e de       	rcall	.-708    	; 0x45c <_Z7get_adch>
     720:	80 95       	com	r24
     722:	80 93 24 3e 	sts	0x3E24, r24	; 0x803e24 <analogue_value>
				
				//set analogue value based on divider
				analogue_value = (analogue_value / adc_block_size) + 1;
     726:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     72a:	9b ea       	ldi	r25, 0xAB	; 171
     72c:	89 9f       	mul	r24, r25
     72e:	81 2d       	mov	r24, r1
     730:	11 24       	eor	r1, r1
     732:	86 95       	lsr	r24
     734:	86 95       	lsr	r24
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	80 93 24 3e 	sts	0x3E24, r24	; 0x803e24 <analogue_value>
				
				//calculate ideal RPM from analogue value
				if ((uint16_t)analogue_value < (((uint16_t)max_rpm - 100) / 100))
     73c:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     740:	8b 30       	cpi	r24, 0x0B	; 11
     742:	98 f4       	brcc	.+38     	; 0x76a <main+0x1d4>
				{
					spindle_speed = (uint16_t)((uint16_t)max_rpm - ((uint16_t)analogue_value * 100));
     744:	20 91 24 3e 	lds	r18, 0x3E24	; 0x803e24 <analogue_value>
     748:	80 eb       	ldi	r24, 0xB0	; 176
     74a:	94 e0       	ldi	r25, 0x04	; 4
     74c:	54 e6       	ldi	r21, 0x64	; 100
     74e:	25 9f       	mul	r18, r21
     750:	80 19       	sub	r24, r0
     752:	91 09       	sbc	r25, r1
     754:	11 24       	eor	r1, r1
     756:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <spindle_speed>
     75a:	90 93 20 3e 	sts	0x3E20, r25	; 0x803e20 <spindle_speed+0x1>
			//set the ramp counters to max
			spindle_ramp_counter = -1;
			feed_ramp_counter = -1;
			
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     75e:	00 e0       	ldi	r16, 0x00	; 0
     760:	ee 24       	eor	r14, r14
     762:	ea 94       	dec	r14
     764:	fe 2c       	mov	r15, r14
     766:	d1 2c       	mov	r13, r1
     768:	12 c0       	rjmp	.+36     	; 0x78e <main+0x1f8>
				{
					spindle_speed = (uint16_t)((uint16_t)max_rpm - ((uint16_t)analogue_value * 100));
				} 
				else
				{
					spindle_speed =  (uint16_t)(100 - ((uint16_t)analogue_value - ((((uint16_t)max_rpm - 100) / 100) + 1)) * sub_100_steps);
     76a:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	9c 01       	movw	r18, r24
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	82 0f       	add	r24, r18
     778:	93 1f       	adc	r25, r19
     77a:	28 e8       	ldi	r18, 0x88	; 136
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	f9 01       	movw	r30, r18
     780:	e8 1b       	sub	r30, r24
     782:	f9 0b       	sbc	r31, r25
     784:	e0 93 1f 3e 	sts	0x3E1F, r30	; 0x803e1f <spindle_speed>
     788:	f0 93 20 3e 	sts	0x3E20, r31	; 0x803e20 <spindle_speed+0x1>
     78c:	e8 cf       	rjmp	.-48     	; 0x75e <main+0x1c8>
				//calculate closest value clock settings to achieve requested / ideal rpm
				uint8_t temp_integer = 0;
				uint16_t temp_value = -1; //max value
						
				//calculate for each clock divider and keep the one that's closest to the desired rpm
				for (uint8_t n = 0; n < bins; n++)
     78e:	04 30       	cpi	r16, 0x04	; 4
     790:	08 f0       	brcs	.+2      	; 0x794 <main+0x1fe>
     792:	5b c0       	rjmp	.+182    	; 0x84a <main+0x2b4>
				{
					//for each clock divider calculate the integer that gives rpm closest to requested
					uint8_t temp_div_integer = (uint8_t)((float)cpu_speed / ((float)spindle_clock_divider_array[n] * (float)spindle_speed * (float)spindle_steps));
     794:	e0 2f       	mov	r30, r16
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	e4 56       	subi	r30, 0x64	; 100
     79e:	fb 46       	sbci	r31, 0x6B	; 107
     7a0:	60 81       	ld	r22, Z
     7a2:	71 81       	ldd	r23, Z+1	; 0x01
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	37 d5       	rcall	.+2670   	; 0x1218 <__floatunsisf>
     7aa:	4b 01       	movw	r8, r22
     7ac:	5c 01       	movw	r10, r24
     7ae:	60 91 1f 3e 	lds	r22, 0x3E1F	; 0x803e1f <spindle_speed>
     7b2:	70 91 20 3e 	lds	r23, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2e d5       	rcall	.+2652   	; 0x1218 <__floatunsisf>
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	be d5       	rcall	.+2940   	; 0x133e <__mulsf3>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	48 ec       	ldi	r20, 0xC8	; 200
     7c8:	54 e4       	ldi	r21, 0x44	; 68
     7ca:	b9 d5       	rcall	.+2930   	; 0x133e <__mulsf3>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	68 e1       	ldi	r22, 0x18	; 24
     7d2:	7d e0       	ldi	r23, 0x0D	; 13
     7d4:	8f e8       	ldi	r24, 0x8F	; 143
     7d6:	9e e4       	ldi	r25, 0x4E	; 78
     7d8:	77 d4       	rcall	.+2286   	; 0x10c8 <__divsf3>
     7da:	ef d4       	rcall	.+2526   	; 0x11ba <__fixunssfsi>
     7dc:	c6 2e       	mov	r12, r22
					//calculate the rpm values to allow calculation of the closest value
					int16_t temp_div_rpm = (int16_t)(((float)cpu_speed / ((float)spindle_clock_divider_array[n]*float(temp_div_integer)*(float)spindle_steps)));
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	19 d5       	rcall	.+2610   	; 0x1218 <__floatunsisf>
     7e6:	a5 01       	movw	r20, r10
     7e8:	94 01       	movw	r18, r8
     7ea:	a9 d5       	rcall	.+2898   	; 0x133e <__mulsf3>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	48 ec       	ldi	r20, 0xC8	; 200
     7f2:	54 e4       	ldi	r21, 0x44	; 68
     7f4:	a4 d5       	rcall	.+2888   	; 0x133e <__mulsf3>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	68 e1       	ldi	r22, 0x18	; 24
     7fc:	7d e0       	ldi	r23, 0x0D	; 13
     7fe:	8f e8       	ldi	r24, 0x8F	; 143
     800:	9e e4       	ldi	r25, 0x4E	; 78
     802:	62 d4       	rcall	.+2244   	; 0x10c8 <__divsf3>
     804:	d3 d4       	rcall	.+2470   	; 0x11ac <__fixsfsi>
					//compare values to current best value
					if ((uint16_t)abs((int16_t)spindle_speed - temp_div_rpm) < temp_value)
     806:	20 91 1f 3e 	lds	r18, 0x3E1F	; 0x803e1f <spindle_speed>
     80a:	30 91 20 3e 	lds	r19, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     80e:	a9 01       	movw	r20, r18
     810:	46 1b       	sub	r20, r22
     812:	57 0b       	sbc	r21, r23
     814:	9a 01       	movw	r18, r20
     816:	22 f4       	brpl	.+8      	; 0x820 <main+0x28a>
     818:	22 27       	eor	r18, r18
     81a:	33 27       	eor	r19, r19
     81c:	24 1b       	sub	r18, r20
     81e:	35 0b       	sbc	r19, r21
     820:	2e 15       	cp	r18, r14
     822:	3f 05       	cpc	r19, r15
     824:	80 f4       	brcc	.+32     	; 0x846 <main+0x2b0>
					{
						temp_value = abs(spindle_speed - temp_div_rpm);
     826:	20 91 1f 3e 	lds	r18, 0x3E1F	; 0x803e1f <spindle_speed>
     82a:	30 91 20 3e 	lds	r19, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     82e:	c9 01       	movw	r24, r18
     830:	86 1b       	sub	r24, r22
     832:	97 0b       	sbc	r25, r23
     834:	7c 01       	movw	r14, r24
     836:	22 f4       	brpl	.+8      	; 0x840 <main+0x2aa>
     838:	ee 24       	eor	r14, r14
     83a:	ff 24       	eor	r15, r15
     83c:	e8 1a       	sub	r14, r24
     83e:	f9 0a       	sbc	r15, r25
						temp_integer = temp_div_integer;
						spindle_clock_divider = n;
     840:	00 93 19 3e 	sts	0x3E19, r16	; 0x803e19 <spindle_clock_divider>
					int16_t temp_div_rpm = (int16_t)(((float)cpu_speed / ((float)spindle_clock_divider_array[n]*float(temp_div_integer)*(float)spindle_steps)));
					//compare values to current best value
					if ((uint16_t)abs((int16_t)spindle_speed - temp_div_rpm) < temp_value)
					{
						temp_value = abs(spindle_speed - temp_div_rpm);
						temp_integer = temp_div_integer;
     844:	dc 2c       	mov	r13, r12
				//calculate closest value clock settings to achieve requested / ideal rpm
				uint8_t temp_integer = 0;
				uint16_t temp_value = -1; //max value
						
				//calculate for each clock divider and keep the one that's closest to the desired rpm
				for (uint8_t n = 0; n < bins; n++)
     846:	0f 5f       	subi	r16, 0xFF	; 255
     848:	a2 cf       	rjmp	.-188    	; 0x78e <main+0x1f8>
						spindle_clock_divider = n;
					}
				}
				
				//update analogue value to nearest value for the selected clock divider
				analogue_value = temp_integer;
     84a:	d0 92 24 3e 	sts	0x3E24, r13	; 0x803e24 <analogue_value>
				
				ramp_loops = (uint16_t)(ramp_acceleration * ((float)cpu_speed / ((float)spindle_clock_divider_array[spindle_clock_divider] * analogue_value * 1200)));
     84e:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	e4 56       	subi	r30, 0x64	; 100
     85a:	fb 46       	sbci	r31, 0x6B	; 107
     85c:	60 81       	ld	r22, Z
     85e:	71 81       	ldd	r23, Z+1	; 0x01
     860:	00 91 24 3e 	lds	r16, 0x3E24	; 0x803e24 <analogue_value>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	d7 d4       	rcall	.+2478   	; 0x1218 <__floatunsisf>
     86a:	6b 01       	movw	r12, r22
     86c:	7c 01       	movw	r14, r24
     86e:	60 2f       	mov	r22, r16
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	d2 d4       	rcall	.+2468   	; 0x121c <__floatsisf>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	5e d5       	rcall	.+2748   	; 0x133e <__mulsf3>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	46 e9       	ldi	r20, 0x96	; 150
     888:	54 e4       	ldi	r21, 0x44	; 68
     88a:	59 d5       	rcall	.+2738   	; 0x133e <__mulsf3>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	68 e1       	ldi	r22, 0x18	; 24
     892:	7d e0       	ldi	r23, 0x0D	; 13
     894:	8f e8       	ldi	r24, 0x8F	; 143
     896:	9e e4       	ldi	r25, 0x4E	; 78
     898:	17 d4       	rcall	.+2094   	; 0x10c8 <__divsf3>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e2       	ldi	r20, 0x20	; 32
     8a0:	51 e4       	ldi	r21, 0x41	; 65
     8a2:	4d d5       	rcall	.+2714   	; 0x133e <__mulsf3>
     8a4:	8a d4       	rcall	.+2324   	; 0x11ba <__fixunssfsi>
     8a6:	60 93 01 3e 	sts	0x3E01, r22	; 0x803e01 <ramp_loops>
     8aa:	70 93 02 3e 	sts	0x3E02, r23	; 0x803e02 <ramp_loops+0x1>
				
				//update the clock divider.
				cli();
     8ae:	f8 94       	cli
				TCA0.SPLIT.CTRLA = 0;
     8b0:	a0 e0       	ldi	r26, 0x00	; 0
     8b2:	ba e0       	ldi	r27, 0x0A	; 10
     8b4:	1c 92       	st	X, r1
				TCA0.SPLIT.CTRLA |= divider_array[spindle_clock_divider];
     8b6:	e0 91 19 3e 	lds	r30, 0x3E19	; 0x803e19 <spindle_clock_divider>
     8ba:	9c 91       	ld	r25, X
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	e8 56       	subi	r30, 0x68	; 104
     8c0:	fb 46       	sbci	r31, 0x6B	; 107
     8c2:	80 81       	ld	r24, Z
     8c4:	89 2b       	or	r24, r25
     8c6:	8c 93       	st	X, r24
				sei();
     8c8:	78 94       	sei
				
				
				led.send_number(rpm_out(analogue_value)); //sends the rpm
     8ca:	80 91 24 3e 	lds	r24, 0x3E24	; 0x803e24 <analogue_value>
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	df dd       	rcall	.-1090   	; 0x490 <_Z7rpm_outj>
     8d2:	bc 01       	movw	r22, r24
     8d4:	85 e0       	ldi	r24, 0x05	; 5
     8d6:	9e e3       	ldi	r25, 0x3E	; 62
     8d8:	d4 d2       	rcall	.+1448   	; 0xe82 <_ZN6TM163711send_numberEj>
			//set the ramp counters to max
			spindle_ramp_counter = -1;
			feed_ramp_counter = -1;
			
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 0)
     8da:	03 cf       	rjmp	.-506    	; 0x6e2 <main+0x14c>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//spindle only
		while ( (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 0) || (interlock == 0 && run_spindle == 1 && run_feed == 0 && dir_spindle == 1 && spindle_speed <= 20) )
     8dc:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     8e0:	81 11       	cpse	r24, r1
     8e2:	0c c0       	rjmp	.+24     	; 0x8fc <main+0x366>
     8e4:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	41 f4       	brne	.+16     	; 0x8fc <main+0x366>
     8ec:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     8f0:	81 11       	cpse	r24, r1
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <main+0x366>
     8f4:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <dir_spindle>
     8f8:	88 23       	and	r24, r24
     8fa:	c1 f0       	breq	.+48     	; 0x92c <main+0x396>
     8fc:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     900:	81 11       	cpse	r24, r1
     902:	17 c0       	rjmp	.+46     	; 0x932 <main+0x39c>
     904:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	a9 f4       	brne	.+42     	; 0x936 <main+0x3a0>
     90c:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     910:	81 11       	cpse	r24, r1
     912:	13 c0       	rjmp	.+38     	; 0x93a <main+0x3a4>
     914:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <dir_spindle>
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	89 f4       	brne	.+34     	; 0x93e <main+0x3a8>
     91c:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     920:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     924:	45 97       	sbiw	r24, 0x15	; 21
     926:	68 f0       	brcs	.+26     	; 0x942 <main+0x3ac>
     928:	f1 2e       	mov	r15, r17
     92a:	0d c0       	rjmp	.+26     	; 0x946 <main+0x3b0>
     92c:	ff 24       	eor	r15, r15
     92e:	f3 94       	inc	r15
     930:	0a c0       	rjmp	.+20     	; 0x946 <main+0x3b0>
     932:	f1 2e       	mov	r15, r17
     934:	08 c0       	rjmp	.+16     	; 0x946 <main+0x3b0>
     936:	f1 2e       	mov	r15, r17
     938:	06 c0       	rjmp	.+12     	; 0x946 <main+0x3b0>
     93a:	f1 2e       	mov	r15, r17
     93c:	04 c0       	rjmp	.+8      	; 0x946 <main+0x3b0>
     93e:	f1 2e       	mov	r15, r17
     940:	02 c0       	rjmp	.+4      	; 0x946 <main+0x3b0>
     942:	ff 24       	eor	r15, r15
     944:	f3 94       	inc	r15
     946:	ff 20       	and	r15, r15
     948:	09 f4       	brne	.+2      	; 0x94c <main+0x3b6>
     94a:	44 c0       	rjmp	.+136    	; 0x9d4 <main+0x43e>
     94c:	ff e7       	ldi	r31, 0x7F	; 127
     94e:	2a e1       	ldi	r18, 0x1A	; 26
     950:	36 e0       	ldi	r19, 0x06	; 6
     952:	f1 50       	subi	r31, 0x01	; 1
     954:	20 40       	sbci	r18, 0x00	; 0
     956:	30 40       	sbci	r19, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <main+0x3bc>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <main+0x3c6>
     95c:	00 00       	nop
		{
			_delay_ms(min_spindle_driver_pulse_delay);
			
			uint8_t old_dir_spindle = dir_spindle;
     95e:	00 91 22 3e 	lds	r16, 0x3E22	; 0x803e22 <dir_spindle>
			
			//check for previous running
			if (spindle_ramp_counter != 0)
     962:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     966:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     96a:	89 2b       	or	r24, r25
     96c:	79 f0       	breq	.+30     	; 0x98c <main+0x3f6>
			{				
				//enable timers
				TCA0.SPLIT.CTRLA |= TCB_ENABLE_bm;
     96e:	e0 e0       	ldi	r30, 0x00	; 0
     970:	fa e0       	ldi	r31, 0x0A	; 10
     972:	80 81       	ld	r24, Z
     974:	81 60       	ori	r24, 0x01	; 1
     976:	80 83       	st	Z, r24
				
				//enable spindle motor
				spindle_enable_port.OUTSET = spindle_enable_mask;
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZL27spindle_clock_divider_array+0x7f6fa9>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     97e:	83 ef       	ldi	r24, 0xF3	; 243
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <main+0x3ec>
     986:	00 c0       	rjmp	.+0      	; 0x988 <main+0x3f2>
     988:	00 00       	nop
				_delay_us(min_spindle_driver_pulse_delay); //delay to allow init of driver
				
				//ramp up
				ramp_spindle_up();	
     98a:	b5 dd       	rcall	.-1174   	; 0x4f6 <_Z15ramp_spindle_upv>
			}
					
			while (interlock == 0 && run_spindle == 1 && run_feed == 0)
     98c:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     990:	81 11       	cpse	r24, r1
     992:	0a c0       	rjmp	.+20     	; 0x9a8 <main+0x412>
     994:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     998:	81 30       	cpi	r24, 0x01	; 1
     99a:	41 f4       	brne	.+16     	; 0x9ac <main+0x416>
     99c:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     9a0:	88 23       	and	r24, r24
     9a2:	31 f0       	breq	.+12     	; 0x9b0 <main+0x41a>
     9a4:	81 2f       	mov	r24, r17
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <main+0x41c>
     9a8:	81 2f       	mov	r24, r17
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <main+0x41c>
     9ac:	81 2f       	mov	r24, r17
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <main+0x41c>
     9b0:	8f 2d       	mov	r24, r15
     9b2:	81 11       	cpse	r24, r1
     9b4:	eb cf       	rjmp	.-42     	; 0x98c <main+0x3f6>
			{
				//hold here until interrupt
			}
			
			//if spindle off after interrupt, then ramp down the spindle
			if (run_spindle == 0 && old_dir_spindle == 0)
     9b6:	90 91 23 3e 	lds	r25, 0x3E23	; 0x803e23 <run_spindle>
     9ba:	91 11       	cpse	r25, r1
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <main+0x42e>
     9be:	01 11       	cpse	r16, r1
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <main+0x42e>
     9c2:	8f 2d       	mov	r24, r15
     9c4:	88 23       	and	r24, r24
     9c6:	09 f4       	brne	.+2      	; 0x9ca <main+0x434>
     9c8:	89 cf       	rjmp	.-238    	; 0x8dc <main+0x346>
			{
				//ramp speed down
				ramp_spindle_down();
     9ca:	c7 dd       	rcall	.-1138   	; 0x55a <_Z17ramp_spindle_downv>
				
				//disable spindle
				spindle_enable_port.OUTCLR = spindle_enable_mask;
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6faa>
     9d2:	84 cf       	rjmp	.-248    	; 0x8dc <main+0x346>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//feed only
		while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     9d4:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     9d8:	81 11       	cpse	r24, r1
     9da:	0a c0       	rjmp	.+20     	; 0x9f0 <main+0x45a>
     9dc:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     9e0:	81 11       	cpse	r24, r1
     9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <main+0x45e>
     9e4:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	31 f0       	breq	.+12     	; 0x9f8 <main+0x462>
     9ec:	0f 2d       	mov	r16, r15
     9ee:	05 c0       	rjmp	.+10     	; 0x9fa <main+0x464>
     9f0:	0f 2d       	mov	r16, r15
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <main+0x464>
     9f4:	0f 2d       	mov	r16, r15
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <main+0x464>
     9f8:	01 e0       	ldi	r16, 0x01	; 1
     9fa:	00 23       	and	r16, r16
     9fc:	a1 f1       	breq	.+104    	; 0xa66 <main+0x4d0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fe:	9f e7       	ldi	r25, 0x7F	; 127
     a00:	ea e1       	ldi	r30, 0x1A	; 26
     a02:	f6 e0       	ldi	r31, 0x06	; 6
     a04:	91 50       	subi	r25, 0x01	; 1
     a06:	e0 40       	sbci	r30, 0x00	; 0
     a08:	f0 40       	sbci	r31, 0x00	; 0
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <main+0x46e>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <main+0x478>
     a0e:	00 00       	nop
		{
			_delay_ms(min_spindle_driver_pulse_delay);
			
			//set feed rate
			TCB0.CCMP = feed_default_PER; //set pulse length
     a10:	e0 e4       	ldi	r30, 0x40	; 64
     a12:	fa e0       	ldi	r31, 0x0A	; 10
     a14:	80 e2       	ldi	r24, 0x20	; 32
     a16:	93 e0       	ldi	r25, 0x03	; 3
     a18:	84 87       	std	Z+12, r24	; 0x0c
     a1a:	95 87       	std	Z+13, r25	; 0x0d
			
			//enable timers
			TCB0.CTRLA |= TCB_ENABLE_bm;
     a1c:	80 81       	ld	r24, Z
     a1e:	81 60       	ori	r24, 0x01	; 1
     a20:	80 83       	st	Z, r24
			
			//enable feed motor
			feed_enable_port.OUTSET = feed_enable_mask;
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZL27spindle_clock_divider_array+0x7f6fa9>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a28:	83 ef       	ldi	r24, 0xF3	; 243
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <main+0x496>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <main+0x49c>
     a32:	00 00       	nop
			_delay_us(min_spindle_driver_pulse_delay); //delay for allow driver startup
			
			while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     a34:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     a38:	81 11       	cpse	r24, r1
     a3a:	0a c0       	rjmp	.+20     	; 0xa50 <main+0x4ba>
     a3c:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     a40:	81 11       	cpse	r24, r1
     a42:	08 c0       	rjmp	.+16     	; 0xa54 <main+0x4be>
     a44:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	31 f0       	breq	.+12     	; 0xa58 <main+0x4c2>
     a4c:	8f 2d       	mov	r24, r15
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <main+0x4c4>
     a50:	8f 2d       	mov	r24, r15
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <main+0x4c4>
     a54:	8f 2d       	mov	r24, r15
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <main+0x4c4>
     a58:	80 2f       	mov	r24, r16
     a5a:	81 11       	cpse	r24, r1
     a5c:	eb cf       	rjmp	.-42     	; 0xa34 <main+0x49e>
			{
				//hold here until interrupt
			}
			
			//disable feed motor
			feed_enable_port.OUTCLR = feed_enable_mask;
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6faa>
			
		}
		
		//////////////////////////////////////////////////////////////////////////
		//feed only
		while (interlock == 0 && run_spindle == 0 && run_feed == 1)
     a64:	b7 cf       	rjmp	.-146    	; 0x9d4 <main+0x43e>
		}
		
		//////////////////////////////////////////////////////////////////////////
		//standard spindle with feed - feed rate number is arbitrary value
		//spindle must be started / running before entering this mode
		while (interlock == 0 && run_spindle == 1 && spindle_ramp_counter == 0 && run_feed == 1 && spindle_speed > 20)
     a66:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     a6a:	81 11       	cpse	r24, r1
     a6c:	16 c0       	rjmp	.+44     	; 0xa9a <main+0x504>
     a6e:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	a1 f4       	brne	.+40     	; 0xa9e <main+0x508>
     a76:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     a7a:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     a7e:	89 2b       	or	r24, r25
     a80:	81 f4       	brne	.+32     	; 0xaa2 <main+0x50c>
     a82:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	71 f4       	brne	.+28     	; 0xaa6 <main+0x510>
     a8a:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     a8e:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     a92:	45 97       	sbiw	r24, 0x15	; 21
     a94:	50 f4       	brcc	.+20     	; 0xaaa <main+0x514>
     a96:	10 2f       	mov	r17, r16
     a98:	09 c0       	rjmp	.+18     	; 0xaac <main+0x516>
     a9a:	10 2f       	mov	r17, r16
     a9c:	07 c0       	rjmp	.+14     	; 0xaac <main+0x516>
     a9e:	10 2f       	mov	r17, r16
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <main+0x516>
     aa2:	10 2f       	mov	r17, r16
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <main+0x516>
     aa6:	10 2f       	mov	r17, r16
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <main+0x516>
     aaa:	11 e0       	ldi	r17, 0x01	; 1
     aac:	11 23       	and	r17, r17
     aae:	09 f4       	brne	.+2      	; 0xab2 <main+0x51c>
     ab0:	55 c0       	rjmp	.+170    	; 0xb5c <main+0x5c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ab2:	9f e7       	ldi	r25, 0x7F	; 127
     ab4:	ea e1       	ldi	r30, 0x1A	; 26
     ab6:	f6 e0       	ldi	r31, 0x06	; 6
     ab8:	91 50       	subi	r25, 0x01	; 1
     aba:	e0 40       	sbci	r30, 0x00	; 0
     abc:	f0 40       	sbci	r31, 0x00	; 0
     abe:	e1 f7       	brne	.-8      	; 0xab8 <main+0x522>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <main+0x52c>
     ac2:	00 00       	nop
		{
			_delay_ms(min_spindle_driver_pulse_delay);
			
			//set feed rate
			TCB0.CCMP = feed_default_PER*20; //set pulse length
     ac4:	e0 e4       	ldi	r30, 0x40	; 64
     ac6:	fa e0       	ldi	r31, 0x0A	; 10
     ac8:	80 e8       	ldi	r24, 0x80	; 128
     aca:	9e e3       	ldi	r25, 0x3E	; 62
     acc:	84 87       	std	Z+12, r24	; 0x0c
     ace:	95 87       	std	Z+13, r25	; 0x0d
			
			//enable feed timer
			TCB0.CTRLA |= TCB_ENABLE_bm; //enable clock	
     ad0:	80 81       	ld	r24, Z
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	80 83       	st	Z, r24
			
			//enable feed motor
			feed_enable_port.OUTSET = feed_enable_mask;
     ad6:	84 e0       	ldi	r24, 0x04	; 4
     ad8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <_ZL27spindle_clock_divider_array+0x7f6fa9>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     adc:	83 ef       	ldi	r24, 0xF3	; 243
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <main+0x54a>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <main+0x550>
     ae6:	00 00       	nop
			_delay_us(min_spindle_driver_pulse_delay); //delay for allow driver startup
	
			
			while (interlock == 0 && run_spindle == 1 && spindle_ramp_counter == 0 && run_feed == 1 && spindle_speed > 20)
     ae8:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     aec:	81 11       	cpse	r24, r1
     aee:	16 c0       	rjmp	.+44     	; 0xb1c <main+0x586>
     af0:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	a1 f4       	brne	.+40     	; 0xb20 <main+0x58a>
     af8:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <spindle_ramp_counter>
     afc:	90 91 1e 3e 	lds	r25, 0x3E1E	; 0x803e1e <spindle_ramp_counter+0x1>
     b00:	89 2b       	or	r24, r25
     b02:	81 f4       	brne	.+32     	; 0xb24 <main+0x58e>
     b04:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	71 f4       	brne	.+28     	; 0xb28 <main+0x592>
     b0c:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     b10:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     b14:	45 97       	sbiw	r24, 0x15	; 21
     b16:	50 f4       	brcc	.+20     	; 0xb2c <main+0x596>
     b18:	80 2f       	mov	r24, r16
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <main+0x598>
     b1c:	80 2f       	mov	r24, r16
     b1e:	07 c0       	rjmp	.+14     	; 0xb2e <main+0x598>
     b20:	80 2f       	mov	r24, r16
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <main+0x598>
     b24:	80 2f       	mov	r24, r16
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <main+0x598>
     b28:	80 2f       	mov	r24, r16
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <main+0x598>
     b2c:	81 2f       	mov	r24, r17
     b2e:	81 11       	cpse	r24, r1
     b30:	db cf       	rjmp	.-74     	; 0xae8 <main+0x552>
			{
				//hold here until interrupt
			}
			
			//disable feed motor
			feed_enable_port.OUTCLR = feed_enable_mask;
     b32:	84 e0       	ldi	r24, 0x04	; 4
     b34:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6faa>
			
			//if spindle off after interrupt, then ramp down the spindle
			if (run_spindle == 0)
     b38:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     b3c:	81 11       	cpse	r24, r1
     b3e:	93 cf       	rjmp	.-218    	; 0xa66 <main+0x4d0>
			{
				ramp_spindle_down();
     b40:	0c dd       	rcall	.-1512   	; 0x55a <_Z17ramp_spindle_downv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b42:	9f e7       	ldi	r25, 0x7F	; 127
     b44:	ea e1       	ldi	r30, 0x1A	; 26
     b46:	f6 e0       	ldi	r31, 0x06	; 6
     b48:	91 50       	subi	r25, 0x01	; 1
     b4a:	e0 40       	sbci	r30, 0x00	; 0
     b4c:	f0 40       	sbci	r31, 0x00	; 0
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <main+0x5b2>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <main+0x5bc>
     b52:	00 00       	nop
				
				_delay_ms(100); //delay to allow init of driver
				
				//disable spindle
				spindle_enable_port.OUTCLR = spindle_enable_mask;
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL27spindle_clock_divider_array+0x7f6faa>
     b5a:	85 cf       	rjmp	.-246    	; 0xa66 <main+0x4d0>
			}
		}
		
		//////////////////////////////////////////////////////////////////////////
		//Engaged spindle with feed / slow spindle
		while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     b5c:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     b60:	81 11       	cpse	r24, r1
     b62:	10 c0       	rjmp	.+32     	; 0xb84 <main+0x5ee>
     b64:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	71 f4       	brne	.+28     	; 0xb88 <main+0x5f2>
     b6c:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	61 f4       	brne	.+24     	; 0xb8c <main+0x5f6>
     b74:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     b78:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     b7c:	45 97       	sbiw	r24, 0x15	; 21
     b7e:	40 f0       	brcs	.+16     	; 0xb90 <main+0x5fa>
     b80:	01 2f       	mov	r16, r17
     b82:	07 c0       	rjmp	.+14     	; 0xb92 <main+0x5fc>
     b84:	01 2f       	mov	r16, r17
     b86:	05 c0       	rjmp	.+10     	; 0xb92 <main+0x5fc>
     b88:	01 2f       	mov	r16, r17
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <main+0x5fc>
     b8c:	01 2f       	mov	r16, r17
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <main+0x5fc>
     b90:	01 e0       	ldi	r16, 0x01	; 1
     b92:	00 23       	and	r16, r16
     b94:	09 f4       	brne	.+2      	; 0xb98 <main+0x602>
     b96:	6b cd       	rjmp	.-1322   	; 0x66e <main+0xd8>
     b98:	2f e7       	ldi	r18, 0x7F	; 127
     b9a:	3a e1       	ldi	r19, 0x1A	; 26
     b9c:	46 e0       	ldi	r20, 0x06	; 6
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	30 40       	sbci	r19, 0x00	; 0
     ba2:	40 40       	sbci	r20, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <main+0x608>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <main+0x612>
     ba8:	00 00       	nop
		{
			_delay_ms(min_spindle_driver_pulse_delay);
			
			//disable timers
			TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;
     baa:	e0 e0       	ldi	r30, 0x00	; 0
     bac:	fa e0       	ldi	r31, 0x0A	; 10
     bae:	80 81       	ld	r24, Z
     bb0:	8e 7f       	andi	r24, 0xFE	; 254
     bb2:	80 83       	st	Z, r24
			TCB0.CTRLA &= ~TCB_ENABLE_bm;	
     bb4:	a0 e4       	ldi	r26, 0x40	; 64
     bb6:	ba e0       	ldi	r27, 0x0A	; 10
     bb8:	8c 91       	ld	r24, X
     bba:	8e 7f       	andi	r24, 0xFE	; 254
     bbc:	8c 93       	st	X, r24
			TCA0.SPLIT.CTRLB = 0; //disable timer interrupt		
     bbe:	11 82       	std	Z+1, r1	; 0x01
			
			//calculate stepping ratio
			//convert feed_rate to the number of steps the spindle makes per step the feed makes
			float spindle_steps_per_feed_step = (float)spindle_steps / ((float)feed_rate / feed_mm_per_step / 1000);
     bc0:	60 91 1a 3e 	lds	r22, 0x3E1A	; 0x803e1a <feed_rate>
     bc4:	70 91 1b 3e 	lds	r23, 0x3E1B	; 0x803e1b <feed_rate+0x1>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	25 d3       	rcall	.+1610   	; 0x1218 <__floatunsisf>
     bce:	24 ed       	ldi	r18, 0xD4	; 212
     bd0:	3f e7       	ldi	r19, 0x7F	; 127
     bd2:	46 e5       	ldi	r20, 0x56	; 86
     bd4:	59 e3       	ldi	r21, 0x39	; 57
     bd6:	78 d2       	rcall	.+1264   	; 0x10c8 <__divsf3>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	4a e7       	ldi	r20, 0x7A	; 122
     bde:	54 e4       	ldi	r21, 0x44	; 68
     be0:	73 d2       	rcall	.+1254   	; 0x10c8 <__divsf3>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	88 ec       	ldi	r24, 0xC8	; 200
     bec:	94 e4       	ldi	r25, 0x44	; 68
     bee:	6c d2       	rcall	.+1240   	; 0x10c8 <__divsf3>
     bf0:	6b 01       	movw	r12, r22
     bf2:	7c 01       	movw	r14, r24
			
			volatile float current_decimal = spindle_steps_per_feed_step;
     bf4:	69 83       	std	Y+1, r22	; 0x01
     bf6:	7a 83       	std	Y+2, r23	; 0x02
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	9c 83       	std	Y+4, r25	; 0x04
			volatile uint16_t current_spindle_steps = (uint16_t)spindle_steps_per_feed_step; 
     bfc:	de d2       	rcall	.+1468   	; 0x11ba <__fixunssfsi>
     bfe:	6d 83       	std	Y+5, r22	; 0x05
     c00:	7e 83       	std	Y+6, r23	; 0x06
			
			//enable spindle & feed motor
			spindle_enable_port.OUTSET = spindle_enable_mask;
     c02:	e0 e4       	ldi	r30, 0x40	; 64
     c04:	f4 e0       	ldi	r31, 0x04	; 4
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	85 83       	std	Z+5, r24	; 0x05
			feed_enable_port.OUTSET = feed_enable_mask;
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0e:	83 ef       	ldi	r24, 0xF3	; 243
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <main+0x67c>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <main+0x682>
     c18:	00 00       	nop
			_delay_us(min_spindle_driver_pulse_delay); //delay for allow driver startup
			
			while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     c1a:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     c1e:	81 11       	cpse	r24, r1
     c20:	10 c0       	rjmp	.+32     	; 0xc42 <main+0x6ac>
     c22:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <run_spindle>
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	71 f4       	brne	.+28     	; 0xc46 <main+0x6b0>
     c2a:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <run_feed>
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	61 f4       	brne	.+24     	; 0xc4a <main+0x6b4>
     c32:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <spindle_speed>
     c36:	90 91 20 3e 	lds	r25, 0x3E20	; 0x803e20 <spindle_speed+0x1>
     c3a:	45 97       	sbiw	r24, 0x15	; 21
     c3c:	40 f0       	brcs	.+16     	; 0xc4e <main+0x6b8>
     c3e:	81 2f       	mov	r24, r17
     c40:	07 c0       	rjmp	.+14     	; 0xc50 <main+0x6ba>
     c42:	81 2f       	mov	r24, r17
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <main+0x6ba>
     c46:	81 2f       	mov	r24, r17
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <main+0x6ba>
     c4a:	81 2f       	mov	r24, r17
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <main+0x6ba>
     c4e:	80 2f       	mov	r24, r16
     c50:	88 23       	and	r24, r24
     c52:	09 f4       	brne	.+2      	; 0xc56 <main+0x6c0>
     c54:	55 c0       	rjmp	.+170    	; 0xd00 <main+0x76a>
			{
				//hold in here until interrupt
				//evaluate next step
				if ((current_decimal + spindle_steps_per_feed_step) > 1)
     c56:	29 81       	ldd	r18, Y+1	; 0x01
     c58:	3a 81       	ldd	r19, Y+2	; 0x02
     c5a:	4b 81       	ldd	r20, Y+3	; 0x03
     c5c:	5c 81       	ldd	r21, Y+4	; 0x04
     c5e:	c7 01       	movw	r24, r14
     c60:	b6 01       	movw	r22, r12
     c62:	c6 d1       	rcall	.+908    	; 0xff0 <__addsf3>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e8       	ldi	r20, 0x80	; 128
     c6a:	5f e3       	ldi	r21, 0x3F	; 63
     c6c:	63 d3       	rcall	.+1734   	; 0x1334 <__gesf2>
     c6e:	18 16       	cp	r1, r24
     c70:	c4 f4       	brge	.+48     	; 0xca2 <main+0x70c>
				{
					current_decimal = current_decimal + spindle_steps_per_feed_step - current_spindle_steps;
     c72:	29 81       	ldd	r18, Y+1	; 0x01
     c74:	3a 81       	ldd	r19, Y+2	; 0x02
     c76:	4b 81       	ldd	r20, Y+3	; 0x03
     c78:	5c 81       	ldd	r21, Y+4	; 0x04
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	b8 d1       	rcall	.+880    	; 0xff0 <__addsf3>
     c80:	4b 01       	movw	r8, r22
     c82:	5c 01       	movw	r10, r24
     c84:	6d 81       	ldd	r22, Y+5	; 0x05
     c86:	7e 81       	ldd	r23, Y+6	; 0x06
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	c5 d2       	rcall	.+1418   	; 0x1218 <__floatunsisf>
     c8e:	9b 01       	movw	r18, r22
     c90:	ac 01       	movw	r20, r24
     c92:	c5 01       	movw	r24, r10
     c94:	b4 01       	movw	r22, r8
     c96:	ab d1       	rcall	.+854    	; 0xfee <__subsf3>
     c98:	69 83       	std	Y+1, r22	; 0x01
     c9a:	7a 83       	std	Y+2, r23	; 0x02
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	9c 83       	std	Y+4, r25	; 0x04
     ca0:	0b c0       	rjmp	.+22     	; 0xcb8 <main+0x722>
				} 
				else
				{
					current_decimal = current_decimal + spindle_steps_per_feed_step;
     ca2:	29 81       	ldd	r18, Y+1	; 0x01
     ca4:	3a 81       	ldd	r19, Y+2	; 0x02
     ca6:	4b 81       	ldd	r20, Y+3	; 0x03
     ca8:	5c 81       	ldd	r21, Y+4	; 0x04
     caa:	c7 01       	movw	r24, r14
     cac:	b6 01       	movw	r22, r12
     cae:	a0 d1       	rcall	.+832    	; 0xff0 <__addsf3>
     cb0:	69 83       	std	Y+1, r22	; 0x01
     cb2:	7a 83       	std	Y+2, r23	; 0x02
     cb4:	8b 83       	std	Y+3, r24	; 0x03
     cb6:	9c 83       	std	Y+4, r25	; 0x04
				}
				
				//extract only the whole digits for spindle steps
				current_spindle_steps = (uint16_t)current_decimal;
     cb8:	69 81       	ldd	r22, Y+1	; 0x01
     cba:	7a 81       	ldd	r23, Y+2	; 0x02
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	7c d2       	rcall	.+1272   	; 0x11ba <__fixunssfsi>
     cc2:	6d 83       	std	Y+5, r22	; 0x05
     cc4:	7e 83       	std	Y+6, r23	; 0x06
				
				//loop to required number of spindle steps per feed step - this can be zero
				for (uint16_t i = current_spindle_steps; i > 0; i--)
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	79 f0       	breq	.+30     	; 0xcec <main+0x756>
				{
					step_spindle_port.OUTTGL = step_spindle_mask;  //Toggle step GPIO 
     cce:	28 e0       	ldi	r18, 0x08	; 8
     cd0:	20 93 47 04 	sts	0x0447, r18	; 0x800447 <_ZL27spindle_clock_divider_array+0x7f6fab>
     cd4:	e9 ef       	ldi	r30, 0xF9	; 249
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <main+0x742>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <main+0x748>
     cde:	00 00       	nop
					_delay_us(min_spindle_driver_pulse_delay/2); //delay
					
					if (run_spindle == 0)
     ce0:	20 91 23 3e 	lds	r18, 0x3E23	; 0x803e23 <run_spindle>
     ce4:	22 23       	and	r18, r18
     ce6:	11 f0       	breq	.+4      	; 0xcec <main+0x756>
				
				//extract only the whole digits for spindle steps
				current_spindle_steps = (uint16_t)current_decimal;
				
				//loop to required number of spindle steps per feed step - this can be zero
				for (uint16_t i = current_spindle_steps; i > 0; i--)
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	ef cf       	rjmp	.-34     	; 0xcca <main+0x734>
					{
						break;
					}
				}
				
				step_feed_port.OUTTGL = step_feed_mask;  //Toggle step GPIO 
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZL27spindle_clock_divider_array+0x7f6fab>
     cf2:	89 ef       	ldi	r24, 0xF9	; 249
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <main+0x760>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <main+0x766>
     cfc:	00 00       	nop
     cfe:	8d cf       	rjmp	.-230    	; 0xc1a <main+0x684>
				_delay_us(min_spindle_driver_pulse_delay/2); //delay
			}
			
			//disable spindle & feed
			spindle_enable_port.OUTCLR = spindle_enable_mask;
     d00:	e0 e4       	ldi	r30, 0x40	; 64
     d02:	f4 e0       	ldi	r31, 0x04	; 4
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	86 83       	std	Z+6, r24	; 0x06
			feed_enable_port.OUTCLR = feed_enable_mask;
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	86 83       	std	Z+6, r24	; 0x06
			}
		}
		
		//////////////////////////////////////////////////////////////////////////
		//Engaged spindle with feed / slow spindle
		while (interlock == 0 && run_spindle == 1 && run_feed == 1 && spindle_speed <= 20)
     d0c:	27 cf       	rjmp	.-434    	; 0xb5c <main+0x5c6>

00000d0e <_GLOBAL__sub_I_ramp_loops>:
		while (spindle_ramp_counter != 0)
		{
			//hold here until interrupt loop finished
		}
	}
}
     d0e:	6f ef       	ldi	r22, 0xFF	; 255
     d10:	7f ef       	ldi	r23, 0xFF	; 255
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	b2 da       	rcall	.-2716   	; 0x27c <_Z41__static_initialization_and_destruction_0ii>
     d18:	08 95       	ret

00000d1a <_ZN6TM16375startEv>:
}

void TM1637::start()
{
	//set clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     d1a:	e0 e0       	ldi	r30, 0x00	; 0
     d1c:	f4 e0       	ldi	r31, 0x04	; 4
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	85 83       	std	Z+5, r24	; 0x05
	//set data high
	tm1637_data_port.OUTSET = tm1637_data_pin;
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	95 83       	std	Z+5, r25	; 0x05
     d26:	22 e4       	ldi	r18, 0x42	; 66
     d28:	2a 95       	dec	r18
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <_ZN6TM16375startEv+0xe>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <_ZN6TM16375startEv+0x14>
	//wait 5us
	_delay_us(10);
	
	//set data low
	tm1637_data_port.OUTCLR = tm1637_data_pin;
     d2e:	96 83       	std	Z+6, r25	; 0x06
	//sel clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     d30:	86 83       	std	Z+6, r24	; 0x06
     d32:	82 e4       	ldi	r24, 0x42	; 66
     d34:	8a 95       	dec	r24
     d36:	f1 f7       	brne	.-4      	; 0xd34 <_ZN6TM16375startEv+0x1a>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <_ZN6TM16375startEv+0x20>
     d3a:	08 95       	ret

00000d3c <_ZN6TM16374stopEv>:


void TM1637::stop()
{
	//clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     d3c:	e0 e0       	ldi	r30, 0x00	; 0
     d3e:	f4 e0       	ldi	r31, 0x04	; 4
     d40:	94 e0       	ldi	r25, 0x04	; 4
     d42:	96 83       	std	Z+6, r25	; 0x06
	//data low
	tm1637_data_port.OUTCLR = tm1637_data_pin;
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	86 83       	std	Z+6, r24	; 0x06
     d48:	22 e4       	ldi	r18, 0x42	; 66
     d4a:	2a 95       	dec	r18
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <_ZN6TM16374stopEv+0xe>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <_ZN6TM16374stopEv+0x14>
	//wait 5us
	_delay_us(10);
	
	//clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     d50:	95 83       	std	Z+5, r25	; 0x05
	//data high
	tm1637_data_port.OUTSET = tm1637_data_pin;
     d52:	85 83       	std	Z+5, r24	; 0x05
     d54:	82 e4       	ldi	r24, 0x42	; 66
     d56:	8a 95       	dec	r24
     d58:	f1 f7       	brne	.-4      	; 0xd56 <_ZN6TM16374stopEv+0x1a>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <_ZN6TM16374stopEv+0x20>
     d5c:	08 95       	ret

00000d5e <_ZN6TM16378data_outEh>:

uint8_t TM1637::data_out(uint8_t value)
{
	//going to ignore receiving the ACK bit
	
	for (uint8_t i = 0; i < 8; i++)
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	28 30       	cpi	r18, 0x08	; 8
     d62:	78 f5       	brcc	.+94     	; 0xdc2 <_ZN6TM16378data_outEh+0x64>
	{
		//clk low
		tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <_ZL27spindle_clock_divider_array+0x7f6f6a>
     d6a:	82 e4       	ldi	r24, 0x42	; 66
     d6c:	8a 95       	dec	r24
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <_ZN6TM16378data_outEh+0xe>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <_ZN6TM16378data_outEh+0x14>
		_delay_us(10);
		//set data to match bit value
		if ( ((value & (1<<i)) >> i) == 1)
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <_ZN6TM16378data_outEh+0x20>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <_ZN6TM16378data_outEh+0x1c>
     d82:	46 2f       	mov	r20, r22
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	84 23       	and	r24, r20
     d88:	95 23       	and	r25, r21
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <_ZN6TM16378data_outEh+0x34>
     d8e:	95 95       	asr	r25
     d90:	87 95       	ror	r24
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <_ZN6TM16378data_outEh+0x30>
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	21 f4       	brne	.+8      	; 0xda2 <_ZN6TM16378data_outEh+0x44>
		{
			tm1637_data_port.OUTSET = tm1637_data_pin;
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZL27spindle_clock_divider_array+0x7f6f69>
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <_ZN6TM16378data_outEh+0x4a>
		} 
		else
		{	
			tm1637_data_port.OUTCLR = tm1637_data_pin;
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <_ZL27spindle_clock_divider_array+0x7f6f6a>
     da8:	92 e4       	ldi	r25, 0x42	; 66
     daa:	9a 95       	dec	r25
     dac:	f1 f7       	brne	.-4      	; 0xdaa <_ZN6TM16378data_outEh+0x4c>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <_ZN6TM16378data_outEh+0x52>
		}
		_delay_us(10);
		//clk high
		tm1637_clk_port.OUTSET = tm1637_clk_pin;
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <_ZL27spindle_clock_divider_array+0x7f6f69>
     db6:	e2 e4       	ldi	r30, 0x42	; 66
     db8:	ea 95       	dec	r30
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <_ZN6TM16378data_outEh+0x5a>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <_ZN6TM16378data_outEh+0x60>

uint8_t TM1637::data_out(uint8_t value)
{
	//going to ignore receiving the ACK bit
	
	for (uint8_t i = 0; i < 8; i++)
     dbe:	2f 5f       	subi	r18, 0xFF	; 255
     dc0:	cf cf       	rjmp	.-98     	; 0xd60 <_ZN6TM16378data_outEh+0x2>
		tm1637_clk_port.OUTSET = tm1637_clk_pin;
		_delay_us(10);
	}
	
	//clk low
	tm1637_clk_port.OUTCLR = tm1637_clk_pin;
     dc2:	e0 e0       	ldi	r30, 0x00	; 0
     dc4:	f4 e0       	ldi	r31, 0x04	; 4
     dc6:	84 e0       	ldi	r24, 0x04	; 4
     dc8:	86 83       	std	Z+6, r24	; 0x06
     dca:	92 e4       	ldi	r25, 0x42	; 66
     dcc:	9a 95       	dec	r25
     dce:	f1 f7       	brne	.-4      	; 0xdcc <_ZN6TM16378data_outEh+0x6e>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <_ZN6TM16378data_outEh+0x74>
	_delay_us(10);
	
	//data input
	tm1637_data_port.DIRCLR = tm1637_data_pin;
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	92 83       	std	Z+2, r25	; 0x02
	
	//clk high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     dd6:	85 83       	std	Z+5, r24	; 0x05
     dd8:	82 e4       	ldi	r24, 0x42	; 66
     dda:	8a 95       	dec	r24
     ddc:	f1 f7       	brne	.-4      	; 0xdda <_ZN6TM16378data_outEh+0x7c>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <_ZN6TM16378data_outEh+0x82>
	_delay_us(10);
	
	//wait for ACK
	uint8_t ack = (~tm1637_data_port.IN & tm1637_data_pin) == 0;
     de0:	80 85       	ldd	r24, Z+8	; 0x08
     de2:	86 95       	lsr	r24
     de4:	81 70       	andi	r24, 0x01	; 1
	
	//data output
	tm1637_data_port.DIRSET = tm1637_data_pin;
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	e3 ef       	ldi	r30, 0xF3	; 243
     dea:	f1 e0       	ldi	r31, 0x01	; 1
     dec:	31 97       	sbiw	r30, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <_ZN6TM16378data_outEh+0x8e>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <_ZN6TM16378data_outEh+0x94>
     df2:	00 00       	nop
	
	_delay_us(100);
	
	return ack;
}
     df4:	08 95       	ret

00000df6 <_ZN6TM163717tm1637_brightnessEh>:


void TM1637::tm1637_brightness(uint8_t level)
{
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	8c 01       	movw	r16, r24
     dfe:	c6 2f       	mov	r28, r22
	TM1637::start();
     e00:	8c df       	rcall	.-232    	; 0xd1a <_ZN6TM16375startEv>
	
	TM1637::data_out(0b10001000 | (0b00000111 & level));
     e02:	6c 2f       	mov	r22, r28
     e04:	67 70       	andi	r22, 0x07	; 7
     e06:	68 68       	ori	r22, 0x88	; 136
     e08:	c8 01       	movw	r24, r16
     e0a:	a9 df       	rcall	.-174    	; 0xd5e <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     e0c:	c8 01       	movw	r24, r16
     e0e:	96 df       	rcall	.-212    	; 0xd3c <_ZN6TM16374stopEv>
}
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <_ZN6TM16374initEv>:

void TM1637::init()
{
	//TINY - setup port A (1 = output)
	// 7 6 5 4 3 2 1 0
	tm1637_data_port.DIRSET = tm1637_data_pin;
     e18:	e0 e0       	ldi	r30, 0x00	; 0
     e1a:	f4 e0       	ldi	r31, 0x04	; 4
     e1c:	22 e0       	ldi	r18, 0x02	; 2
     e1e:	21 83       	std	Z+1, r18	; 0x01
	tm1637_clk_port.DIRSET = tm1637_clk_pin;
     e20:	34 e0       	ldi	r19, 0x04	; 4
     e22:	31 83       	std	Z+1, r19	; 0x01
	
	//set pins high
	tm1637_clk_port.OUTSET = tm1637_clk_pin;
     e24:	35 83       	std	Z+5, r19	; 0x05
	tm1637_data_port.OUTSET = tm1637_data_pin;
     e26:	25 83       	std	Z+5, r18	; 0x05
	
	TM1637::tm1637_brightness(6);
     e28:	66 e0       	ldi	r22, 0x06	; 6
     e2a:	e5 df       	rcall	.-54     	; 0xdf6 <_ZN6TM163717tm1637_brightnessEh>
     e2c:	08 95       	ret

00000e2e <_ZN6TM163710send_charsEhhhh>:
	TM1637::stop();
}


void TM1637::send_chars(uint8_t a_digit, uint8_t b_digit, uint8_t c_digit, uint8_t d_digit)
{
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	ec 01       	movw	r28, r24
     e3c:	e6 2e       	mov	r14, r22
     e3e:	f4 2e       	mov	r15, r20
     e40:	12 2f       	mov	r17, r18
	TM1637::start();
     e42:	6b df       	rcall	.-298    	; 0xd1a <_ZN6TM16375startEv>
	
	TM1637::data_out(0b01000000);
     e44:	60 e4       	ldi	r22, 0x40	; 64
     e46:	ce 01       	movw	r24, r28
     e48:	8a df       	rcall	.-236    	; 0xd5e <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     e4a:	ce 01       	movw	r24, r28
     e4c:	77 df       	rcall	.-274    	; 0xd3c <_ZN6TM16374stopEv>
	
	
	TM1637::start();
     e4e:	ce 01       	movw	r24, r28
     e50:	64 df       	rcall	.-312    	; 0xd1a <_ZN6TM16375startEv>
	
	TM1637::data_out(0b11000000);
     e52:	60 ec       	ldi	r22, 0xC0	; 192
     e54:	ce 01       	movw	r24, r28
     e56:	83 df       	rcall	.-250    	; 0xd5e <_ZN6TM16378data_outEh>
	
	TM1637::data_out(a_digit);
     e58:	6e 2d       	mov	r22, r14
     e5a:	ce 01       	movw	r24, r28
     e5c:	80 df       	rcall	.-256    	; 0xd5e <_ZN6TM16378data_outEh>
	TM1637::data_out(b_digit);
     e5e:	6f 2d       	mov	r22, r15
     e60:	ce 01       	movw	r24, r28
     e62:	7d df       	rcall	.-262    	; 0xd5e <_ZN6TM16378data_outEh>
	TM1637::data_out(c_digit);
     e64:	61 2f       	mov	r22, r17
     e66:	ce 01       	movw	r24, r28
     e68:	7a df       	rcall	.-268    	; 0xd5e <_ZN6TM16378data_outEh>
	TM1637::data_out(d_digit);
     e6a:	60 2f       	mov	r22, r16
     e6c:	ce 01       	movw	r24, r28
     e6e:	77 df       	rcall	.-274    	; 0xd5e <_ZN6TM16378data_outEh>
	
	TM1637::stop();
     e70:	ce 01       	movw	r24, r28
     e72:	64 df       	rcall	.-312    	; 0xd3c <_ZN6TM16374stopEv>
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	08 95       	ret

00000e82 <_ZN6TM163711send_numberEj>:


void TM1637::send_number(uint16_t four_digit_number)
{
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	fc 01       	movw	r30, r24
     e88:	ab 01       	movw	r20, r22
	if (four_digit_number > 999)
     e8a:	68 3e       	cpi	r22, 0xE8	; 232
     e8c:	23 e0       	ldi	r18, 0x03	; 3
     e8e:	72 07       	cpc	r23, r18
     e90:	58 f1       	brcs	.+86     	; 0xee8 <_ZN6TM163711send_numberEj+0x66>
	{
		a = uint8_t(four_digit_number / 1000 % 10);
     e92:	9b 01       	movw	r18, r22
     e94:	36 95       	lsr	r19
     e96:	27 95       	ror	r18
     e98:	36 95       	lsr	r19
     e9a:	27 95       	ror	r18
     e9c:	36 95       	lsr	r19
     e9e:	27 95       	ror	r18
     ea0:	a5 ec       	ldi	r26, 0xC5	; 197
     ea2:	b0 e2       	ldi	r27, 0x20	; 32
     ea4:	dd d2       	rcall	.+1466   	; 0x1460 <__umulhisi3>
     ea6:	8c 01       	movw	r16, r24
     ea8:	12 95       	swap	r17
     eaa:	02 95       	swap	r16
     eac:	0f 70       	andi	r16, 0x0F	; 15
     eae:	01 27       	eor	r16, r17
     eb0:	1f 70       	andi	r17, 0x0F	; 15
     eb2:	01 27       	eor	r16, r17
     eb4:	98 01       	movw	r18, r16
     eb6:	ad ec       	ldi	r26, 0xCD	; 205
     eb8:	bc ec       	ldi	r27, 0xCC	; 204
     eba:	d2 d2       	rcall	.+1444   	; 0x1460 <__umulhisi3>
     ebc:	96 95       	lsr	r25
     ebe:	87 95       	ror	r24
     ec0:	96 95       	lsr	r25
     ec2:	87 95       	ror	r24
     ec4:	96 95       	lsr	r25
     ec6:	87 95       	ror	r24
     ec8:	9c 01       	movw	r18, r24
     eca:	22 0f       	add	r18, r18
     ecc:	33 1f       	adc	r19, r19
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	82 0f       	add	r24, r18
     edc:	93 1f       	adc	r25, r19
     ede:	98 01       	movw	r18, r16
     ee0:	28 1b       	sub	r18, r24
     ee2:	39 0b       	sbc	r19, r25
     ee4:	20 8b       	std	Z+16, r18	; 0x10
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <_ZN6TM163711send_numberEj+0x68>
	} 
	else
	{
		a = 0;
     ee8:	10 8a       	std	Z+16, r1	; 0x10
	}
	
	if (four_digit_number > 99)
     eea:	44 36       	cpi	r20, 0x64	; 100
     eec:	51 05       	cpc	r21, r1
     eee:	28 f1       	brcs	.+74     	; 0xf3a <_ZN6TM163711send_numberEj+0xb8>
	{
		b = uint8_t(four_digit_number / 100 % 10);
     ef0:	9a 01       	movw	r18, r20
     ef2:	36 95       	lsr	r19
     ef4:	27 95       	ror	r18
     ef6:	36 95       	lsr	r19
     ef8:	27 95       	ror	r18
     efa:	ab e7       	ldi	r26, 0x7B	; 123
     efc:	b4 e1       	ldi	r27, 0x14	; 20
     efe:	b0 d2       	rcall	.+1376   	; 0x1460 <__umulhisi3>
     f00:	8c 01       	movw	r16, r24
     f02:	16 95       	lsr	r17
     f04:	07 95       	ror	r16
     f06:	98 01       	movw	r18, r16
     f08:	ad ec       	ldi	r26, 0xCD	; 205
     f0a:	bc ec       	ldi	r27, 0xCC	; 204
     f0c:	a9 d2       	rcall	.+1362   	; 0x1460 <__umulhisi3>
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	96 95       	lsr	r25
     f18:	87 95       	ror	r24
     f1a:	9c 01       	movw	r18, r24
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	82 0f       	add	r24, r18
     f2e:	93 1f       	adc	r25, r19
     f30:	98 01       	movw	r18, r16
     f32:	28 1b       	sub	r18, r24
     f34:	39 0b       	sbc	r19, r25
     f36:	21 8b       	std	Z+17, r18	; 0x11
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <_ZN6TM163711send_numberEj+0xba>
	} 
	else
	{
		b = 0;
     f3a:	11 8a       	std	Z+17, r1	; 0x11
	}
	
	if (four_digit_number > 9)
     f3c:	4a 30       	cpi	r20, 0x0A	; 10
     f3e:	51 05       	cpc	r21, r1
     f40:	18 f1       	brcs	.+70     	; 0xf88 <_ZN6TM163711send_numberEj+0x106>
	{
		c = uint8_t(four_digit_number / 10 % 10);
     f42:	9a 01       	movw	r18, r20
     f44:	ad ec       	ldi	r26, 0xCD	; 205
     f46:	bc ec       	ldi	r27, 0xCC	; 204
     f48:	8b d2       	rcall	.+1302   	; 0x1460 <__umulhisi3>
     f4a:	8c 01       	movw	r16, r24
     f4c:	16 95       	lsr	r17
     f4e:	07 95       	ror	r16
     f50:	16 95       	lsr	r17
     f52:	07 95       	ror	r16
     f54:	16 95       	lsr	r17
     f56:	07 95       	ror	r16
     f58:	98 01       	movw	r18, r16
     f5a:	82 d2       	rcall	.+1284   	; 0x1460 <__umulhisi3>
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	96 95       	lsr	r25
     f62:	87 95       	ror	r24
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	9c 01       	movw	r18, r24
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	82 0f       	add	r24, r18
     f7c:	93 1f       	adc	r25, r19
     f7e:	98 01       	movw	r18, r16
     f80:	28 1b       	sub	r18, r24
     f82:	39 0b       	sbc	r19, r25
     f84:	22 8b       	std	Z+18, r18	; 0x12
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <_ZN6TM163711send_numberEj+0x108>
	} 
	else
	{
		c = 0;
     f88:	12 8a       	std	Z+18, r1	; 0x12
	}
	
	if (four_digit_number >= 0)
	{
		d = uint8_t(four_digit_number % 10);
     f8a:	9a 01       	movw	r18, r20
     f8c:	ad ec       	ldi	r26, 0xCD	; 205
     f8e:	bc ec       	ldi	r27, 0xCC	; 204
     f90:	67 d2       	rcall	.+1230   	; 0x1460 <__umulhisi3>
     f92:	96 95       	lsr	r25
     f94:	87 95       	ror	r24
     f96:	96 95       	lsr	r25
     f98:	87 95       	ror	r24
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	9c 01       	movw	r18, r24
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	82 0f       	add	r24, r18
     fb2:	93 1f       	adc	r25, r19
     fb4:	9a 01       	movw	r18, r20
     fb6:	28 1b       	sub	r18, r24
     fb8:	39 0b       	sbc	r19, r25
     fba:	23 8b       	std	Z+19, r18	; 0x13
	{
		d = 0;
	}
		
		
	TM1637::send_chars(digitToSegment[a], digitToSegment[b], digitToSegment[c], digitToSegment[d]);
     fbc:	83 89       	ldd	r24, Z+19	; 0x13
     fbe:	df 01       	movw	r26, r30
     fc0:	a8 0f       	add	r26, r24
     fc2:	b1 1d       	adc	r27, r1
     fc4:	0c 91       	ld	r16, X
     fc6:	82 89       	ldd	r24, Z+18	; 0x12
     fc8:	df 01       	movw	r26, r30
     fca:	a8 0f       	add	r26, r24
     fcc:	b1 1d       	adc	r27, r1
     fce:	2c 91       	ld	r18, X
     fd0:	81 89       	ldd	r24, Z+17	; 0x11
     fd2:	df 01       	movw	r26, r30
     fd4:	a8 0f       	add	r26, r24
     fd6:	b1 1d       	adc	r27, r1
     fd8:	4c 91       	ld	r20, X
     fda:	80 89       	ldd	r24, Z+16	; 0x10
     fdc:	df 01       	movw	r26, r30
     fde:	a8 0f       	add	r26, r24
     fe0:	b1 1d       	adc	r27, r1
     fe2:	6c 91       	ld	r22, X
     fe4:	cf 01       	movw	r24, r30
     fe6:	23 df       	rcall	.-442    	; 0xe2e <_ZN6TM163710send_charsEhhhh>
		
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <__subsf3>:
     fee:	50 58       	subi	r21, 0x80	; 128

00000ff0 <__addsf3>:
     ff0:	bb 27       	eor	r27, r27
     ff2:	aa 27       	eor	r26, r26
     ff4:	0e 94 0f 08 	call	0x101e	; 0x101e <__addsf3x>
     ff8:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_round>
     ffc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__fp_pscA>
    1000:	38 f0       	brcs	.+14     	; 0x1010 <__addsf3+0x20>
    1002:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fp_pscB>
    1006:	20 f0       	brcs	.+8      	; 0x1010 <__addsf3+0x20>
    1008:	39 f4       	brne	.+14     	; 0x1018 <__addsf3+0x28>
    100a:	9f 3f       	cpi	r25, 0xFF	; 255
    100c:	19 f4       	brne	.+6      	; 0x1014 <__addsf3+0x24>
    100e:	26 f4       	brtc	.+8      	; 0x1018 <__addsf3+0x28>
    1010:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_nan>
    1014:	0e f4       	brtc	.+2      	; 0x1018 <__addsf3+0x28>
    1016:	e0 95       	com	r30
    1018:	e7 fb       	bst	r30, 7
    101a:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_inf>

0000101e <__addsf3x>:
    101e:	e9 2f       	mov	r30, r25
    1020:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_split3>
    1024:	58 f3       	brcs	.-42     	; 0xffc <__addsf3+0xc>
    1026:	ba 17       	cp	r27, r26
    1028:	62 07       	cpc	r22, r18
    102a:	73 07       	cpc	r23, r19
    102c:	84 07       	cpc	r24, r20
    102e:	95 07       	cpc	r25, r21
    1030:	20 f0       	brcs	.+8      	; 0x103a <__addsf3x+0x1c>
    1032:	79 f4       	brne	.+30     	; 0x1052 <__addsf3x+0x34>
    1034:	a6 f5       	brtc	.+104    	; 0x109e <__addsf3x+0x80>
    1036:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_zero>
    103a:	0e f4       	brtc	.+2      	; 0x103e <__addsf3x+0x20>
    103c:	e0 95       	com	r30
    103e:	0b 2e       	mov	r0, r27
    1040:	ba 2f       	mov	r27, r26
    1042:	a0 2d       	mov	r26, r0
    1044:	0b 01       	movw	r0, r22
    1046:	b9 01       	movw	r22, r18
    1048:	90 01       	movw	r18, r0
    104a:	0c 01       	movw	r0, r24
    104c:	ca 01       	movw	r24, r20
    104e:	a0 01       	movw	r20, r0
    1050:	11 24       	eor	r1, r1
    1052:	ff 27       	eor	r31, r31
    1054:	59 1b       	sub	r21, r25
    1056:	99 f0       	breq	.+38     	; 0x107e <__addsf3x+0x60>
    1058:	59 3f       	cpi	r21, 0xF9	; 249
    105a:	50 f4       	brcc	.+20     	; 0x1070 <__addsf3x+0x52>
    105c:	50 3e       	cpi	r21, 0xE0	; 224
    105e:	68 f1       	brcs	.+90     	; 0x10ba <__addsf3x+0x9c>
    1060:	1a 16       	cp	r1, r26
    1062:	f0 40       	sbci	r31, 0x00	; 0
    1064:	a2 2f       	mov	r26, r18
    1066:	23 2f       	mov	r18, r19
    1068:	34 2f       	mov	r19, r20
    106a:	44 27       	eor	r20, r20
    106c:	58 5f       	subi	r21, 0xF8	; 248
    106e:	f3 cf       	rjmp	.-26     	; 0x1056 <__addsf3x+0x38>
    1070:	46 95       	lsr	r20
    1072:	37 95       	ror	r19
    1074:	27 95       	ror	r18
    1076:	a7 95       	ror	r26
    1078:	f0 40       	sbci	r31, 0x00	; 0
    107a:	53 95       	inc	r21
    107c:	c9 f7       	brne	.-14     	; 0x1070 <__addsf3x+0x52>
    107e:	7e f4       	brtc	.+30     	; 0x109e <__addsf3x+0x80>
    1080:	1f 16       	cp	r1, r31
    1082:	ba 0b       	sbc	r27, r26
    1084:	62 0b       	sbc	r22, r18
    1086:	73 0b       	sbc	r23, r19
    1088:	84 0b       	sbc	r24, r20
    108a:	ba f0       	brmi	.+46     	; 0x10ba <__addsf3x+0x9c>
    108c:	91 50       	subi	r25, 0x01	; 1
    108e:	a1 f0       	breq	.+40     	; 0x10b8 <__addsf3x+0x9a>
    1090:	ff 0f       	add	r31, r31
    1092:	bb 1f       	adc	r27, r27
    1094:	66 1f       	adc	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	c2 f7       	brpl	.-16     	; 0x108c <__addsf3x+0x6e>
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <__addsf3x+0x9c>
    109e:	ba 0f       	add	r27, r26
    10a0:	62 1f       	adc	r22, r18
    10a2:	73 1f       	adc	r23, r19
    10a4:	84 1f       	adc	r24, r20
    10a6:	48 f4       	brcc	.+18     	; 0x10ba <__addsf3x+0x9c>
    10a8:	87 95       	ror	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b7 95       	ror	r27
    10b0:	f7 95       	ror	r31
    10b2:	9e 3f       	cpi	r25, 0xFE	; 254
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <__addsf3x+0x9a>
    10b6:	b0 cf       	rjmp	.-160    	; 0x1018 <__addsf3+0x28>
    10b8:	93 95       	inc	r25
    10ba:	88 0f       	add	r24, r24
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <__addsf3x+0xa2>
    10be:	99 27       	eor	r25, r25
    10c0:	ee 0f       	add	r30, r30
    10c2:	97 95       	ror	r25
    10c4:	87 95       	ror	r24
    10c6:	08 95       	ret

000010c8 <__divsf3>:
    10c8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__divsf3x>
    10cc:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_round>
    10d0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fp_pscB>
    10d4:	58 f0       	brcs	.+22     	; 0x10ec <__divsf3+0x24>
    10d6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__fp_pscA>
    10da:	40 f0       	brcs	.+16     	; 0x10ec <__divsf3+0x24>
    10dc:	29 f4       	brne	.+10     	; 0x10e8 <__divsf3+0x20>
    10de:	5f 3f       	cpi	r21, 0xFF	; 255
    10e0:	29 f0       	breq	.+10     	; 0x10ec <__divsf3+0x24>
    10e2:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_inf>
    10e6:	51 11       	cpse	r21, r1
    10e8:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_szero>
    10ec:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_nan>

000010f0 <__divsf3x>:
    10f0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_split3>
    10f4:	68 f3       	brcs	.-38     	; 0x10d0 <__divsf3+0x8>

000010f6 <__divsf3_pse>:
    10f6:	99 23       	and	r25, r25
    10f8:	b1 f3       	breq	.-20     	; 0x10e6 <__divsf3+0x1e>
    10fa:	55 23       	and	r21, r21
    10fc:	91 f3       	breq	.-28     	; 0x10e2 <__divsf3+0x1a>
    10fe:	95 1b       	sub	r25, r21
    1100:	55 0b       	sbc	r21, r21
    1102:	bb 27       	eor	r27, r27
    1104:	aa 27       	eor	r26, r26
    1106:	62 17       	cp	r22, r18
    1108:	73 07       	cpc	r23, r19
    110a:	84 07       	cpc	r24, r20
    110c:	38 f0       	brcs	.+14     	; 0x111c <__divsf3_pse+0x26>
    110e:	9f 5f       	subi	r25, 0xFF	; 255
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	22 0f       	add	r18, r18
    1114:	33 1f       	adc	r19, r19
    1116:	44 1f       	adc	r20, r20
    1118:	aa 1f       	adc	r26, r26
    111a:	a9 f3       	breq	.-22     	; 0x1106 <__divsf3_pse+0x10>
    111c:	35 d0       	rcall	.+106    	; 0x1188 <__divsf3_pse+0x92>
    111e:	0e 2e       	mov	r0, r30
    1120:	3a f0       	brmi	.+14     	; 0x1130 <__divsf3_pse+0x3a>
    1122:	e0 e8       	ldi	r30, 0x80	; 128
    1124:	32 d0       	rcall	.+100    	; 0x118a <__divsf3_pse+0x94>
    1126:	91 50       	subi	r25, 0x01	; 1
    1128:	50 40       	sbci	r21, 0x00	; 0
    112a:	e6 95       	lsr	r30
    112c:	00 1c       	adc	r0, r0
    112e:	ca f7       	brpl	.-14     	; 0x1122 <__divsf3_pse+0x2c>
    1130:	2b d0       	rcall	.+86     	; 0x1188 <__divsf3_pse+0x92>
    1132:	fe 2f       	mov	r31, r30
    1134:	29 d0       	rcall	.+82     	; 0x1188 <__divsf3_pse+0x92>
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	bb 1f       	adc	r27, r27
    113e:	26 17       	cp	r18, r22
    1140:	37 07       	cpc	r19, r23
    1142:	48 07       	cpc	r20, r24
    1144:	ab 07       	cpc	r26, r27
    1146:	b0 e8       	ldi	r27, 0x80	; 128
    1148:	09 f0       	breq	.+2      	; 0x114c <__divsf3_pse+0x56>
    114a:	bb 0b       	sbc	r27, r27
    114c:	80 2d       	mov	r24, r0
    114e:	bf 01       	movw	r22, r30
    1150:	ff 27       	eor	r31, r31
    1152:	93 58       	subi	r25, 0x83	; 131
    1154:	5f 4f       	sbci	r21, 0xFF	; 255
    1156:	3a f0       	brmi	.+14     	; 0x1166 <__divsf3_pse+0x70>
    1158:	9e 3f       	cpi	r25, 0xFE	; 254
    115a:	51 05       	cpc	r21, r1
    115c:	78 f0       	brcs	.+30     	; 0x117c <__divsf3_pse+0x86>
    115e:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_inf>
    1162:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_szero>
    1166:	5f 3f       	cpi	r21, 0xFF	; 255
    1168:	e4 f3       	brlt	.-8      	; 0x1162 <__divsf3_pse+0x6c>
    116a:	98 3e       	cpi	r25, 0xE8	; 232
    116c:	d4 f3       	brlt	.-12     	; 0x1162 <__divsf3_pse+0x6c>
    116e:	86 95       	lsr	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f7 95       	ror	r31
    1178:	9f 5f       	subi	r25, 0xFF	; 255
    117a:	c9 f7       	brne	.-14     	; 0x116e <__divsf3_pse+0x78>
    117c:	88 0f       	add	r24, r24
    117e:	91 1d       	adc	r25, r1
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	97 f9       	bld	r25, 7
    1186:	08 95       	ret
    1188:	e1 e0       	ldi	r30, 0x01	; 1
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	bb 1f       	adc	r27, r27
    1192:	62 17       	cp	r22, r18
    1194:	73 07       	cpc	r23, r19
    1196:	84 07       	cpc	r24, r20
    1198:	ba 07       	cpc	r27, r26
    119a:	20 f0       	brcs	.+8      	; 0x11a4 <__divsf3_pse+0xae>
    119c:	62 1b       	sub	r22, r18
    119e:	73 0b       	sbc	r23, r19
    11a0:	84 0b       	sbc	r24, r20
    11a2:	ba 0b       	sbc	r27, r26
    11a4:	ee 1f       	adc	r30, r30
    11a6:	88 f7       	brcc	.-30     	; 0x118a <__divsf3_pse+0x94>
    11a8:	e0 95       	com	r30
    11aa:	08 95       	ret

000011ac <__fixsfsi>:
    11ac:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fixunssfsi>
    11b0:	68 94       	set
    11b2:	b1 11       	cpse	r27, r1
    11b4:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_szero>
    11b8:	08 95       	ret

000011ba <__fixunssfsi>:
    11ba:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__fp_splitA>
    11be:	88 f0       	brcs	.+34     	; 0x11e2 <__fixunssfsi+0x28>
    11c0:	9f 57       	subi	r25, 0x7F	; 127
    11c2:	98 f0       	brcs	.+38     	; 0x11ea <__fixunssfsi+0x30>
    11c4:	b9 2f       	mov	r27, r25
    11c6:	99 27       	eor	r25, r25
    11c8:	b7 51       	subi	r27, 0x17	; 23
    11ca:	b0 f0       	brcs	.+44     	; 0x11f8 <__fixunssfsi+0x3e>
    11cc:	e1 f0       	breq	.+56     	; 0x1206 <__fixunssfsi+0x4c>
    11ce:	66 0f       	add	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	88 1f       	adc	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	1a f0       	brmi	.+6      	; 0x11de <__fixunssfsi+0x24>
    11d8:	ba 95       	dec	r27
    11da:	c9 f7       	brne	.-14     	; 0x11ce <__fixunssfsi+0x14>
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <__fixunssfsi+0x4c>
    11de:	b1 30       	cpi	r27, 0x01	; 1
    11e0:	91 f0       	breq	.+36     	; 0x1206 <__fixunssfsi+0x4c>
    11e2:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_zero>
    11e6:	b1 e0       	ldi	r27, 0x01	; 1
    11e8:	08 95       	ret
    11ea:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__fp_zero>
    11ee:	67 2f       	mov	r22, r23
    11f0:	78 2f       	mov	r23, r24
    11f2:	88 27       	eor	r24, r24
    11f4:	b8 5f       	subi	r27, 0xF8	; 248
    11f6:	39 f0       	breq	.+14     	; 0x1206 <__fixunssfsi+0x4c>
    11f8:	b9 3f       	cpi	r27, 0xF9	; 249
    11fa:	cc f3       	brlt	.-14     	; 0x11ee <__fixunssfsi+0x34>
    11fc:	86 95       	lsr	r24
    11fe:	77 95       	ror	r23
    1200:	67 95       	ror	r22
    1202:	b3 95       	inc	r27
    1204:	d9 f7       	brne	.-10     	; 0x11fc <__fixunssfsi+0x42>
    1206:	3e f4       	brtc	.+14     	; 0x1216 <__fixunssfsi+0x5c>
    1208:	90 95       	com	r25
    120a:	80 95       	com	r24
    120c:	70 95       	com	r23
    120e:	61 95       	neg	r22
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	8f 4f       	sbci	r24, 0xFF	; 255
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	08 95       	ret

00001218 <__floatunsisf>:
    1218:	e8 94       	clt
    121a:	09 c0       	rjmp	.+18     	; 0x122e <__floatsisf+0x12>

0000121c <__floatsisf>:
    121c:	97 fb       	bst	r25, 7
    121e:	3e f4       	brtc	.+14     	; 0x122e <__floatsisf+0x12>
    1220:	90 95       	com	r25
    1222:	80 95       	com	r24
    1224:	70 95       	com	r23
    1226:	61 95       	neg	r22
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	99 23       	and	r25, r25
    1230:	a9 f0       	breq	.+42     	; 0x125c <__floatsisf+0x40>
    1232:	f9 2f       	mov	r31, r25
    1234:	96 e9       	ldi	r25, 0x96	; 150
    1236:	bb 27       	eor	r27, r27
    1238:	93 95       	inc	r25
    123a:	f6 95       	lsr	r31
    123c:	87 95       	ror	r24
    123e:	77 95       	ror	r23
    1240:	67 95       	ror	r22
    1242:	b7 95       	ror	r27
    1244:	f1 11       	cpse	r31, r1
    1246:	f8 cf       	rjmp	.-16     	; 0x1238 <__floatsisf+0x1c>
    1248:	fa f4       	brpl	.+62     	; 0x1288 <__floatsisf+0x6c>
    124a:	bb 0f       	add	r27, r27
    124c:	11 f4       	brne	.+4      	; 0x1252 <__floatsisf+0x36>
    124e:	60 ff       	sbrs	r22, 0
    1250:	1b c0       	rjmp	.+54     	; 0x1288 <__floatsisf+0x6c>
    1252:	6f 5f       	subi	r22, 0xFF	; 255
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	8f 4f       	sbci	r24, 0xFF	; 255
    1258:	9f 4f       	sbci	r25, 0xFF	; 255
    125a:	16 c0       	rjmp	.+44     	; 0x1288 <__floatsisf+0x6c>
    125c:	88 23       	and	r24, r24
    125e:	11 f0       	breq	.+4      	; 0x1264 <__floatsisf+0x48>
    1260:	96 e9       	ldi	r25, 0x96	; 150
    1262:	11 c0       	rjmp	.+34     	; 0x1286 <__floatsisf+0x6a>
    1264:	77 23       	and	r23, r23
    1266:	21 f0       	breq	.+8      	; 0x1270 <__floatsisf+0x54>
    1268:	9e e8       	ldi	r25, 0x8E	; 142
    126a:	87 2f       	mov	r24, r23
    126c:	76 2f       	mov	r23, r22
    126e:	05 c0       	rjmp	.+10     	; 0x127a <__floatsisf+0x5e>
    1270:	66 23       	and	r22, r22
    1272:	71 f0       	breq	.+28     	; 0x1290 <__floatsisf+0x74>
    1274:	96 e8       	ldi	r25, 0x86	; 134
    1276:	86 2f       	mov	r24, r22
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	2a f0       	brmi	.+10     	; 0x1288 <__floatsisf+0x6c>
    127e:	9a 95       	dec	r25
    1280:	66 0f       	add	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	88 1f       	adc	r24, r24
    1286:	da f7       	brpl	.-10     	; 0x127e <__floatsisf+0x62>
    1288:	88 0f       	add	r24, r24
    128a:	96 95       	lsr	r25
    128c:	87 95       	ror	r24
    128e:	97 f9       	bld	r25, 7
    1290:	08 95       	ret

00001292 <__fp_inf>:
    1292:	97 f9       	bld	r25, 7
    1294:	9f 67       	ori	r25, 0x7F	; 127
    1296:	80 e8       	ldi	r24, 0x80	; 128
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	08 95       	ret

0000129e <__fp_nan>:
    129e:	9f ef       	ldi	r25, 0xFF	; 255
    12a0:	80 ec       	ldi	r24, 0xC0	; 192
    12a2:	08 95       	ret

000012a4 <__fp_pscA>:
    12a4:	00 24       	eor	r0, r0
    12a6:	0a 94       	dec	r0
    12a8:	16 16       	cp	r1, r22
    12aa:	17 06       	cpc	r1, r23
    12ac:	18 06       	cpc	r1, r24
    12ae:	09 06       	cpc	r0, r25
    12b0:	08 95       	ret

000012b2 <__fp_pscB>:
    12b2:	00 24       	eor	r0, r0
    12b4:	0a 94       	dec	r0
    12b6:	12 16       	cp	r1, r18
    12b8:	13 06       	cpc	r1, r19
    12ba:	14 06       	cpc	r1, r20
    12bc:	05 06       	cpc	r0, r21
    12be:	08 95       	ret

000012c0 <__fp_round>:
    12c0:	09 2e       	mov	r0, r25
    12c2:	03 94       	inc	r0
    12c4:	00 0c       	add	r0, r0
    12c6:	11 f4       	brne	.+4      	; 0x12cc <__fp_round+0xc>
    12c8:	88 23       	and	r24, r24
    12ca:	52 f0       	brmi	.+20     	; 0x12e0 <__fp_round+0x20>
    12cc:	bb 0f       	add	r27, r27
    12ce:	40 f4       	brcc	.+16     	; 0x12e0 <__fp_round+0x20>
    12d0:	bf 2b       	or	r27, r31
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <__fp_round+0x18>
    12d4:	60 ff       	sbrs	r22, 0
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <__fp_round+0x20>
    12d8:	6f 5f       	subi	r22, 0xFF	; 255
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	8f 4f       	sbci	r24, 0xFF	; 255
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	08 95       	ret

000012e2 <__fp_split3>:
    12e2:	57 fd       	sbrc	r21, 7
    12e4:	90 58       	subi	r25, 0x80	; 128
    12e6:	44 0f       	add	r20, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	59 f0       	breq	.+22     	; 0x1302 <__fp_splitA+0x10>
    12ec:	5f 3f       	cpi	r21, 0xFF	; 255
    12ee:	71 f0       	breq	.+28     	; 0x130c <__fp_splitA+0x1a>
    12f0:	47 95       	ror	r20

000012f2 <__fp_splitA>:
    12f2:	88 0f       	add	r24, r24
    12f4:	97 fb       	bst	r25, 7
    12f6:	99 1f       	adc	r25, r25
    12f8:	61 f0       	breq	.+24     	; 0x1312 <__fp_splitA+0x20>
    12fa:	9f 3f       	cpi	r25, 0xFF	; 255
    12fc:	79 f0       	breq	.+30     	; 0x131c <__fp_splitA+0x2a>
    12fe:	87 95       	ror	r24
    1300:	08 95       	ret
    1302:	12 16       	cp	r1, r18
    1304:	13 06       	cpc	r1, r19
    1306:	14 06       	cpc	r1, r20
    1308:	55 1f       	adc	r21, r21
    130a:	f2 cf       	rjmp	.-28     	; 0x12f0 <__fp_split3+0xe>
    130c:	46 95       	lsr	r20
    130e:	f1 df       	rcall	.-30     	; 0x12f2 <__fp_splitA>
    1310:	08 c0       	rjmp	.+16     	; 0x1322 <__fp_splitA+0x30>
    1312:	16 16       	cp	r1, r22
    1314:	17 06       	cpc	r1, r23
    1316:	18 06       	cpc	r1, r24
    1318:	99 1f       	adc	r25, r25
    131a:	f1 cf       	rjmp	.-30     	; 0x12fe <__fp_splitA+0xc>
    131c:	86 95       	lsr	r24
    131e:	71 05       	cpc	r23, r1
    1320:	61 05       	cpc	r22, r1
    1322:	08 94       	sec
    1324:	08 95       	ret

00001326 <__fp_zero>:
    1326:	e8 94       	clt

00001328 <__fp_szero>:
    1328:	bb 27       	eor	r27, r27
    132a:	66 27       	eor	r22, r22
    132c:	77 27       	eor	r23, r23
    132e:	cb 01       	movw	r24, r22
    1330:	97 f9       	bld	r25, 7
    1332:	08 95       	ret

00001334 <__gesf2>:
    1334:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__fp_cmp>
    1338:	08 f4       	brcc	.+2      	; 0x133c <__gesf2+0x8>
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	08 95       	ret

0000133e <__mulsf3>:
    133e:	0e 94 b2 09 	call	0x1364	; 0x1364 <__mulsf3x>
    1342:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_round>
    1346:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__fp_pscA>
    134a:	38 f0       	brcs	.+14     	; 0x135a <__mulsf3+0x1c>
    134c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fp_pscB>
    1350:	20 f0       	brcs	.+8      	; 0x135a <__mulsf3+0x1c>
    1352:	95 23       	and	r25, r21
    1354:	11 f0       	breq	.+4      	; 0x135a <__mulsf3+0x1c>
    1356:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_inf>
    135a:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_nan>
    135e:	11 24       	eor	r1, r1
    1360:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_szero>

00001364 <__mulsf3x>:
    1364:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_split3>
    1368:	70 f3       	brcs	.-36     	; 0x1346 <__mulsf3+0x8>

0000136a <__mulsf3_pse>:
    136a:	95 9f       	mul	r25, r21
    136c:	c1 f3       	breq	.-16     	; 0x135e <__mulsf3+0x20>
    136e:	95 0f       	add	r25, r21
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	55 1f       	adc	r21, r21
    1374:	62 9f       	mul	r22, r18
    1376:	f0 01       	movw	r30, r0
    1378:	72 9f       	mul	r23, r18
    137a:	bb 27       	eor	r27, r27
    137c:	f0 0d       	add	r31, r0
    137e:	b1 1d       	adc	r27, r1
    1380:	63 9f       	mul	r22, r19
    1382:	aa 27       	eor	r26, r26
    1384:	f0 0d       	add	r31, r0
    1386:	b1 1d       	adc	r27, r1
    1388:	aa 1f       	adc	r26, r26
    138a:	64 9f       	mul	r22, r20
    138c:	66 27       	eor	r22, r22
    138e:	b0 0d       	add	r27, r0
    1390:	a1 1d       	adc	r26, r1
    1392:	66 1f       	adc	r22, r22
    1394:	82 9f       	mul	r24, r18
    1396:	22 27       	eor	r18, r18
    1398:	b0 0d       	add	r27, r0
    139a:	a1 1d       	adc	r26, r1
    139c:	62 1f       	adc	r22, r18
    139e:	73 9f       	mul	r23, r19
    13a0:	b0 0d       	add	r27, r0
    13a2:	a1 1d       	adc	r26, r1
    13a4:	62 1f       	adc	r22, r18
    13a6:	83 9f       	mul	r24, r19
    13a8:	a0 0d       	add	r26, r0
    13aa:	61 1d       	adc	r22, r1
    13ac:	22 1f       	adc	r18, r18
    13ae:	74 9f       	mul	r23, r20
    13b0:	33 27       	eor	r19, r19
    13b2:	a0 0d       	add	r26, r0
    13b4:	61 1d       	adc	r22, r1
    13b6:	23 1f       	adc	r18, r19
    13b8:	84 9f       	mul	r24, r20
    13ba:	60 0d       	add	r22, r0
    13bc:	21 1d       	adc	r18, r1
    13be:	82 2f       	mov	r24, r18
    13c0:	76 2f       	mov	r23, r22
    13c2:	6a 2f       	mov	r22, r26
    13c4:	11 24       	eor	r1, r1
    13c6:	9f 57       	subi	r25, 0x7F	; 127
    13c8:	50 40       	sbci	r21, 0x00	; 0
    13ca:	9a f0       	brmi	.+38     	; 0x13f2 <__mulsf3_pse+0x88>
    13cc:	f1 f0       	breq	.+60     	; 0x140a <__mulsf3_pse+0xa0>
    13ce:	88 23       	and	r24, r24
    13d0:	4a f0       	brmi	.+18     	; 0x13e4 <__mulsf3_pse+0x7a>
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	bb 1f       	adc	r27, r27
    13d8:	66 1f       	adc	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	91 50       	subi	r25, 0x01	; 1
    13e0:	50 40       	sbci	r21, 0x00	; 0
    13e2:	a9 f7       	brne	.-22     	; 0x13ce <__mulsf3_pse+0x64>
    13e4:	9e 3f       	cpi	r25, 0xFE	; 254
    13e6:	51 05       	cpc	r21, r1
    13e8:	80 f0       	brcs	.+32     	; 0x140a <__mulsf3_pse+0xa0>
    13ea:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__fp_inf>
    13ee:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_szero>
    13f2:	5f 3f       	cpi	r21, 0xFF	; 255
    13f4:	e4 f3       	brlt	.-8      	; 0x13ee <__mulsf3_pse+0x84>
    13f6:	98 3e       	cpi	r25, 0xE8	; 232
    13f8:	d4 f3       	brlt	.-12     	; 0x13ee <__mulsf3_pse+0x84>
    13fa:	86 95       	lsr	r24
    13fc:	77 95       	ror	r23
    13fe:	67 95       	ror	r22
    1400:	b7 95       	ror	r27
    1402:	f7 95       	ror	r31
    1404:	e7 95       	ror	r30
    1406:	9f 5f       	subi	r25, 0xFF	; 255
    1408:	c1 f7       	brne	.-16     	; 0x13fa <__mulsf3_pse+0x90>
    140a:	fe 2b       	or	r31, r30
    140c:	88 0f       	add	r24, r24
    140e:	91 1d       	adc	r25, r1
    1410:	96 95       	lsr	r25
    1412:	87 95       	ror	r24
    1414:	97 f9       	bld	r25, 7
    1416:	08 95       	ret

00001418 <__fp_cmp>:
    1418:	99 0f       	add	r25, r25
    141a:	00 08       	sbc	r0, r0
    141c:	55 0f       	add	r21, r21
    141e:	aa 0b       	sbc	r26, r26
    1420:	e0 e8       	ldi	r30, 0x80	; 128
    1422:	fe ef       	ldi	r31, 0xFE	; 254
    1424:	16 16       	cp	r1, r22
    1426:	17 06       	cpc	r1, r23
    1428:	e8 07       	cpc	r30, r24
    142a:	f9 07       	cpc	r31, r25
    142c:	c0 f0       	brcs	.+48     	; 0x145e <__fp_cmp+0x46>
    142e:	12 16       	cp	r1, r18
    1430:	13 06       	cpc	r1, r19
    1432:	e4 07       	cpc	r30, r20
    1434:	f5 07       	cpc	r31, r21
    1436:	98 f0       	brcs	.+38     	; 0x145e <__fp_cmp+0x46>
    1438:	62 1b       	sub	r22, r18
    143a:	73 0b       	sbc	r23, r19
    143c:	84 0b       	sbc	r24, r20
    143e:	95 0b       	sbc	r25, r21
    1440:	39 f4       	brne	.+14     	; 0x1450 <__fp_cmp+0x38>
    1442:	0a 26       	eor	r0, r26
    1444:	61 f0       	breq	.+24     	; 0x145e <__fp_cmp+0x46>
    1446:	23 2b       	or	r18, r19
    1448:	24 2b       	or	r18, r20
    144a:	25 2b       	or	r18, r21
    144c:	21 f4       	brne	.+8      	; 0x1456 <__fp_cmp+0x3e>
    144e:	08 95       	ret
    1450:	0a 26       	eor	r0, r26
    1452:	09 f4       	brne	.+2      	; 0x1456 <__fp_cmp+0x3e>
    1454:	a1 40       	sbci	r26, 0x01	; 1
    1456:	a6 95       	lsr	r26
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	81 1d       	adc	r24, r1
    145c:	81 1d       	adc	r24, r1
    145e:	08 95       	ret

00001460 <__umulhisi3>:
    1460:	a2 9f       	mul	r26, r18
    1462:	b0 01       	movw	r22, r0
    1464:	b3 9f       	mul	r27, r19
    1466:	c0 01       	movw	r24, r0
    1468:	a3 9f       	mul	r26, r19
    146a:	01 d0       	rcall	.+2      	; 0x146e <__umulhisi3+0xe>
    146c:	b2 9f       	mul	r27, r18
    146e:	70 0d       	add	r23, r0
    1470:	81 1d       	adc	r24, r1
    1472:	11 24       	eor	r1, r1
    1474:	91 1d       	adc	r25, r1
    1476:	08 95       	ret

00001478 <__tablejump2__>:
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	05 90       	lpm	r0, Z+
    147e:	f4 91       	lpm	r31, Z
    1480:	e0 2d       	mov	r30, r0
    1482:	09 94       	ijmp

00001484 <_exit>:
    1484:	f8 94       	cli

00001486 <__stop_program>:
    1486:	ff cf       	rjmp	.-2      	; 0x1486 <__stop_program>
